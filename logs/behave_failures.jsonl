{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": 42 }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": 42 }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": \"forty-two\" }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": \"forty-two\" }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.294989+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.325813+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.444898+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.472581+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.498612+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.522963+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.545406+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.568189+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.59282+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332', 'value': 42}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332', 'value': 42}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332',\n     'value': 'forty-two'}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332',\n     'value': 'forty-two'}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:148", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:148", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response header \"ETag\" should be a non-empty string", "location": "tests/integration/features/questionnaire_integration.feature:29", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response header \"ETag\" should be a non-empty string", "location": "tests/integration/features/questionnaire_integration.feature:29", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "subsequent rows are ordered by screen\\_key asc, question\\_order asc, then question\\_id asc", "location": "tests/integration/features/questionnaire_integration.feature:95", "exception_class": "AssertionError", "exception_message": "CSV must have header and at least one data row", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "subsequent rows are ordered by screen\\_key asc, question\\_order asc, then question\\_id asc", "location": "tests/integration/features/questionnaire_integration.feature:95", "exception_class": "AssertionError", "exception_message": "CSV must have header and at least one data row", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.errors.length()\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:85", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.errors.length()\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:85", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "AssertionError", "exception_message": "Expected 3 at \\$.questions.length(), got 4", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "AssertionError", "exception_message": "Expected 3 at \\$.questions.length(), got 4", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following screens exist for questionnaire \"11111111-1111-1111-1111-111111111111\":", "location": "tests/integration/features/questionnaire_integration.feature:12", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.ForeignKeyViolation) insert or update on table \"screens\" violates foreign key constraint \"screens_questionnaire_id_fkey\"\nDETAIL:  Key (questionnaire_id)=(11111111-1111-1111-1111-111111111111) is not present in table \"questionnaires\".\n\n[SQL: INSERT INTO screens (screen_id, questionnaire_id, screen_key, title) VALUES (%(sid)s, %(qid)s, %(key)s, %(title)s) ON CONFLICT (screen_id) DO UPDATE SET screen_key=EXCLUDED.screen_key, title=EXCLUDED.title]\n[parameters: {'sid': '22222222-2222-2222-2222-222222222222', 'qid': '11111111-1111-1111-1111-111111111111', 'key': 'company', 'title': 'Company Info'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the database table \"answer\" should have 0 rows for response\\_set\\_id \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:33", "exception_class": "AssertionError", "exception_message": "Expected 0 rows for response_set_id=44444444-4444-4444-4444-444444444444, got 1", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the database table \"answer\" should have 0 rows for response\\_set\\_id \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:33", "exception_class": "AssertionError", "exception_message": "Expected 0 rows for response_set_id=44444444-4444-4444-4444-444444444444, got 1", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/0169ebb1-a476-410a-8773-2ea2f70a0118", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/0169ebb1-a476-410a-8773-2ea2f70a0118", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:72", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/252865c8-73b3-4241-9df1-2f7cbc919f11", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:72", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/252865c8-73b3-4241-9df1-2f7cbc919f11", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:95", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_bool' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_bool': True}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/fcbd1146-82b2-4529-9c0f-7ceec034e487", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:95", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_bool' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_bool': True}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/fcbd1146-82b2-4529-9c0f-7ceec034e487", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:111", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'not-a-boolean'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/75d1874c-c1af-47b6-8481-1b0b1111a603", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:111", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'not-a-boolean'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/75d1874c-c1af-47b6-8481-1b0b1111a603", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:128", "exception_class": "AssertionError", "exception_message": "Expected 'Not Found' in $.title, got ['Screen not found']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:128", "exception_class": "AssertionError", "exception_message": "Expected 'Not Found' in $.title, got ['Screen not found']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I PATCH \"/response-sets/rs-001/answers/q-missing\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:134", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'irrelevant'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/c5868f36-d4ad-4d42-894f-a6ce7e69a81d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I PATCH \"/response-sets/rs-001/answers/q-missing\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:134", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'irrelevant'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/c5868f36-d4ad-4d42-894f-a6ce7e69a81d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:148", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/3b6abc4b-6b79-4a3a-a640-c425e1938003", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:148", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/3b6abc4b-6b79-4a3a-a640-c425e1938003", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/23845126-56bf-4a83-a618-c2054c037d4f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/23845126-56bf-4a83-a618-c2054c037d4f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/8b615b96-1836-48b5-94e0-d61f3089866d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/8b615b96-1836-48b5-94e0-d61f3089866d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d16b71a6-a1c8-4b27-a262-8891f6b966ad", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d16b71a6-a1c8-4b27-a262-8891f6b966ad", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/7ad4b13e-d2a5-43cd-b5a9-d7d0abc82b9c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/7ad4b13e-d2a5-43cd-b5a9-d7d0abc82b9c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cd83c403-9262-4bf3-aba6-83b20690388f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cd83c403-9262-4bf3-aba6-83b20690388f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.type\" should equal \"about:blank\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:103", "exception_class": "KeyError", "exception_message": "'type'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.type\" should equal \"about:blank\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:103", "exception_class": "KeyError", "exception_message": "'type'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "KeyError", "exception_message": "'detail'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "KeyError", "exception_message": "'detail'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_I_conditional_visibility.feature:141", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_I_conditional_visibility.feature:141", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d6d5ca25-8228-4eb6-a395-34d9b8427f6c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d6d5ca25-8228-4eb6-a395-34d9b8427f6c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.title\" should contain \"Conflict\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:104", "exception_class": "AssertionError", "exception_message": "Expected substring 'Conflict' in $.title, got 'ETag mismatch'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.title\" should contain \"Conflict\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:104", "exception_class": "AssertionError", "exception_message": "Expected substring 'Conflict' in $.title, got 'ETag mismatch'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/1f2e099e-4f53-4d9c-b2c6-69f21cbeeff8", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/1f2e099e-4f53-4d9c-b2c6-69f21cbeeff8", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/5b102c6a-0cfd-48c4-b1fe-bfd1b88a50bb", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/5b102c6a-0cfd-48c4-b1fe-bfd1b88a50bb", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"810bf4818ff77676c6b111db48df11428d26b7a7\"',\n     'visibility_delta': {'now_visible': ['59830e92-110f-5c6b-8cae-3388c0141e97'],\n                          'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"810bf4818ff77676c6b111db48df11428d26b7a7\"',\n     'visibility_delta': {'now_visible': ['59830e92-110f-5c6b-8cae-3388c0141e97'],\n                          'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"0d7edc3ee83a021aa7fd8ee9d1bd802c3d16e3d1\"',\n     'visibility_delta': {'now_visible': [],\n                          'now_hidden': ['59830e92-110f-5c6b-8cae-3388c0141e97']},\n     'suppressed_answers': ['59830e92-110f-5c6b-8cae-3388c0141e97']}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"0d7edc3ee83a021aa7fd8ee9d1bd802c3d16e3d1\"',\n     'visibility_delta': {'now_visible': [],\n                          'now_hidden': ['59830e92-110f-5c6b-8cae-3388c0141e97']},\n     'suppressed_answers': ['59830e92-110f-5c6b-8cae-3388c0141e97']}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"d70dae89676a4916034dabc2cda626762b54d2f1\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"d70dae89676a4916034dabc2cda626762b54d2f1\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"1d4a12ae1c23ee037e424f2e09f3003383ee3443\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"1d4a12ae1c23ee037e424f2e09f3003383ee3443\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:170", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"493c7eb599e2de21e05ab1681d3c6b5cfd61c346\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:170", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"493c7eb599e2de21e05ab1681d3c6b5cfd61c346\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 404", "last_response": {"method": "POST", "path": "/documents", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 404", "last_response": {"method": "POST", "path": "/documents", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 404", "last_response": {"method": "PUT", "path": "/documents/order", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 404", "last_response": {"method": "PUT", "path": "/documents/order", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "Unsupported path: code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "Unsupported path: code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 501", "last_response": {"method": "POST", "path": "/documents", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:15", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:15", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:43", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "PUT", "path": "/documents/d17c6ba4-48a0-4b04-95c6-e6e655b4990e/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:43", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "PUT", "path": "/documents/d17c6ba4-48a0-4b04-95c6-e6e655b4990e/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:15", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:15", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:43", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "PUT", "path": "/documents/558e6c04-1636-48d4-91d1-b2bc5dcb7949/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:43", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/DocumentId.schema.json'", "last_response": {"method": "PUT", "path": "/documents/558e6c04-1636-48d4-91d1-b2bc5dcb7949/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:15", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/schemas/Document.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:15", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/schemas/schemas/Document.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:48", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "PATCH", "path": "/documents/{D}", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:48", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "PATCH", "path": "/documents/{D}", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "PUT", "path": "/documents/order", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET metadata for document \"D\" and capture the document ETag as \"W/\\\"doc-v1\\\"\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:29", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/documents/8fb62dfb-6906-4851-a8d2-55ec7a84cb96", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET metadata for document \"D\" and capture the document ETag as \"W/\\\"doc-v1\\\"\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:29", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/documents/8fb62dfb-6906-4851-a8d2-55ec7a84cb96", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list[0].title\" should equal \"Alpha\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected '95efcfeb-8346-491a-bea2-bb3590df10e3' at list[0].title, got Alpha", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list[0].title\" should equal \"Alpha\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected '95efcfeb-8346-491a-bea2-bb3590df10e3' at list[0].title, got Alpha", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/87b19c48-58b3-4de8-91e5-63b654ddf235/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/87b19c48-58b3-4de8-91e5-63b654ddf235/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/88fa93ef-752c-4d2b-ab64-e863f4185922/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/88fa93ef-752c-4d2b-ab64-e863f4185922/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:161", "exception_class": "AssertionError", "exception_message": "Expected document ETag W/\"doc-v1\", got None", "last_response": {"method": "GET", "path": "/documents/21dde36e-6584-40b3-aeb9-3b682bf666d7", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:161", "exception_class": "AssertionError", "exception_message": "Expected document ETag W/\"doc-v1\", got None", "last_response": {"method": "GET", "path": "/documents/21dde36e-6584-40b3-aeb9-3b682bf666d7", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "when I repeat the same PUT with identical Idempotency-Key the response version should equal 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:39", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/b310a768-a920-4b4a-8251-fa8b7469ae29/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "when I repeat the same PUT with identical Idempotency-Key the response version should equal 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:39", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/b310a768-a920-4b4a-8251-fa8b7469ae29/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list[0].title\" should equal \"Alpha\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 'cdb6fffe-7fbc-4376-af54-1cec0a3c3732' at list[0].title, got Alpha", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list[0].title\" should equal \"Alpha\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 'cdb6fffe-7fbc-4376-af54-1cec0a3c3732' at list[0].title, got Alpha", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/77676162-dc17-4e4c-bfc6-66a0890cafd7/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/77676162-dc17-4e4c-bfc6-66a0890cafd7/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/c951e1a2-2cac-4b1b-bc07-47cfc8d3fcba/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/c951e1a2-2cac-4b1b-bc07-47cfc8d3fcba/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list[0].title\" should equal \"Alpha\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 'bd1416b3-718b-4acf-b0b1-33a80072394b' at list[0].title, got Alpha", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list[0].title\" should equal \"Alpha\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 'bd1416b3-718b-4acf-b0b1-33a80072394b' at list[0].title, got Alpha", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/d06e448d-1369-4be0-9ee9-7d66bf7d39c8/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/d06e448d-1369-4be0-9ee9-7d66bf7d39c8/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/b42c4e78-eda5-4b9f-903b-d449f8c6f886/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/b42c4e78-eda5-4b9f-903b-d449f8c6f886/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/{J}/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:121", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/4b9d34ed-24de-4831-af88-1ae7ac0b0641/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/4b9d34ed-24de-4831-af88-1ae7ac0b0641/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/7c0c3304-6cb1-4c52-a472-a2521fcd7020/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:140", "exception_class": "AssertionError", "exception_message": "Expected 428, got 412", "last_response": {"method": "PUT", "path": "/documents/7c0c3304-6cb1-4c52-a472-a2521fcd7020/content", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "the response JSON at \"code\" should equal \"PRE_DOCUMENT_NOT_FOUND\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:178", "exception_class": "AssertionError", "exception_message": "path not found: $.code", "last_response": {"method": "PUT", "path": "/documents/4f2a3b9d-9b2a-4d8b-932a-d1e9a1f1d001/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/9125f4d0-a327-4d6d-b75d-f484d51cb603/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:105", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/9125f4d0-a327-4d6d-b75d-f484d51cb603/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/f7895bb8-b544-4132-8cad-b03068b74f58/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/f7895bb8-b544-4132-8cad-b03068b74f58/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:156", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header exposed by server", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/ad6dc309-c510-4e6c-b901-bef7b8933c33/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/ad6dc309-c510-4e6c-b901-bef7b8933c33/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "I GET \"/documents/names\" and capture \"list_etag\" as \"LE1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/db9f7b9c-52c9-4d0b-816a-cc7e8e2b0184/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/db9f7b9c-52c9-4d0b-816a-cc7e8e2b0184/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/239e4368-6a92-43f5-b5d7-ec680d2f1fcc/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "the response status should be 415", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:130", "exception_class": "AssertionError", "exception_message": "Expected 415, got 422", "last_response": {"method": "PUT", "path": "/documents/239e4368-6a92-43f5-b5d7-ec680d2f1fcc/content", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "JSON body:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:75", "exception_class": "AssertionError", "exception_message": "Missing or empty If-Match header for PUT JSON body", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "JSON body:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:75", "exception_class": "AssertionError", "exception_message": "Missing or empty If-Match header for PUT JSON body", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response JSON at \"list[0].document_id\" should equal \"G\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 'G' at list[0].document_id, got 37651b73-04a5-43c8-8f2f-8cc7babab33e", "last_response": {"method": "PUT", "path": "/documents/order", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response JSON at \"list[0].document_id\" should equal \"G\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 'G' at list[0].document_id, got 37651b73-04a5-43c8-8f2f-8cc7babab33e", "last_response": {"method": "PUT", "path": "/documents/order", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.screen.screen\\_id", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response JSON at \"\\$.saved\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:46", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.saved", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response JSON at \"\\$.status\" equals 409", "location": "tests/integration/features/questionnaire_integration.feature:117", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:138", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.created\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:150", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.created", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response JSON at \"\\$.status\" equals 404", "location": "tests/integration/features/questionnaire_integration.feature:158", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.status", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "path not found: $.\\$.ok", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "I GET \"/api/v1/questions/q-enum/placeholders?document_id=doc-001\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:165", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "I GET \"/api/v1/questions/q-enum/placeholders?document_id=doc-001\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:165", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "I GET \"/api/v1/transforms/catalog\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:208", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "I GET \"/api/v1/transforms/catalog\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:208", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response body is problem+json with \"title\" containing \"question not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:293", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response body is problem+json with \"title\" containing \"question not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:293", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response body is problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:303", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response body is problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:303", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "I GET \"/api/v1/questions/q-enum/placeholders?document_id=doc-001\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:165", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "I GET \"/api/v1/questions/q-enum/placeholders?document_id=doc-001\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:165", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "I GET \"/api/v1/transforms/catalog\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:208", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "I GET \"/api/v1/transforms/catalog\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:208", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'detail': 'Not Found'}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response body is problem+json with \"title\" containing \"question not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:293", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response body is problem+json with \"title\" containing \"question not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:293", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response body is problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:303", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response body is problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:303", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected application/problem+json Content-Type, got 'application/json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:29", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:75", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:108", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected 200 from list placeholders", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:218", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:234", "exception_class": "AssertionError", "exception_message": "Expected 422, got 501", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "the response status should be 412", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:273", "exception_class": "AssertionError", "exception_message": "Expected 412, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:302", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 500", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f406ebe9b10>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f406ebe9b10>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f2a2fd65a80>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f2a2fd65a80>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f8b4d96f0a0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f8b4d96f0a0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_FINANCE_DIRECTOR'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_FINANCE_DIRECTOR'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "when I repeat the same PUT with identical Idempotency-Key the response version should equal 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:39", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PUT", "path": "/documents/d2ad59f6-2282-4895-bffc-bff0b5607d24/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "when I repeat the same PUT with identical Idempotency-Key the response version should equal 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:39", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PUT", "path": "/documents/d2ad59f6-2282-4895-bffc-bff0b5607d24/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list\" should be an array of length 3", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:62", "exception_class": "AssertionError", "exception_message": "Expected length 3, got 2", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list\" should be an array of length 3", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:62", "exception_class": "AssertionError", "exception_message": "Expected length 3, got 2", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PUT", "path": "/documents/order", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PUT", "path": "/documents/order", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:156", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f26db92db10>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:209", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/TransformsCatalogItem.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f26db92db10>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_FINANCE_DIRECTOR'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_FINANCE_DIRECTOR'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cbd5301d-b2f0-40eb-94be-58f7e2844fc1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cbd5301d-b2f0-40eb-94be-58f7e2844fc1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/da7169f3-011a-47f0-a1aa-89b8c20de755", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/da7169f3-011a-47f0-a1aa-89b8c20de755", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/e439b2af-fc4a-4186-b50c-e851d0a8cf8b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/e439b2af-fc4a-4186-b50c-e851d0a8cf8b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_visible, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_visible, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET reflects updated visibility immediately after PATCH", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET reflects updated visibility immediately after PATCH", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:89", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/48dd6c04-07f6-42b4-ae6d-0807a9a91951", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET reflects updated visibility immediately after PATCH", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET reflects updated visibility immediately after PATCH", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:89", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/48dd6c04-07f6-42b4-ae6d-0807a9a91951", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "when I GET metadata for document \"D\" the version should be 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:38", "exception_class": "AssertionError", "exception_message": "path not found: $.document.version", "last_response": {"method": "GET", "path": "/documents/648cc863-79e8-472e-a728-7a450353184b", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "when I GET metadata for document \"D\" the version should be 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:38", "exception_class": "AssertionError", "exception_message": "path not found: $.document.version", "last_response": {"method": "GET", "path": "/documents/648cc863-79e8-472e-a728-7a450353184b", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PUT", "path": "/documents/cab175e2-046d-488d-aaa4-d158bd3ca271/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PUT", "path": "/documents/cab175e2-046d-488d-aaa4-d158bd3ca271/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:48", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PATCH", "path": "/documents/{D}", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:48", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PATCH", "path": "/documents/{D}", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list\" should be an array of length 3", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:62", "exception_class": "AssertionError", "exception_message": "Expected length 3, got 1", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list\" should be an array of length 3", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:62", "exception_class": "AssertionError", "exception_message": "Expected length 3, got 1", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-if-match-normalized", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:85", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-if-match-normalized", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response JSON at \"list\" should contain three items", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:97", "exception_class": "AssertionError", "exception_message": "Expected three items, got 2", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response JSON at \"list\" should contain three items", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:97", "exception_class": "AssertionError", "exception_message": "Expected three items, got 2", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"answer\\_option\" should include 2 rows for the new question ordered by sort\\_index", "location": "tests/integration/features/questionnaire_integration.feature:87", "exception_class": "AssertionError", "exception_message": "Expected 2 answer_option rows for question_id=30c56ccc-ea23-4a94-b396-e35998ea3e20, got 0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"answer\\_option\" should include 2 rows for the new question ordered by sort\\_index", "location": "tests/integration/features/questionnaire_integration.feature:87", "exception_class": "AssertionError", "exception_message": "Expected 2 answer_option rows for question_id=30c56ccc-ea23-4a94-b396-e35998ea3e20, got 0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:95", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:110", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'ON_THE_INTRANET'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response JSON at \"options[0].value\" should be \"HR_MANAGER\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:220", "exception_class": "AssertionError", "exception_message": "Expected 'HR_MANAGER' at $.options[0].value, got 'THE_HR_MANAGER'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:292", "exception_class": "AssertionError", "exception_message": "Expected 404, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response body is problem+json with \"title\" containing \"transform not applicable\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected substring 'transform not applicable' in field $.title, got 'validation error'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 404, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 501", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 501, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5d603c2920>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5d603c2920>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5d5ffac6d0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f5d5ffac6d0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response JSON at \"deleted_placeholders\" should be greater than 0", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Unsupported path: deleted_placeholders", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response JSON at \"deleted_placeholders\" should be greater than 0", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Unsupported path: deleted_placeholders", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected substring 'not found' in field $.title, got 'Not Found'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected substring 'not found' in field $.title, got 'Not Found'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f39c8bc6980>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f39c8bc6980>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f39c87a87c0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f39c87a87c0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response JSON at \"deleted_placeholders\" should be greater than 0", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Unsupported path: deleted_placeholders", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response JSON at \"deleted_placeholders\" should be greater than 0", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Unsupported path: deleted_placeholders", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected substring 'not found' in field $.title, got 'Not Found'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected substring 'not found' in field $.title, got 'Not Found'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f7aaebbe980>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f7aaebbe980>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f7aae79c7c0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/Placeholder.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7f7aae79c7c0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response JSON at \"deleted_placeholders\" should be greater than 0", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Unsupported path: deleted_placeholders", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response JSON at \"deleted_placeholders\" should be greater than 0", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Unsupported path: deleted_placeholders", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected substring 'not found' in field $.title, got 'Not Found'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected substring 'not found' in field $.title, got 'Not Found'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:330", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 90, 'end': 118},\n     'payload_json': {'options': [{'value': 'INTRANET'},\n                                  {'value': 'DETAILS',\n                                   'placeholder_key': 'DETAILS',\n                                   'placeholder_id': '2ada685f-1946-4294-be5c-8d415cc089a1'}]},\n     'created_at': '2025-10-08T19:25:35.515642+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 90, 'end': 118},\n     'payload_json': {'options': [{'value': 'INTRANET'},\n                                  {'value': 'DETAILS',\n                                   'placeholder_key': 'DETAILS',\n                                   'placeholder_id': '2ada685f-1946-4294-be5c-8d415cc089a1'}]},\n     'created_at': '2025-10-08T19:25:35.515642+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 90, 'end': 118},\n     'payload_json': {'options': [{'value': 'INTRANET'},\n                                  {'value': 'DETAILS',\n                                   'placeholder_key': 'DETAILS',\n                                   'placeholder_id': '2ada685f-1946-4294-be5c-8d415cc089a1'}]},\n     'created_at': '2025-10-08T19:25:35.515642+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'id': '66203753-3540-4940-a1ca-a36f6c844d91',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 90, 'end': 118},\n     'payload_json': {'options': [{'value': 'INTRANET'},\n                                  {'value': 'DETAILS',\n                                   'placeholder_key': 'DETAILS',\n                                   'placeholder_id': '2ada685f-1946-4294-be5c-8d415cc089a1'}]},\n     'created_at': '2025-10-08T19:25:35.515642+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:134", "exception_class": "AssertionError", "exception_message": "path not found: $.options[0].value", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 0, 'end': 0},\n     'payload_json': {'options': [{'value': 'INTRANET'}]},\n     'created_at': '2025-10-08T19:25:37.021544+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:159", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 0, 'end': 0},\n     'payload_json': {'options': [{'value': 'INTRANET'}]},\n     'created_at': '2025-10-08T19:25:37.021544+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 0, 'end': 0},\n     'payload_json': {'options': [{'value': 'INTRANET'}]},\n     'created_at': '2025-10-08T19:25:37.021544+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:166", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('answer_kind', 'placeholder_id' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/Placeholder.json',\n     'title': 'Placeholder',\n     'type': 'object',\n     'properties': {'id': {'type': 'string', 'format': 'uuid'},\n                    'document_id': {'type': 'string', 'format': 'uuid'},\n                    'clause_path': {'type': 'string'},\n                    'text_span': {'$ref': 'https://schemas.schofield.local/epic-d/Span.json'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'transform_id': {'type': 'string'},\n                    'payload_json': {'type': 'object'},\n                    'created_at': {'type': 'string',\n                                   'format': 'date-time'}},\n     'required': ['id',\n                  'document_id',\n                  'clause_path',\n                  'text_span',\n                  'question_id',\n                  'transform_id',\n                  'created_at'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'placeholder_id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'id': 'bc85fe28-d6c8-4f58-b4c1-328b69a97895',\n     'question_id': '96ae04bf-8c0c-5022-a76c-27c7f4249f1d',\n     'transform_id': 'enum_single_v1',\n     'answer_kind': 'enum_single',\n     'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'text_span': {'start': 0, 'end': 0},\n     'payload_json': {'options': [{'value': 'INTRANET'}]},\n     'created_at': '2025-10-08T19:25:37.021544+00:00'}", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:170", "exception_class": "ReadError", "exception_message": "[Errno 104] Connection reset by peer", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:170", "exception_class": "ReadError", "exception_message": "[Errno 104] Connection reset by peer", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 6fdc9bda-274b-4086-ac35-1b673ac31e70", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 6fdc9bda-274b-4086-ac35-1b673ac31e70", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got aa04095d-ccf9-4431-9015-9a41412d3ff4", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got aa04095d-ccf9-4431-9015-9a41412d3ff4", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 391965d6-fc22-4a5b-8fba-a88c75fffdc5", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 391965d6-fc22-4a5b-8fba-a88c75fffdc5", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got a47cfe87-64dc-49d1-ba44-1b069ac31ad9", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got a47cfe87-64dc-49d1-ba44-1b069ac31ad9", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 0d9b46ba-508a-44ef-a892-9ead1bbc3fd0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 0d9b46ba-508a-44ef-a892-9ead1bbc3fd0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c5b12f96-825f-49bf-b525-36ff4d89b662", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c5b12f96-825f-49bf-b525-36ff4d89b662", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got d93dd467-6da9-4b5e-bc76-15343ff4839f", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got d93dd467-6da9-4b5e-bc76-15343ff4839f", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/a27ca6d2-45a7-4df6-a6fa-52958d59de00", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/a27ca6d2-45a7-4df6-a6fa-52958d59de00", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET reflects updated visibility immediately after PATCH", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET reflects updated visibility immediately after PATCH", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:89", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d26e7c47-183a-4c4e-a249-eabccc27c0c6", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET reflects updated visibility immediately after PATCH", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET reflects updated visibility immediately after PATCH", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:89", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d26e7c47-183a-4c4e-a249-eabccc27c0c6", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 74957c02-a110-4bbd-a7b7-59fa93a48ef3", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 74957c02-a110-4bbd-a7b7-59fa93a48ef3", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].payload_json.options[1].placeholder_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].payload_json.options[1].placeholder_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:190", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the database table \"answer\" should have 0 rows for response\\_set\\_id \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:33", "exception_class": "AssertionError", "exception_message": "Expected 0 rows for response_set_id=44444444-4444-4444-4444-444444444444, got 2", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the database table \"answer\" should have 0 rows for response\\_set\\_id \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:33", "exception_class": "AssertionError", "exception_message": "Expected 0 rows for response_set_id=44444444-4444-4444-4444-444444444444, got 2", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:41", "exception_class": "ReadError", "exception_message": "[Errno 104] Connection reset by peer", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:41", "exception_class": "ReadError", "exception_message": "[Errno 104] Connection reset by peer", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got bb957bf3-7419-427d-8038-ec62892160df", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got bb957bf3-7419-427d-8038-ec62892160df", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the question \"q-short\" has no \"answer_kind\" and no \"AnswerOption\" rows", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:193", "exception_class": "AssertionError", "exception_message": "Failed to verify rows in AnswerOption: (psycopg2.errors.InFailedSqlTransaction) current transaction is aborted, commands ignored until end of transaction block\n\n[SQL: SELECT COUNT(*) FROM AnswerOption WHERE question_id = %(qid)s]\n[parameters: {'qid': '0db4348f-3b9f-57db-a64b-85ce4944b8fc'}]\n(Background on this error at: https://sqlalche.me/e/20/2j85)", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the question \"q-short\" has no \"answer_kind\" and no \"AnswerOption\" rows", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:193", "exception_class": "AssertionError", "exception_message": "Failed to verify rows in AnswerOption: (psycopg2.errors.InFailedSqlTransaction) current transaction is aborted, commands ignored until end of transaction block\n\n[SQL: SELECT COUNT(*) FROM AnswerOption WHERE question_id = %(qid)s]\n[parameters: {'qid': '0db4348f-3b9f-57db-a64b-85ce4944b8fc'}]\n(Background on this error at: https://sqlalche.me/e/20/2j85)", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got fd39c470-683f-4ad2-8b37-902c9815e47a", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got fd39c470-683f-4ad2-8b37-902c9815e47a", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the question \"q-short\" has no \"answer_kind\" and no \"AnswerOption\" rows", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:193", "exception_class": "AssertionError", "exception_message": "Failed to verify rows in AnswerOption: (psycopg2.errors.InFailedSqlTransaction) current transaction is aborted, commands ignored until end of transaction block\n\n[SQL: SELECT COUNT(*) FROM AnswerOption WHERE question_id = %(qid)s]\n[parameters: {'qid': '0db4348f-3b9f-57db-a64b-85ce4944b8fc'}]\n(Background on this error at: https://sqlalche.me/e/20/2j85)", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the question \"q-short\" has no \"answer_kind\" and no \"AnswerOption\" rows", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:193", "exception_class": "AssertionError", "exception_message": "Failed to verify rows in AnswerOption: (psycopg2.errors.InFailedSqlTransaction) current transaction is aborted, commands ignored until end of transaction block\n\n[SQL: SELECT COUNT(*) FROM AnswerOption WHERE question_id = %(qid)s]\n[parameters: {'qid': '0db4348f-3b9f-57db-a64b-85ce4944b8fc'}]\n(Background on this error at: https://sqlalche.me/e/20/2j85)", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 70b7f80a-6b77-4346-ba2e-59d1b36c4dee", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 70b7f80a-6b77-4346-ba2e-59d1b36c4dee", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the question \"q-short\" has no \"answer_kind\" and no \"AnswerOption\" rows", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:193", "exception_class": "AssertionError", "exception_message": "Failed to verify rows in AnswerOption: (psycopg2.errors.InFailedSqlTransaction) current transaction is aborted, commands ignored until end of transaction block\n\n[SQL: SELECT COUNT(*) FROM AnswerOption WHERE question_id = %(qid)s]\n[parameters: {'qid': '0db4348f-3b9f-57db-a64b-85ce4944b8fc'}]\n(Background on this error at: https://sqlalche.me/e/20/2j85)", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the question \"q-short\" has no \"answer_kind\" and no \"AnswerOption\" rows", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:193", "exception_class": "AssertionError", "exception_message": "Failed to verify rows in AnswerOption: (psycopg2.errors.InFailedSqlTransaction) current transaction is aborted, commands ignored until end of transaction block\n\n[SQL: SELECT COUNT(*) FROM AnswerOption WHERE question_id = %(qid)s]\n[parameters: {'qid': '0db4348f-3b9f-57db-a64b-85ce4944b8fc'}]\n(Background on this error at: https://sqlalche.me/e/20/2j85)", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 87c9fd57-c099-400c-9c03-fec29665be8e", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 87c9fd57-c099-400c-9c03-fec29665be8e", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:132", "exception_class": "ValidationError", "exception_message": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['options']['items']['properties']['placeholder_id']:\n    {'type': 'string', 'format': 'uuid'}\n\nOn instance['options'][1]['placeholder_id']:\n    None", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got cf7c478a-9dbc-427d-8543-e8330fde8f16", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got cf7c478a-9dbc-427d-8543-e8330fde8f16", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_visible, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_visible, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_I_conditional_visibility.feature:102", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_I_conditional_visibility.feature:102", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 03713402-f178-491b-b89c-3d8a1c1bf0e1", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 03713402-f178-491b-b89c-3d8a1c1bf0e1", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 8988326e-2ee4-4ae0-a5a3-e40c01f449c0", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 8988326e-2ee4-4ae0-a5a3-e40c01f449c0", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got df15e93d-0edb-4485-b37c-623b7cee0e51", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got df15e93d-0edb-4485-b37c-623b7cee0e51", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got df15e93d-0edb-4485-b37c-623b7cee0e51", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got df15e93d-0edb-4485-b37c-623b7cee0e51", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 4", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 4", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 4", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 4", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "AssertionError", "exception_message": "Expected 3 at \\$.questions.length(), got 0", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "AssertionError", "exception_message": "Expected 3 at \\$.questions.length(), got 0", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got eeaaa208-fd10-4691-a7fa-87e021631048", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got eeaaa208-fd10-4691-a7fa-87e021631048", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:171", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:171", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got d46c6ac9-5de7-471e-b5f1-a71bde227616", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got d46c6ac9-5de7-471e-b5f1-a71bde227616", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:160", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:171", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:171", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:254", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 71d16835-d2e3-41b8-bdbc-5e57384e8683", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 71d16835-d2e3-41b8-bdbc-5e57384e8683", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 25fd9af7-6991-4b34-afc2-bef1b94aca46", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 25fd9af7-6991-4b34-afc2-bef1b94aca46", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 93588c1c-5f00-4d01-9c68-0b0e0284c8a6", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 93588c1c-5f00-4d01-9c68-0b0e0284c8a6", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 2d672414-ca53-4609-a72a-e06e0dad0bd5", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 2d672414-ca53-4609-a72a-e06e0dad0bd5", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:321", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 2322ef07-da22-4f23-bdf5-c62fa936eadc", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 2322ef07-da22-4f23-bdf5-c62fa936eadc", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got b9806e75-f6a9-4958-882e-0e5c2ad8e1d9", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got b9806e75-f6a9-4958-882e-0e5c2ad8e1d9", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 3743d7a9-087c-4b18-9534-6b76669d26a9", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 3743d7a9-087c-4b18-9534-6b76669d26a9", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 39fe37c0-229c-4226-b0f6-1d0299302e2f", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 39fe37c0-229c-4226-b0f6-1d0299302e2f", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got cab2eeff-e32e-4f6d-97dc-d0ae9a6e816b", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got cab2eeff-e32e-4f6d-97dc-d0ae9a6e816b", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 0302c93c-0f0a-4a8f-94a8-26832af5d864", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 0302c93c-0f0a-4a8f-94a8-26832af5d864", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:19", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 5202d33a-b81c-4a35-a1a6-14738ff71e38", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 5202d33a-b81c-4a35-a1a6-14738ff71e38", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got None", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got None", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:177", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:184", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:201", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following screens exist for questionnaire \"11111111-1111-1111-1111-111111111111\":", "location": "tests/integration/features/questionnaire_integration.feature:12", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.ForeignKeyViolation) insert or update on table \"screens\" violates foreign key constraint \"screens_questionnaire_id_fkey\"\nDETAIL:  Key (questionnaire_id)=(11111111-1111-1111-1111-111111111111) is not present in table \"questionnaires\".\n\n[SQL: INSERT INTO screens (screen_id, questionnaire_id, screen_key, title) VALUES (%(sid)s, %(qid)s, %(key)s, %(title)s) ON CONFLICT (screen_id) DO UPDATE SET screen_key=EXCLUDED.screen_key, title=EXCLUDED.title]\n[parameters: {'sid': '22222222-2222-2222-2222-222222222222', 'qid': '11111111-1111-1111-1111-111111111111', 'key': 'company', 'title': 'Company Info'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got f959ac5d-bfd3-47ed-a3b5-76aa51187ee0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got f959ac5d-bfd3-47ed-a3b5-76aa51187ee0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 1e2afcda-75b1-446f-a479-2e3d9db5bafe", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 1e2afcda-75b1-446f-a479-2e3d9db5bafe", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3f4442e5-bd2e-4c2b-9558-f5a2da3cad25", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3f4442e5-bd2e-4c2b-9558-f5a2da3cad25", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 2bd902a5-a825-4abd-8bfd-b89d4922917a", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 2bd902a5-a825-4abd-8bfd-b89d4922917a", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 97f5d6f3-8097-4d30-b6d2-757f7ae14fd6", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 97f5d6f3-8097-4d30-b6d2-757f7ae14fd6", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 7ea51437-f5ed-4f8a-b89e-e5ba8c9eee78", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 7ea51437-f5ed-4f8a-b89e-e5ba8c9eee78", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got aedf22d2-35de-4cc3-9c3b-c1836a7ebf40", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got aedf22d2-35de-4cc3-9c3b-c1836a7ebf40", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "I repeat the previous POST with the exact same body and headers", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "No prior POST available for exact replay", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "I repeat the previous POST with the exact same body and headers", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "No prior POST available for exact replay", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got a229bbab-9c5e-49f0-ab48-2bc9e73c937d", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got a229bbab-9c5e-49f0-ab48-2bc9e73c937d", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "I repeat the previous POST with the exact same body and headers", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "No prior POST available for exact replay", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "I repeat the previous POST with the exact same body and headers", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:63", "exception_class": "AssertionError", "exception_message": "No prior POST available for exact replay", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 72bf9741-98c8-450b-96b9-6b7cef1d8332", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 72bf9741-98c8-450b-96b9-6b7cef1d8332", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 565c06d4-4cba-4d78-8247-b3c1a36f907a", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 565c06d4-4cba-4d78-8247-b3c1a36f907a", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 759af491-ad11-4ac4-bf8f-9a3bf3fc3d0d", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 759af491-ad11-4ac4-bf8f-9a3bf3fc3d0d", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 924507e1-0870-4c4f-85f5-ce3e2dabd600", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 924507e1-0870-4c4f-85f5-ce3e2dabd600", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 59839c91-71f3-422f-9c86-316c99500194", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 59839c91-71f3-422f-9c86-316c99500194", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v1\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:35", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/b8bd0cca-999b-4915-b32a-d0e611abc092", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v1\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:35", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/b8bd0cca-999b-4915-b32a-d0e611abc092", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v3\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:71", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/ef075d6e-a660-40a5-9951-a21e8f41f392", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v3\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:71", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/ef075d6e-a660-40a5-9951-a21e8f41f392", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:93", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/70374a32-9477-4615-9f8d-7fa8b46ccba7", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:93", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/70374a32-9477-4615-9f8d-7fa8b46ccba7", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v4\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:110", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/626107da-e593-4fa5-83c5-dd051080c079", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v4\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:110", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/626107da-e593-4fa5-83c5-dd051080c079", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v5\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:133", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/35fc199e-54a3-41e6-84c5-f593acfe5f46", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v5\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:133", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/35fc199e-54a3-41e6-84c5-f593acfe5f46", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v6\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:147", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/557becfc-94c0-4f29-a742-c879b1606457", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v6\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:147", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/557becfc-94c0-4f29-a742-c879b1606457", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:20", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:20", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 693e12a3-1456-4e82-881e-bd103429a287", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 693e12a3-1456-4e82-881e-bd103429a287", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 1c798f1f-2e4c-4802-ab70-ad5034e92e5e", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 1c798f1f-2e4c-4802-ab70-ad5034e92e5e", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 4f79810c-3446-4ec8-a695-18db5da510b6", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 4f79810c-3446-4ec8-a695-18db5da510b6", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 4", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 4", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got None", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got None", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:255", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:255", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 2", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 2", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got c5bc6de0-ea93-4d46-9fb4-f030d08b35b2", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got c5bc6de0-ea93-4d46-9fb4-f030d08b35b2", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 0425a233-7b06-4143-afc2-2e9d780fd3cb", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 0425a233-7b06-4143-afc2-2e9d780fd3cb", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 164a6784-08ec-4964-858d-6604ec5dec21", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 164a6784-08ec-4964-858d-6604ec5dec21", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 7fb786d8-6ec5-47fa-8d75-b00a357786c6", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 7fb786d8-6ec5-47fa-8d75-b00a357786c6", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got a8a8ed4e-9930-42b8-8c32-7d4efc5cf7e9", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got a8a8ed4e-9930-42b8-8c32-7d4efc5cf7e9", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 2", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 7074bed3-9240-4d62-b45c-8797ee33b319", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 7074bed3-9240-4d62-b45c-8797ee33b319", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got e6a1b53b-3a29-4c54-983a-5964c4593b26", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got e6a1b53b-3a29-4c54-983a-5964c4593b26", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 1869b4dd-a8a4-4ac2-b99e-088d1387a9ae", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 1869b4dd-a8a4-4ac2-b99e-088d1387a9ae", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 3461d834-aa53-4fd9-95f2-d4e8a9f298a3", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 3461d834-aa53-4fd9-95f2-d4e8a9f298a3", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 8c621201-d3d7-4d4c-aac6-757ab39a9f21", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 8c621201-d3d7-4d4c-aac6-757ab39a9f21", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got d420aefd-baa5-4f25-9194-e584b999a8a0", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got d420aefd-baa5-4f25-9194-e584b999a8a0", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 9b9d03bd-4907-4dff-914d-2eb163d08a97", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 9b9d03bd-4907-4dff-914d-2eb163d08a97", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got db9a1b3d-af7a-4c28-9978-a0b0d27f75f8", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got db9a1b3d-af7a-4c28-9978-a0b0d27f75f8", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got c48d4f37-aa33-562a-9dd2-2375269b1999", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got f36f31e6-0e8a-4e73-8e94-845e16a250ab", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got f36f31e6-0e8a-4e73-8e94-845e16a250ab", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 6d48af7c-804f-4498-88c0-0d8d68d5f658", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 6d48af7c-804f-4498-88c0-0d8d68d5f658", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 1812fa99-6f73-4ecf-83b2-c66ab33a0b44", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 1812fa99-6f73-4ecf-83b2-c66ab33a0b44", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 9cc580f1-6cf7-4226-939c-b36ba71fd037", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 9cc580f1-6cf7-4226-939c-b36ba71fd037", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 52b32ff7-5910-452f-a49d-70fa2f340a3b", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 52b32ff7-5910-452f-a49d-70fa2f340a3b", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got fc5d435a-d0ed-4720-9660-44d73cbbe46e", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got fc5d435a-d0ed-4720-9660-44d73cbbe46e", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 291df3b0-a5df-4f3a-9dd0-b525bef30985", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 291df3b0-a5df-4f3a-9dd0-b525bef30985", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got c6e03624-a881-4d71-8bb1-77682739d51b", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got c6e03624-a881-4d71-8bb1-77682739d51b", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got c06f669b-bd21-4f1f-9a71-3e4c2eec6b13", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got c06f669b-bd21-4f1f-9a71-3e4c2eec6b13", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 3111345f-7c91-5661-9590-4d46d7b079cd", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 276c27b4-67bf-4e18-8fd9-787bc3699c30", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 276c27b4-67bf-4e18-8fd9-787bc3699c30", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got f45bfa7c-6d1f-4ff5-96ce-fc556d7fd011", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got f45bfa7c-6d1f-4ff5-96ce-fc556d7fd011", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 38e9de5f-7846-47c4-a300-ca8fd6e4e80d", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "Expected the previously returned \"placeholder_id\" at placeholder_id, got 38e9de5f-7846-47c4-a300-ca8fd6e4e80d", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I have created a document \"D\" with title \"HR Policy – Leave\" and order_number 3 (version 1)", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "documents exist with IDs \"E\",\"F\",\"G\" and order 1,2,3 respectively", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:72", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "documents exist with orders: A→1, B→2, C→3, D→4", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:94", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "document \"J\" has uploaded DOCX content with checksum \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:104", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a document \"D\" exists", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:127", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:93", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9e027eca-0585-409c-b27b-9b05c12ce3f6", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:93", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9e027eca-0585-409c-b27b-9b05c12ce3f6", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:36", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PUT", "path": "/documents/08b8f53a-8057-4d2d-a1dd-98ddf1067dff/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:36", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "PUT", "path": "/documents/08b8f53a-8057-4d2d-a1dd-98ddf1067dff/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"fresh\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:108", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"fresh\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:108", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list\" should be an array of length 3", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected length 3, got 0", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "the response JSON at \"list\" should be an array of length 3", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:63", "exception_class": "AssertionError", "exception_message": "Expected length 3, got 0", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PUT", "path": "/documents/order", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PUT", "path": "/documents/order", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response status should be 204", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:96", "exception_class": "AssertionError", "exception_message": "Expected 204, got 404", "last_response": {"method": "DELETE", "path": "/documents/c351ddd8-31f4-4b7e-a7fa-3cce74732a7d", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response status should be 204", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:96", "exception_class": "AssertionError", "exception_message": "Expected 204, got 404", "last_response": {"method": "DELETE", "path": "/documents/c351ddd8-31f4-4b7e-a7fa-3cce74732a7d", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "Expected False at \\$.ok, got True", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals false", "location": "tests/integration/features/questionnaire_integration.feature:165", "exception_class": "AssertionError", "exception_message": "Expected False at \\$.ok, got True", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ReadError", "exception_message": "[Errno 104] Connection reset by peer", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].transform_id\" should be \"enum_single_v1\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:161", "exception_class": "AssertionError", "exception_message": "path not found: $.items[0].transform_id", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET reflects updated visibility immediately after PATCH", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET reflects updated visibility immediately after PATCH", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:88", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/b99c8da1-45d7-4d71-986a-8fa41b17babe", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET reflects updated visibility immediately after PATCH", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET reflects updated visibility immediately after PATCH", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:88", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/b99c8da1-45d7-4d71-986a-8fa41b17babe", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "another client updated the screen so the current ETag is different from \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:94", "exception_class": "AssertionError", "exception_message": "Expected 200 from rotate ETag PATCH, got 404", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/3084f772-71b7-4519-b12c-ad83574abac1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "another client updated the screen so the current ETag is different from \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:94", "exception_class": "AssertionError", "exception_message": "Expected 200 from rotate ETag PATCH, got 404", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/3084f772-71b7-4519-b12c-ad83574abac1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v4\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:110", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/4f5e48d5-c1e6-4160-9445-15c3fd3de8e7", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v4\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:110", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/4f5e48d5-c1e6-4160-9445-15c3fd3de8e7", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v5\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:133", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cba54fad-a154-44be-959a-4392661c54d3", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v5\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:133", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cba54fad-a154-44be-959a-4392661c54d3", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v6\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:147", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d3021060-812d-4153-b4d0-333639fb370b", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v6\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:147", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d3021060-812d-4153-b4d0-333639fb370b", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET metadata for document \"D\" and capture the document ETag as \"W/\\\"doc-v1\\\"\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:30", "exception_class": "ReadError", "exception_message": "[Errno 104] Connection reset by peer", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET metadata for document \"D\" and capture the document ETag as \"W/\\\"doc-v1\\\"\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:30", "exception_class": "ReadError", "exception_message": "[Errno 104] Connection reset by peer", "last_response": {"method": "GET", "path": "/documents/names", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject non-DOCX content type on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject non-DOCX content type on upload", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject reorder with stale list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject reorder with stale list ETag", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update for unknown document", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update for unknown document", "step_name": "a clean database", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:6", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "a clean database", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:4", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_I_conditional_visibility.feature:102", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_I_conditional_visibility.feature:102", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "Expected '59830e92-110f-5c6b-8cae-3388c0141e97' in $.visibility_delta.now_hidden, got []", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "another client updated the screen so the current ETag is different from \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:94", "exception_class": "AssertionError", "exception_message": "Expected 200 from rotate ETag PATCH, got 404", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/caee891f-c66a-4cc1-8291-856027d299ea", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "another client updated the screen so the current ETag is different from \"stale_etag\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:94", "exception_class": "AssertionError", "exception_message": "Expected 200 from rotate ETag PATCH, got 404", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/caee891f-c66a-4cc1-8291-856027d299ea", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v5\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:133", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/bee5bdd4-7f8d-4e5c-a2b3-3e272e3980a8", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-main\" and store the \"ETag\" as \"etag_v5\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:133", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/bee5bdd4-7f8d-4e5c-a2b3-3e272e3980a8", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:20", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "the response status should be 201", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:20", "exception_class": "AssertionError", "exception_message": "Expected 201, got 409", "last_response": {"method": "POST", "path": "/documents", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PUT", "path": "/documents/order", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PUT", "path": "/documents/order", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET metadata for document \"D\" and capture the document ETag as \"W/\\\"doc-v1\\\"\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:30", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/documents/cb67983a-4cd5-431a-84ba-6c9ca8522911", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "I GET metadata for document \"D\" and capture the document ETag as \"W/\\\"doc-v1\\\"\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:30", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/documents/cb67983a-4cd5-431a-84ba-6c9ca8522911", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response status should be 204", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:96", "exception_class": "AssertionError", "exception_message": "Expected 204, got 404", "last_response": {"method": "DELETE", "path": "/documents/25266ea2-ee6a-4e28-b91b-4ba4369ef14c", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response status should be 204", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:96", "exception_class": "AssertionError", "exception_message": "Expected 204, got 404", "last_response": {"method": "DELETE", "path": "/documents/25266ea2-ee6a-4e28-b91b-4ba4369ef14c", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:106", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/5519c3ea-6a6f-4ddf-a102-de96a9e620c0/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:106", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/5519c3ea-6a6f-4ddf-a102-de96a9e620c0/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "a document exists with order_number 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:117", "exception_class": "AssertionError", "exception_message": "Seed POST failed: 409", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-if-match-normalized", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reorder documents atomically using list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reorder documents atomically using list ETag", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:86", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "PUT", "path": "/documents/order", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-if-match-normalized", "x-list-etag", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "AssertionError", "exception_message": "Expected 201/200, got 409", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response status should be 204", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:96", "exception_class": "AssertionError", "exception_message": "Expected 204, got 404", "last_response": {"method": "DELETE", "path": "/documents/f456db33-27e0-464a-8699-6ba0c009b9d6", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Delete a document and resequence remaining orders", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Delete a document and resequence remaining orders", "step_name": "the response status should be 204", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:96", "exception_class": "AssertionError", "exception_message": "Expected 204, got 404", "last_response": {"method": "DELETE", "path": "/documents/f456db33-27e0-464a-8699-6ba0c009b9d6", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected document ETag W/\"doc-v1\", got None", "last_response": {"method": "GET", "path": "/documents/cfac3d71-741d-4a17-949f-006ff1b4ef7a", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected document ETag W/\"doc-v1\", got None", "last_response": {"method": "GET", "path": "/documents/cfac3d71-741d-4a17-949f-006ff1b4ef7a", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:106", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/00f2ad11-7da0-48e8-b154-6d0beacd9203/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Download current DOCX content", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Download current DOCX content", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:106", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/documents/00f2ad11-7da0-48e8-b154-6d0beacd9203/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:122", "exception_class": "AssertionError", "exception_message": "Expected 409, got 201", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject duplicate order_number on create", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject duplicate order_number on create", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:122", "exception_class": "AssertionError", "exception_message": "Expected 409, got 201", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:141", "exception_class": "AssertionError", "exception_message": "Expected 428, got 404", "last_response": {"method": "PUT", "path": "/documents/3326a86a-dbc8-447f-96b7-b778c948a71a/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "the response status should be 428", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:141", "exception_class": "AssertionError", "exception_message": "Expected 428, got 404", "last_response": {"method": "PUT", "path": "/documents/3326a86a-dbc8-447f-96b7-b778c948a71a/content", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected document ETag W/\"doc-v1\", got None", "last_response": {"method": "GET", "path": "/documents/25920db4-7027-4580-97d3-df8f16ee9a65", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject structurally invalid DOCX on upload", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject structurally invalid DOCX on upload", "step_name": "a document \"D\" exists with version 1 and ETag W/\"doc-v1\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:162", "exception_class": "AssertionError", "exception_message": "Expected document ETag W/\"doc-v1\", got None", "last_response": {"method": "GET", "path": "/documents/25920db4-7027-4580-97d3-df8f16ee9a65", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "\"q-short\" currently has exactly one bound placeholder", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:185", "exception_class": "AssertionError", "exception_message": "Expected exactly 1 placeholder, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:255", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "the response status should be 409", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:255", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 2", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "Expected 1 at \\$.created, got 2", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the database should not create or update any row in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333332\")", "location": "tests/integration/features/questionnaire_integration.feature:132", "exception_class": "AssertionError", "exception_message": "Expected no response row created/updated", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the database should not create or update any row in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333332\")", "location": "tests/integration/features/questionnaire_integration.feature:132", "exception_class": "AssertionError", "exception_message": "Expected no response row created/updated", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "a clean database", "location": "tests/integration/features/questionnaire_integration.feature:8", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 96ea14e6-5619-55e9-acec-2ee6b5b9fa26", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 96ea14e6-5619-55e9-acec-2ee6b5b9fa26", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 96ea14e6-5619-55e9-acec-2ee6b5b9fa26", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "the response JSON at \"items[0].payload_json.options[1].placeholder_id\" should equal the newly bound child \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:162", "exception_class": "AssertionError", "exception_message": "Expected the newly bound child \"placeholder_id\" at items[0].payload_json.options[1].placeholder_id, got 96ea14e6-5619-55e9-acec-2ee6b5b9fa26", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 412", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 412, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:322", "exception_class": "AssertionError", "exception_message": "Expected 422, got 200", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response JSON at \"options[0].value\" should be \"INTRANET\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:111", "exception_class": "AssertionError", "exception_message": "Expected 'INTRANET' at $.options[0].value, got 'DETAILS'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:72", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/a8d92515-594a-4571-adfe-0abc3bf8f61e", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:72", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/a8d92515-594a-4571-adfe-0abc3bf8f61e", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:95", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/4b698380-032d-42bb-bd0f-d894b179c423", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:95", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/4b698380-032d-42bb-bd0f-d894b179c423", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:111", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/22d0d21d-80d2-49f8-9907-00cd2d8e5cf1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:111", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/22d0d21d-80d2-49f8-9907-00cd2d8e5cf1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-does-not-exist\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:126", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "I GET \"/response-sets/rs-001/screens/s-does-not-exist\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:126", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I PATCH \"/response-sets/rs-001/answers/q-missing\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:134", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/57e4aa12-e61b-478d-b51e-afbed7948dc3", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I PATCH \"/response-sets/rs-001/answers/q-missing\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:134", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/57e4aa12-e61b-478d-b51e-afbed7948dc3", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:148", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/5077edf1-c000-49b2-9b99-e17c005a2dc1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:148", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/5077edf1-c000-49b2-9b99-e17c005a2dc1", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/425a1f5b-726f-4eab-8d49-d7954e46eaca/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/425a1f5b-726f-4eab-8d49-d7954e46eaca/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/29980ae4-eeb5-4b42-be5b-18b75a0d714b/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/29980ae4-eeb5-4b42-be5b-18b75a0d714b/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/d53ffebb-5b80-457b-889f-9370ce0bad15/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/d53ffebb-5b80-457b-889f-9370ce0bad15/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/9321bb0a-4f3e-4ed3-8f79-d34c0aacefdc/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "PUT", "path": "/documents/9321bb0a-4f3e-4ed3-8f79-d34c0aacefdc/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:30", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:30", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I have a valid TransformSuggestion for \"[CONTACT NAME]\" with answer_kind \"short_string\" and probe for doc-001/1.2", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:39", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I have a valid TransformSuggestion for \"[CONTACT NAME]\" with answer_kind \"short_string\" and probe for doc-001/1.2", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:39", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:76", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:76", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:82", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:82", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:109", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:109", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:119", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:119", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I have a TransformSuggestion for child placeholder \"[DETAILS]\" with answer_kind \"short_string\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:142", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I have a TransformSuggestion for child placeholder \"[DETAILS]\" with answer_kind \"short_string\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:142", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:167", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:186", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:186", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:210", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:210", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:219", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Preview canonicalisation for a literal list (no persistence)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Preview canonicalisation for a literal list (no persistence)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:219", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/preview", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:235", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest returns 422 for unrecognised pattern", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest returns 422 for unrecognised pattern", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:235", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:241", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:241", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:260", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:260", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response body is problem+json with \"title\" containing \"question not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:294", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 404 when question does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 404 when question does not exist", "step_name": "the response body is problem+json with \"title\" containing \"question not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:294", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/placeholders/bind", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:298", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:298", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:308", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:308", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:332", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.1 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.1 ", "step_name": "the response body should be problem+json with \"title\" containing \"not found\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:332", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-zzz/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Purge handles unknown document per contract -- @1.2 ", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Purge handles unknown document per contract -- @1.2 ", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:331", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-noop/bindings:purge", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:41", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:41", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:104", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:104", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: [Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "FileNotFoundError", "exception_message": "[Errno 2] No such file or directory: 'schemas/BindResult.json'", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:40", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a21d0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:40", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a21d0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response JSON at \"placeholder_id\" should equal the previously returned \"placeholder_id\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:65", "exception_class": "AssertionError", "exception_message": "path not found: $.placeholder_id", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:82", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47ba4d0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind boolean placeholder leaves no options and sets model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind boolean placeholder leaves no options and sets model", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:82", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47ba4d0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:119", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a2cb0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind enum_single parent with nested placeholder option defers linkage", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind enum_single parent with nested placeholder option defers linkage", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:119", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a2cb0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:143", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47ba050>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:143", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47ba050>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "List placeholders for a question filtered by document", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::List placeholders for a question filtered by document", "step_name": "the response JSON at \"items\" should contain at least 1 element", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:168", "exception_class": "AssertionError", "exception_message": "Expected at least 1 element at $.items, got 0", "last_response": {"method": "GET", "path": "/api/v1/questions/96ae04bf-8c0c-5022-a76c-27c7f4249f1d/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('ok' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/BindResult.schema.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'$ref': 'https://b13.ai/schemas/QuestionId.schema.json'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://b13.ai/schemas/OptionSpec.schema.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag']}\n\nOn instance:\n    {'ok': True,\n     'question_id': '0db4348f-3b9f-57db-a64b-85ce4944b8fc',\n     'etag': 'W/\"doc-v1\"'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('ok' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/BindResult.schema.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'$ref': 'https://b13.ai/schemas/QuestionId.schema.json'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://b13.ai/schemas/OptionSpec.schema.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag']}\n\nOn instance:\n    {'ok': True,\n     'question_id': '0db4348f-3b9f-57db-a64b-85ce4944b8fc',\n     'etag': 'W/\"doc-v1\"'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Cleanup bindings when a document is deleted (purge)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Cleanup bindings when a document is deleted (purge)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:202", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/api/v1/documents/doc-001/bindings:purge", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:241", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a1cc0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 409 when model would change", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 409 when model would change", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:241", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a1cc0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:260", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a10c0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 412 when If-Match precondition fails", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 412 when If-Match precondition fails", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:260", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47a10c0>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:308", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47c1540>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind rejected with 422 when transform not applicable to text", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind rejected with 422 when transform not applicable to text", "step_name": "I POST \"/api/v1/placeholders/bind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:308", "exception_class": "_RefResolutionError", "exception_message": "HTTPSConnectionPool(host='schemas.schofield.local', port=443): Max retries exceeded with url: /epic-d/PlaceholderProbe.json (Caused by NameResolutionError(\"<urllib3.connection.HTTPSConnection object at 0x7fedf47c1540>: Failed to resolve 'schemas.schofield.local' ([Errno -3] Temporary failure in name resolution)\"))", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '33e49f0b-1cd6-5201-9c84-175354e30b55',\n     'etag': 'etag-n-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '33e49f0b-1cd6-5201-9c84-175354e30b55',\n     'etag': 'etag-n-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '0db4348f-3b9f-57db-a64b-85ce4944b8fc',\n     'etag': 'etag-s-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '0db4348f-3b9f-57db-a64b-85ce4944b8fc',\n     'etag': 'etag-s-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '33e49f0b-1cd6-5201-9c84-175354e30b55',\n     'etag': 'etag-n-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:178", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '33e49f0b-1cd6-5201-9c84-175354e30b55',\n     'etag': 'etag-n-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '0db4348f-3b9f-57db-a64b-85ce4944b8fc',\n     'etag': 'etag-s-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:191", "exception_class": "ValidationError", "exception_message": "'bound' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/BindResult.json',\n     'title': 'BindResult',\n     'type': 'object',\n     'properties': {'bound': {'type': 'boolean'},\n                    'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}},\n                    'etag': {'type': 'string'}},\n     'required': ['bound',\n                  'question_id',\n                  'placeholder_id',\n                  'answer_kind',\n                  'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'ok': True,\n     'question_id': '0db4348f-3b9f-57db-a64b-85ce4944b8fc',\n     'etag': 'etag-s-1'}", "last_response": {"method": "POST", "path": "/api/v1/placeholders/unbind", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/7f40ef04-1e7d-4b3b-a625-04f6aa14aa1c/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/7f40ef04-1e7d-4b3b-a625-04f6aa14aa1c/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/02f4291c-90f0-4e0e-9aa5-ad58e5814ee1/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/02f4291c-90f0-4e0e-9aa5-ad58e5814ee1/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/b76c6fdc-f6b6-43dd-b378-3a1f5679959a/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/b76c6fdc-f6b6-43dd-b378-3a1f5679959a/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/ec49e3e9-2e37-47e7-99ea-e8f7ac3c3316/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/ec49e3e9-2e37-47e7-99ea-e8f7ac3c3316/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:30", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 40, 'end': 54},\n               'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:30", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 40, 'end': 54},\n               'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I have a valid TransformSuggestion for \"[CONTACT NAME]\" with answer_kind \"short_string\" and probe for doc-001/1.2", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:39", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 0, 'end': 14},\n               'probe_hash': 'ec6c76472b0fcb253341d23060ebc95c57d70dbc'}}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I have a valid TransformSuggestion for \"[CONTACT NAME]\" with answer_kind \"short_string\" and probe for doc-001/1.2", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:39", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 0, 'end': 14},\n               'probe_hash': 'ec6c76472b0fcb253341d23060ebc95c57d70dbc'}}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 40, 'end': 54},\n               'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 40, 'end': 54},\n               'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'boolean_v1',\n     'name': 'Boolean include',\n     'answer_kind': 'boolean',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 60, 'end': 81},\n               'probe_hash': '88a727d75723a6dc284cff9b6983721fb73a74bd'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'boolean_v1',\n     'name': 'Boolean include',\n     'answer_kind': 'boolean',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 60, 'end': 81},\n               'probe_hash': '88a727d75723a6dc284cff9b6983721fb73a74bd'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:109", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'enum_single_v1',\n     'name': 'Single choice',\n     'answer_kind': 'enum_single',\n     'options': [{'value': 'INTRANET', 'label': 'on the intranet'},\n                 {'value': 'DETAILS', 'placeholder_key': 'DETAILS'}],\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 90, 'end': 118},\n               'probe_hash': 'a334851022d297e7a2065e241cecc5343536a8f9'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:109", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'enum_single_v1',\n     'name': 'Single choice',\n     'answer_kind': 'enum_single',\n     'options': [{'value': 'INTRANET', 'label': 'on the intranet'},\n                 {'value': 'DETAILS', 'placeholder_key': 'DETAILS'}],\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 90, 'end': 118},\n               'probe_hash': 'a334851022d297e7a2065e241cecc5343536a8f9'}}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I have a TransformSuggestion for child placeholder \"[DETAILS]\" with answer_kind \"short_string\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:142", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 0, 'end': 9},\n               'probe_hash': '6d287e6bac6d8c5587ef24bff223544a37f2fa90'}}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I have a TransformSuggestion for child placeholder \"[DETAILS]\" with answer_kind \"short_string\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:142", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('probe' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://b13.ai/schemas/TransformSuggestion.schema.json',\n     'title': 'TransformSuggestion',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'transform_id': {'type': 'string', 'minLength': 1},\n                    'name': {'type': 'string', 'minLength': 1},\n                    'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'schemas/OptionSpec.json'}},\n                    'companion': {'$ref': 'https://b13.ai/schemas/CompanionHint.schema.json'},\n                    'confidence': {'type': 'number',\n                                   'minimum': 0,\n                                   'maximum': 1},\n                    'rationale': {'type': 'string'}},\n     'required': ['transform_id', 'name', 'answer_kind']}\n\nOn instance:\n    {'transform_id': 'short_string_v1',\n     'name': 'Short string',\n     'answer_kind': 'short_string',\n     'probe': {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n               'clause_path': '1.2',\n               'resolved_span': {'start': 0, 'end': 9},\n               'probe_hash': '6d287e6bac6d8c5587ef24bff223544a37f2fa90'}}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:186", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '18b148ba-d5a4-5c0e-a352-8cc5276e92e3'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:186", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '18b148ba-d5a4-5c0e-a352-8cc5276e92e3'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:210", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('supports_options' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/TransformsCatalogItem.json',\n     'title': 'TransformsCatalogItem',\n     'type': 'object',\n     'properties': {'transform_id': {'type': 'string'},\n                    'name': {'type': 'string'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}}},\n     'required': ['transform_id', 'name', 'answer_kind'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'transform_id': 'boolean_v1',\n     'name': 'Boolean include',\n     'answer_kind': 'boolean',\n     'supports_options': False}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:210", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('supports_options' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/TransformsCatalogItem.json',\n     'title': 'TransformsCatalogItem',\n     'type': 'object',\n     'properties': {'transform_id': {'type': 'string'},\n                    'name': {'type': 'string'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}}},\n     'required': ['transform_id', 'name', 'answer_kind'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'transform_id': 'boolean_v1',\n     'name': 'Boolean include',\n     'answer_kind': 'boolean',\n     'supports_options': False}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:298", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '6ba7b028-e09a-518c-b745-aa90e724617e'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:298", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '6ba7b028-e09a-518c-b745-aa90e724617e'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/3a8759d7-3469-4906-9967-7c218c00c00a/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/3a8759d7-3469-4906-9967-7c218c00c00a/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/7074afd6-74e7-476f-922c-b8ece64ef131/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/7074afd6-74e7-476f-922c-b8ece64ef131/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/48e61017-173f-44b6-a5c4-e897f4e85811/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/48e61017-173f-44b6-a5c4-e897f4e85811/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/3b441f8e-e656-4a62-ba9e-69d7c6540045/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/3b441f8e-e656-4a62-ba9e-69d7c6540045/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:30", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 40, 'end': 54},\n     'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for a short text placeholder", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for a short text placeholder", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:30", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 40, 'end': 54},\n     'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I have a valid TransformSuggestion for \"[CONTACT NAME]\" with answer_kind \"short_string\" and probe for doc-001/1.2", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:39", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 0, 'end': 14},\n     'probe_hash': 'ec6c76472b0fcb253341d23060ebc95c57d70dbc'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind first short_string placeholder sets the question model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind first short_string placeholder sets the question model", "step_name": "I have a valid TransformSuggestion for \"[CONTACT NAME]\" with answer_kind \"short_string\" and probe for doc-001/1.2", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:39", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 0, 'end': 14},\n     'probe_hash': 'ec6c76472b0fcb253341d23060ebc95c57d70dbc'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 40, 'end': 54},\n     'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Idempotent bind replays safely with the same Idempotency-Key", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Idempotent bind replays safely with the same Idempotency-Key", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:64", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 40, 'end': 54},\n     'probe_hash': 'db17c7c5b5f6c8f98ac5ba44c3c0c6c46021063d'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:76", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 60, 'end': 81},\n     'probe_hash': '88a727d75723a6dc284cff9b6983721fb73a74bd'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for boolean inclusion", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for boolean inclusion", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:76", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 60, 'end': 81},\n     'probe_hash': '88a727d75723a6dc284cff9b6983721fb73a74bd'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:109", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 90, 'end': 118},\n     'probe_hash': 'a334851022d297e7a2065e241cecc5343536a8f9'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Suggest transform for literal OR nested placeholder (enum_single)", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Suggest transform for literal OR nested placeholder (enum_single)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:109", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 90, 'end': 118},\n     'probe_hash': 'a334851022d297e7a2065e241cecc5343536a8f9'}", "last_response": {"method": "POST", "path": "/api/v1/transforms/suggest", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I have a TransformSuggestion for child placeholder \"[DETAILS]\" with answer_kind \"short_string\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:142", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 0, 'end': 9},\n     'probe_hash': '6d287e6bac6d8c5587ef24bff223544a37f2fa90'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Bind the child short_string placeholder and auto-link the parent option", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Bind the child short_string placeholder and auto-link the parent option", "step_name": "I have a TransformSuggestion for child placeholder \"[DETAILS]\" with answer_kind \"short_string\"", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:142", "exception_class": "ValidationError", "exception_message": "'raw_text' is a required property\n\nFailed validating 'required' in schema['properties']['probe']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/PlaceholderProbe.json',\n     'title': 'PlaceholderProbe',\n     'type': 'object',\n     'properties': {'raw_text': {'type': 'string'},\n                    'context': {'$ref': 'https://schemas.schofield.local/epic-d/PlaceholderProbeContext.json'}},\n     'required': ['raw_text', 'context'],\n     'additionalProperties': False}\n\nOn instance['probe']:\n    {'document_id': 'bec648b7-5b25-583c-9bbb-0f241a42ad1f',\n     'clause_path': '1.2',\n     'resolved_span': {'start': 0, 'end': 9},\n     'probe_hash': '6d287e6bac6d8c5587ef24bff223544a37f2fa90'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind a child placeholder does not alter parent model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind a child placeholder does not alter parent model", "step_name": "I have the child \"placeholder_id\" from the bind-nested-child scenario", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:172", "exception_class": "AssertionError", "exception_message": "Expected child placeholder_id captured from previous scenario", "last_response": {"method": "GET", "path": "/api/v1/questions/33e49f0b-1cd6-5201-9c84-175354e30b55/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:186", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '18b148ba-d5a4-5c0e-a352-8cc5276e92e3'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind the last placeholder clears the question’s model", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind the last placeholder clears the question’s model", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:186", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '18b148ba-d5a4-5c0e-a352-8cc5276e92e3'}", "last_response": {"method": "GET", "path": "/api/v1/questions/0db4348f-3b9f-57db-a64b-85ce4944b8fc/placeholders?document_id=bec648b7-5b25-583c-9bbb-0f241a42ad1f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:210", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('supports_options' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/TransformsCatalogItem.json',\n     'title': 'TransformsCatalogItem',\n     'type': 'object',\n     'properties': {'transform_id': {'type': 'string'},\n                    'name': {'type': 'string'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}}},\n     'required': ['transform_id', 'name', 'answer_kind'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'transform_id': 'boolean_v1',\n     'name': 'Boolean include',\n     'answer_kind': 'boolean',\n     'supports_options': False}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Read the transforms catalog", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Read the transforms catalog", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:210", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('supports_options' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['items']['items']:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/TransformsCatalogItem.json',\n     'title': 'TransformsCatalogItem',\n     'type': 'object',\n     'properties': {'transform_id': {'type': 'string'},\n                    'name': {'type': 'string'},\n                    'answer_kind': {'$ref': 'https://schemas.schofield.local/epic-d/AnswerKind.json'},\n                    'options': {'type': 'array',\n                                'items': {'$ref': 'https://schemas.schofield.local/epic-d/OptionSpec.json'}}},\n     'required': ['transform_id', 'name', 'answer_kind'],\n     'additionalProperties': False}\n\nOn instance['items'][0]:\n    {'transform_id': 'boolean_v1',\n     'name': 'Boolean include',\n     'answer_kind': 'boolean',\n     'supports_options': False}", "last_response": {"method": "GET", "path": "/api/v1/transforms/catalog", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:298", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '6ba7b028-e09a-518c-b745-aa90e724617e'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic D – Placeholders, Bindings and Transforms", "scenario": "Unbind rejected with 404 when placeholder does not exist", "test_id": "feature::Epic D – Placeholders, Bindings and Transforms::scenario::Unbind rejected with 404 when placeholder does not exist", "step_name": "I POST \"/api/v1/placeholders/unbind\" with JSON:", "location": "tests/integration/features/epic_d_bindings_and_transforms.feature:298", "exception_class": "ValidationError", "exception_message": "'question_id' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://schemas.schofield.local/epic-d/UnbindRequest.json',\n     'title': 'UnbindRequest',\n     'type': 'object',\n     'properties': {'question_id': {'type': 'string', 'format': 'uuid'},\n                    'placeholder_id': {'type': 'string', 'format': 'uuid'},\n                    'probe': {'$ref': 'https://schemas.schofield.local/epic-d/ProbeReceipt.json'}},\n     'required': ['question_id', 'placeholder_id'],\n     'additionalProperties': False}\n\nOn instance:\n    {'placeholder_id': '6ba7b028-e09a-518c-b745-aa90e724617e'}", "last_response": {"method": "POST", "path": "/__test__/reset-state", "status": 204, "headers_keys": ["date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/7247dcb5-757b-406c-bbed-069ea4f0ec39/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/7247dcb5-757b-406c-bbed-069ea4f0ec39/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/de7a60d5-c889-4b4b-97ed-e23ba4611ead/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/de7a60d5-c889-4b4b-97ed-e23ba4611ead/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/c5ec31aa-f04d-4ac6-90c2-f9e74f78d21f/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/c5ec31aa-f04d-4ac6-90c2-f9e74f78d21f/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/888fd991-d4f9-46c6-878c-4aad8de6fcd0/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/888fd991-d4f9-46c6-878c-4aad8de6fcd0/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/59a90aa7-9c99-41d1-ba46-54935cd07c18/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/59a90aa7-9c99-41d1-ba46-54935cd07c18/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/9a836ca6-9741-4742-8b70-f33b687b7f9b/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/9a836ca6-9741-4742-8b70-f33b687b7f9b/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/6403e913-8182-4b15-b768-3ba56a407f84/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/6403e913-8182-4b15-b768-3ba56a407f84/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/ca0fc5ea-f437-457d-8272-6d943279a2c7/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/ca0fc5ea-f437-457d-8272-6d943279a2c7/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/e8f36d16-b63b-481d-943b-5cff700c6430/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/e8f36d16-b63b-481d-943b-5cff700c6430/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/178cb5a0-851d-44a1-b0ee-65a47b1f17a3/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/178cb5a0-851d-44a1-b0ee-65a47b1f17a3/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/9e081226-d1dc-49da-a2b5-afd827061fc8/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/9e081226-d1dc-49da-a2b5-afd827061fc8/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/bb9eeffd-2036-48e8-be93-96e5e9ec8569/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/bb9eeffd-2036-48e8-be93-96e5e9ec8569/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/9a098477-123a-4042-90bc-45480b184c2a/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/9a098477-123a-4042-90bc-45480b184c2a/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/83e49553-b42a-4a53-92fa-0c2154161c82/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/83e49553-b42a-4a53-92fa-0c2154161c82/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/13165619-f843-4157-acc2-4c1f5c016f24/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/13165619-f843-4157-acc2-4c1f5c016f24/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/c56b1bbd-e8aa-42ae-ad19-dd948ff45cad/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/c56b1bbd-e8aa-42ae-ad19-dd948ff45cad/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/a4131d07-be2f-4867-b5e9-d6da9399e70b/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/a4131d07-be2f-4867-b5e9-d6da9399e70b/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/58855e44-2eb7-47a0-94d5-479f85319b33/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/58855e44-2eb7-47a0-94d5-479f85319b33/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/96a71af5-8afb-4a5c-a71c-c82c11e263e6/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/96a71af5-8afb-4a5c-a71c-c82c11e263e6/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/4e16dfed-1bc2-4320-b0d8-d98a51c13cd8/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/4e16dfed-1bc2-4320-b0d8-d98a51c13cd8/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/ef4727e4-5c30-4c83-b783-93346c26e451/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/ef4727e4-5c30-4c83-b783-93346c26e451/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/961ebec2-203d-434c-bd0d-5c0acd374b74/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/961ebec2-203d-434c-bd0d-5c0acd374b74/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/0ec32251-e0a0-43a5-a7af-3d8be97f5168/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/0ec32251-e0a0-43a5-a7af-3d8be97f5168/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/c76d3737-c894-4bc5-8df8-6ba5814e54d2/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/c76d3737-c894-4bc5-8df8-6ba5814e54d2/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/22978cfd-1d0b-4ade-863d-0dfda117024c/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/22978cfd-1d0b-4ade-863d-0dfda117024c/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/12120d9f-0aa8-45c0-a19e-1ddc71cc24b9/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/12120d9f-0aa8-45c0-a19e-1ddc71cc24b9/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/455d5176-6a34-425b-8c7e-c73eb1efa331/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/455d5176-6a34-425b-8c7e-c73eb1efa331/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/bb1bcaac-54dd-49d8-b4e0-1d764697d2fe/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/bb1bcaac-54dd-49d8-b4e0-1d764697d2fe/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Create a document with initial metadata", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Create a document with initial metadata", "step_name": "I POST \"/documents\" with JSON:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:16", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "POST", "path": "/documents", "status": 201, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/42e41289-8546-41ab-94bd-2add3a0c6ae2/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Upload DOCX content and increment version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Upload DOCX content and increment version", "step_name": "body is a valid DOCX file of 12345 bytes named \"policy-v2.docx\"", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:35", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/42e41289-8546-41ab-94bd-2add3a0c6ae2/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/4c7f4c7b-5eb5-43d4-8008-3687d1717e49/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Update title without changing order or version", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Update title without changing order or version", "step_name": "a document \"D\" exists with title \"Original Title\", order_number 5, version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:44", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/4c7f4c7b-5eb5-43d4-8008-3687d1717e49/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/90804677-a8dd-42bc-ab0a-9a975b203ad7/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "List document names in strict order with list ETag", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::List document names in strict order with list ETag", "step_name": "documents exist:", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:56", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/90804677-a8dd-42bc-ab0a-9a975b203ad7/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/fe23aea3-0525-4b1a-a81c-1993b2a09dfd/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic C — Document ingestion and parsing", "scenario": "Reject content update without If-Match header", "test_id": "feature::Epic C — Document ingestion and parsing::scenario::Reject content update without If-Match header", "step_name": "a document \"D\" exists with version 2", "location": "tests/integration/features/epic_c_document_ingestion_and_parsing.feature:136", "exception_class": "_RefResolutionError", "exception_message": "unknown url type: 'schemas/document_id.schema.json'", "last_response": {"method": "PUT", "path": "/documents/fe23aea3-0525-4b1a-a81c-1993b2a09dfd/content", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
