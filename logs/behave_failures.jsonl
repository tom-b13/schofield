{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": 42 }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": 42 }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": \"forty-two\" }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid JSON body: Invalid \\escape: line 1 column 12 (char 11)\n{ \"question\\_id\": \"33333333-3333-3333-3333-333333333332\", \"value\": \"forty-two\" }", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:27", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "I GET \"/questionnaires/11111111-1111-1111-1111-111111111111/export\"", "location": "tests/integration/features/questionnaire_integration.feature:91", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "I GET \"/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"", "location": "tests/integration/features/questionnaire_integration.feature:136", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "HTTP request attempted in TEST_MOCK_MODE; provide TEST_BASE_URL/TEST_DATABASE_URL for live runs or disable TEST_MOCK_MODE", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "OperationalError", "exception_message": "(sqlite3.OperationalError) no such table: questionnaires\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (?, ?, ?) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: ('11111111-1111-1111-1111-111111111111', 'ONB-2025', 'Onboarding 2025')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questionnaire exists in the database:", "location": "tests/integration/features/questionnaire_integration.feature:9", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedTable) relation \"questionnaires\" does not exist\nLINE 1: INSERT INTO questionnaires (questionnaire_id, name, descript...\n                    ^\n\n[SQL: INSERT INTO questionnaires (questionnaire_id, name, description) VALUES (%(id)s, %(name)s, %(desc)s) ON CONFLICT (questionnaire_id) DO UPDATE SET name=EXCLUDED.name, description=EXCLUDED.description]\n[parameters: {'id': '11111111-1111-1111-1111-111111111111', 'name': 'ONB-2025', 'desc': 'Onboarding 2025'}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"screen_key\" of relation \"questionnaire_question\" does not exist\nLINE 1: INSERT INTO questionnaire_question (question_id, screen_key,...\n                                                         ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "ProgrammingError", "exception_message": "(psycopg2.errors.UndefinedColumn) column \"question_order\" of relation \"questionnaire_question\" does not exist\nLINE 1: ..._question (question_id, screen_key, external_qid, question_o...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/f405)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the following questions exist and are bound to screen \"22222222-2222-2222-2222-222222222222\":", "location": "tests/integration/features/questionnaire_integration.feature:15", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"short\\_string\"\nLINE 1: ...', 'Q\\_CO\\_NAME', 1, 'What is the company name?', 'short\\_st...\n                                                             ^\n\n[SQL: INSERT INTO questionnaire_question (question_id, screen_key, external_qid, question_order, question_text, answer_type, mandatory) VALUES (%(qid)s, %(skey)s, %(ext)s, %(ord)s, %(qtext)s, %(atype)s, %(mand)s) ON CONFLICT (question_id) DO UPDATE SET external_qid=EXCLUDED.external_qid, question_order=EXCLUDED.question_order, question_text=EXCLUDED.question_text, answer_type=EXCLUDED.answer_type, mandatory=EXCLUDED.mandatory]\n[parameters: {'qid': '33333333-3333-3333-3333-333333333331', 'skey': 'company', 'ext': 'Q\\\\_CO\\\\_NAME', 'ord': 1, 'qtext': 'What is the company name?', 'atype': 'short\\\\_string', 'mand': True}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.294989+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.325813+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.444898+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.472581+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.498612+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.522963+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.545406+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.568189+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "an empty response set exists:", "location": "tests/integration/features/questionnaire_integration.feature:20", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.NotNullViolation) null value in column \"legal_name\" of relation \"company\" violates not-null constraint\nDETAIL:  Failing row contains (55555555-5555-5555-5555-555555555555, null, null, 2025-09-27 08:52:42.59282+00, null).\n\n[SQL: INSERT INTO company (company_id) VALUES (%(cid)s) ON CONFLICT (company_id) DO NOTHING]\n[parameters: {'cid': '55555555-5555-5555-5555-555555555555'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332', 'value': 42}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332', 'value': 42}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332',\n     'value': 'forty-two'}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:125", "exception_class": "AssertionError", "exception_message": "Invalid AnswerUpsert request body: Additional properties are not allowed ('question_id' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'question_id': '33333333-3333-3333-3333-333333333332',\n     'value': 'forty-two'}", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:148", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:148", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 404, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 404", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response header \"ETag\" should be a non-empty string", "location": "tests/integration/features/questionnaire_integration.feature:29", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response header \"ETag\" should be a non-empty string", "location": "tests/integration/features/questionnaire_integration.feature:29", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.created\" equals 1", "location": "tests/integration/features/questionnaire_integration.feature:83", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "subsequent rows are ordered by screen\\_key asc, question\\_order asc, then question\\_id asc", "location": "tests/integration/features/questionnaire_integration.feature:95", "exception_class": "AssertionError", "exception_message": "CSV must have header and at least one data row", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "subsequent rows are ordered by screen\\_key asc, question\\_order asc, then question\\_id asc", "location": "tests/integration/features/questionnaire_integration.feature:95", "exception_class": "AssertionError", "exception_message": "CSV must have header and at least one data row", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "None is not of type 'object'\n\nFailed validating 'type' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "AssertionError", "exception_message": "No JSON body", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["content-length", "content-type", "date", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 200", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 200, "headers_keys": ["content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Missing ETag on seed", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:82", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export questionnaire snapshot to CSV with deterministic ordering", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export questionnaire snapshot to CSV with deterministic ordering", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:92", "exception_class": "AssertionError", "exception_message": "Expected 200, got 500", "last_response": {"method": "GET", "path": "/questionnaires/11111111-1111-1111-1111-111111111111/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "GET questionnaire by unknown id returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::GET questionnaire by unknown id returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:137", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "the response code should be 404", "location": "tests/integration/features/questionnaire_integration.feature:157", "exception_class": "AssertionError", "exception_message": "Expected 404, got 500", "last_response": {"method": "GET", "path": "/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export", "status": 500, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server"], "has_json": false, "has_text": true}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.screen.screen\\_id\" equals \"22222222-2222-2222-2222-222222222222\"", "location": "tests/integration/features/questionnaire_integration.feature:30", "exception_class": "KeyError", "exception_message": "'screen'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "I POST \"/questionnaires/import\" with multipart file \"questions.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:76", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('deleted' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/ImportResult.schema.json',\n     'title': 'ImportResult',\n     'type': 'object',\n     'properties': {'created': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'created'},\n                    'updated': {'type': 'integer',\n                                'minimum': 0,\n                                'description': 'Count of questions '\n                                               'updated'},\n                    'errors': {'type': 'array',\n                               'description': 'Row-level errors from CSV '\n                                              'import',\n                               'items': {'type': 'object',\n                                         'properties': {'line': {'type': 'integer',\n                                                                 'minimum': 1},\n                                                        'message': {'type': 'string'},\n                                                        'code': {'type': 'string',\n                                                                 'description': 'Optional '\n                                                                                'machine-readable '\n                                                                                'error '\n                                                                                'code'}},\n                                         'required': ['line', 'message'],\n                                         'additionalProperties': False}}},\n     'required': ['created', 'updated', 'errors'],\n     'additionalProperties': False}\n\nOn instance:\n    {'created': 1, 'updated': 1, 'deleted': 0, 'errors': []}", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 422", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ValidationError", "exception_message": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['errors']['items']['properties']['line']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['errors'][0]['line']:\n    0", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "KeyError", "exception_message": "'question'", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.errors.length()\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:85", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the response JSON at \"\\$.errors.length()\" equals 0", "location": "tests/integration/features/questionnaire_integration.feature:85", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "the response JSON at \"\\$.errors.length()\" is greater than 0", "location": "tests/integration/features/questionnaire_integration.feature:149", "exception_class": "KeyError", "exception_message": "'error'", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import questionnaire updates from CSV (create + update, no errors)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import questionnaire updates from CSV (create + update, no errors)", "step_name": "the database table \"question\" should include a row where external\\_qid=\"Q\\_FAV\\_FRUIT\" and answer\\_kind=\"enum\\_single\"", "location": "tests/integration/features/questionnaire_integration.feature:86", "exception_class": "DataError", "exception_message": "(psycopg2.errors.InvalidTextRepresentation) invalid input value for enum answer_kind: \"enum\\_single\"\nLINE 1: ... external_qid = 'Q\\_FAV\\_FRUIT' AND answer_type = 'enum\\_sin...\n                                                             ^\n\n[SQL: SELECT COUNT(*) FROM questionnaire_question WHERE external_qid = %(ext)s AND answer_type = %(kind)s]\n[parameters: {'ext': 'Q\\\\_FAV\\\\_FRUIT', 'kind': 'enum\\\\_single'}]\n(Background on this error at: https://sqlalche.me/e/20/9h9h)", "last_response": {"method": "POST", "path": "/questionnaires/import", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ValidationError", "exception_message": "'reason' is a required property\n\nFailed validating 'required' in schema['properties']['blocking_items']['items']:\n    {'type': 'object',\n     'properties': {'question_id': {'$ref': 'https://example.com/schemas/QuestionId.schema.json'},\n                    'reason': {'type': 'string'}},\n     'required': ['question_id', 'reason'],\n     'additionalProperties': False}\n\nOn instance['blocking_items'][0]:\n    {'question_id': '33333333-3333-3333-3333-333333333332'}", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:72", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.blocking\\_items\" equals \\[]", "location": "tests/integration/features/questionnaire_integration.feature:177", "exception_class": "AssertionError", "exception_message": "Expected \\[] at \\$.blocking\\_items, got []", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "AssertionError", "exception_message": "Expected 3 at \\$.questions.length(), got 4", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response JSON at \"\\$.questions.length()\" equals 3", "location": "tests/integration/features/questionnaire_integration.feature:31", "exception_class": "AssertionError", "exception_message": "Expected 3 at \\$.questions.length(), got 4", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "no answers exist yet for response set \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:23", "exception_class": "AssertionError", "exception_message": "", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the following screens exist for questionnaire \"11111111-1111-1111-1111-111111111111\":", "location": "tests/integration/features/questionnaire_integration.feature:12", "exception_class": "IntegrityError", "exception_message": "(psycopg2.errors.ForeignKeyViolation) insert or update on table \"screens\" violates foreign key constraint \"screens_questionnaire_id_fkey\"\nDETAIL:  Key (questionnaire_id)=(11111111-1111-1111-1111-111111111111) is not present in table \"questionnaires\".\n\n[SQL: INSERT INTO screens (screen_id, questionnaire_id, screen_key, title) VALUES (%(sid)s, %(qid)s, %(key)s, %(title)s) ON CONFLICT (screen_id) DO UPDATE SET screen_key=EXCLUDED.screen_key, title=EXCLUDED.title]\n[parameters: {'sid': '22222222-2222-2222-2222-222222222222', 'qid': '11111111-1111-1111-1111-111111111111', 'key': 'company', 'title': 'Company Info'}]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:45", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the database table \"answer\" should have 0 rows for response\\_set\\_id \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:33", "exception_class": "AssertionError", "exception_message": "Expected 0 rows for response_set_id=44444444-4444-4444-4444-444444444444, got 1", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the database table \"answer\" should have 0 rows for response\\_set\\_id \"44444444-4444-4444-4444-444444444444\"", "location": "tests/integration/features/questionnaire_integration.feature:33", "exception_class": "AssertionError", "exception_message": "Expected 0 rows for response_set_id=44444444-4444-4444-4444-444444444444, got 1", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the response code should be 409", "location": "tests/integration/features/questionnaire_integration.feature:116", "exception_class": "AssertionError", "exception_message": "Expected 409, got 200", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:56", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:69", "exception_class": "AssertionError", "exception_message": "Expected 200 from JIT seed PATCH, got 500", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got None", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:71", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "the database value in \"answer\" for (response\\_set\\_id=\"44444444-4444-4444-4444-444444444444\", question\\_id=\"33333333-3333-3333-3333-333333333331\") should still equal \"TempCo\"", "location": "tests/integration/features/questionnaire_integration.feature:118", "exception_class": "AssertionError", "exception_message": "Expected value to remain TempCo, got Acme Ltd", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333331", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "the response JSON at \"\\$.ok\" equals true", "location": "tests/integration/features/questionnaire_integration.feature:176", "exception_class": "AssertionError", "exception_message": "Expected True at \\$.ok, got False", "last_response": {"method": "POST", "path": "/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Import CSV rejects duplicate external\\_qid rows within the same file", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Import CSV rejects duplicate external\\_qid rows within the same file", "step_name": "I POST \"/questionnaires/import\" with multipart file \"dup.csv\" containing:", "location": "tests/integration/features/questionnaire_integration.feature:142", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Export unknown questionnaire returns 404", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Export unknown questionnaire returns 404", "step_name": "I GET \"/questionnaires/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/export\"", "location": "tests/integration/features/questionnaire_integration.feature:156", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": null, "path": null, "status": null, "headers_keys": [], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "I POST \"/response-sets/44444444-4444-4444-4444-444444444444/regenerate-check\"", "location": "tests/integration/features/questionnaire_integration.feature:163", "exception_class": "ConnectError", "exception_message": "[Errno 111] Connection refused", "last_response": {"method": "DELETE", "path": "/answers?response_set_id=44444444-4444-4444-4444-444444444444&question_id=33333333-3333-3333-3333-333333333332", "status": 204, "headers_keys": ["Content-Type"], "has_json": false, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/0169ebb1-a476-410a-8773-2ea2f70a0118", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/0169ebb1-a476-410a-8773-2ea2f70a0118", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:72", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/252865c8-73b3-4241-9df1-2f7cbc919f11", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:72", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/252865c8-73b3-4241-9df1-2f7cbc919f11", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:95", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_bool' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_bool': True}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/fcbd1146-82b2-4529-9c0f-7ceec034e487", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:95", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_bool' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_bool': True}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/fcbd1146-82b2-4529-9c0f-7ceec034e487", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:111", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'not-a-boolean'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/75d1874c-c1af-47b6-8481-1b0b1111a603", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_parent_bool\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:111", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'not-a-boolean'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/75d1874c-c1af-47b6-8481-1b0b1111a603", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:128", "exception_class": "AssertionError", "exception_message": "Expected 'Not Found' in $.title, got ['Screen not found']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:128", "exception_class": "AssertionError", "exception_message": "Expected 'Not Found' in $.title, got ['Screen not found']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I PATCH \"/response-sets/rs-001/answers/q-missing\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:134", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'irrelevant'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/c5868f36-d4ad-4d42-894f-a6ce7e69a81d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "I PATCH \"/response-sets/rs-001/answers/q-missing\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:134", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'irrelevant'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/c5868f36-d4ad-4d42-894f-a6ce7e69a81d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:148", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/3b6abc4b-6b79-4a3a-a640-c425e1938003", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "I PATCH \"/response-sets/rs-001/answers/q_always_visible\" with body:", "location": "tests/integration/features/epic_I_conditional_visibility.feature:148", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('value_text' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AnswerUpsert.schema.json',\n     'title': 'AnswerUpsert',\n     'type': 'object',\n     'additionalProperties': False,\n     'properties': {'answer_kind': {'type': 'string',\n                                    'enum': ['short_string',\n                                             'long_text',\n                                             'boolean',\n                                             'number',\n                                             'enum_single']},\n                    'value': {'description': 'Type-appropriate answer '\n                                             'value.',\n                              'oneOf': [{'type': 'string'},\n                                        {'type': 'number'},\n                                        {'type': 'boolean'}]},\n                    'option_id': {'description': 'Required when '\n                                                 'answer_kind is '\n                                                 'enum_single.',\n                                  'type': 'string',\n                                  'format': 'uuid'},\n                    'question_id': {'type': 'string', 'format': 'uuid'}},\n     'anyOf': [{'required': ['value']}, {'required': ['option_id']}]}\n\nOn instance:\n    {'value_text': 'ACME Trading'}", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/3b6abc4b-6b79-4a3a-a640-c425e1938003", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/23845126-56bf-4a83-a618-c2054c037d4f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/23845126-56bf-4a83-a618-c2054c037d4f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/8b615b96-1836-48b5-94e0-d61f3089866d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/8b615b96-1836-48b5-94e0-d61f3089866d", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d16b71a6-a1c8-4b27-a262-8891f6b966ad", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_parent_bool\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:20", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d16b71a6-a1c8-4b27-a262-8891f6b966ad", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/7ad4b13e-d2a5-43cd-b5a9-d7d0abc82b9c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns child when parent’s canonical value matches visible_if_value", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns child when parent’s canonical value matches visible_if_value", "step_name": "the JSON \"$.questions[*].question_id\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:30", "exception_class": "ValueError", "exception_message": "invalid literal for int() with base 10: '*'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/7ad4b13e-d2a5-43cd-b5a9-d7d0abc82b9c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cd83c403-9262-4bf3-aba6-83b20690388f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/cd83c403-9262-4bf3-aba6-83b20690388f", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "AssertionError", "exception_message": "Expected 200, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.type\" should equal \"about:blank\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:103", "exception_class": "KeyError", "exception_message": "'type'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.type\" should equal \"about:blank\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:103", "exception_class": "KeyError", "exception_message": "'type'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "AssertionError", "exception_message": "Expected 422, got 409", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "KeyError", "exception_message": "'detail'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "KeyError", "exception_message": "'detail'", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_I_conditional_visibility.feature:141", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the response status should be 404", "location": "tests/integration/features/epic_I_conditional_visibility.feature:141", "exception_class": "AssertionError", "exception_message": "Expected Content-Type application/problem+json for error JSON responses, got application/json", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH is idempotent for same Idempotency-Key", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH is idempotent for same Idempotency-Key", "step_name": "both responses should have status 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:158", "exception_class": "AssertionError", "exception_message": "First response status mismatch", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d6d5ca25-8228-4eb6-a395-34d9b8427f6c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/d6d5ca25-8228-4eb6-a395-34d9b8427f6c", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.title\" should contain \"Conflict\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:104", "exception_class": "AssertionError", "exception_message": "Expected substring 'Conflict' in $.title, got 'ETag mismatch'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with stale If-Match returns 409 and prevents subtree re-evaluation", "step_name": "the JSON \"$.title\" should contain \"Conflict\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:104", "exception_class": "AssertionError", "exception_message": "Expected substring 'Conflict' in $.title, got 'ETag mismatch'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 409, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/1f2e099e-4f53-4d9c-b2c6-69f21cbeeff8", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/1f2e099e-4f53-4d9c-b2c6-69f21cbeeff8", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/5b102c6a-0cfd-48c4-b1fe-bfd1b88a50bb", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET returns only base questions when parent is unanswered (child hidden by default)", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET returns only base questions when parent is unanswered (child hidden by default)", "step_name": "the JSON \"$.questions[*].question_id\" should not contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:22", "exception_class": "AssertionError", "exception_message": "Did not expect '59830e92-110f-5c6b-8cae-3388c0141e97' in $.questions[*].question_id, got ['641a6188-3175-543b-9363-0fbd4fbf26b2', '59830e92-110f-5c6b-8cae-3388c0141e97', '2b6fdab4-24e3-5a77-8985-e390e19ce02b']", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/5b102c6a-0cfd-48c4-b1fe-bfd1b88a50bb", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the JSON \"$.visibility_delta.now_visible\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:45", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the JSON \"$.visibility_delta.now_hidden\" should contain \"q_child_name\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:64", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_hidden", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the JSON \"$.visibility_delta.now_visible\" should be an empty array", "location": "tests/integration/features/epic_I_conditional_visibility.feature:80", "exception_class": "AssertionError", "exception_message": "path not found: $.visibility_delta.now_visible", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"810bf4818ff77676c6b111db48df11428d26b7a7\"',\n     'visibility_delta': {'now_visible': ['59830e92-110f-5c6b-8cae-3388c0141e97'],\n                          'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH reveals child when parent toggles to matching value (delta now_visible)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH reveals child when parent toggles to matching value (delta now_visible)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:43", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"810bf4818ff77676c6b111db48df11428d26b7a7\"',\n     'visibility_delta': {'now_visible': ['59830e92-110f-5c6b-8cae-3388c0141e97'],\n                          'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"0d7edc3ee83a021aa7fd8ee9d1bd802c3d16e3d1\"',\n     'visibility_delta': {'now_visible': [],\n                          'now_hidden': ['59830e92-110f-5c6b-8cae-3388c0141e97']},\n     'suppressed_answers': ['59830e92-110f-5c6b-8cae-3388c0141e97']}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH hides child when parent toggles to non-matching value (delta now_hidden, suppression listed)", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:62", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"0d7edc3ee83a021aa7fd8ee9d1bd802c3d16e3d1\"',\n     'visibility_delta': {'now_visible': [],\n                          'now_hidden': ['59830e92-110f-5c6b-8cae-3388c0141e97']},\n     'suppressed_answers': ['59830e92-110f-5c6b-8cae-3388c0141e97']}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"d70dae89676a4916034dabc2cda626762b54d2f1\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH to a leaf question with no descendants produces empty delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH to a leaf question with no descendants produces empty delta", "step_name": "the response status should be 200", "location": "tests/integration/features/epic_I_conditional_visibility.feature:79", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"d70dae89676a4916034dabc2cda626762b54d2f1\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/2b6fdab4-24e3-5a77-8985-e390e19ce02b", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"1d4a12ae1c23ee037e424f2e09f3003383ee3443\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Complete mandatory answers and pass regenerate-check gating", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Complete mandatory answers and pass regenerate-check gating", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:65", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"1d4a12ae1c23ee037e424f2e09f3003383ee3443\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:170", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"493c7eb599e2de21e05ab1681d3c6b5cfd61c346\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Gating blocks when a mandatory answer is missing and unblocks after completion", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Gating blocks when a mandatory answer is missing and unblocks after completion", "step_name": "body:", "location": "tests/integration/features/questionnaire_integration.feature:170", "exception_class": "ValidationError", "exception_message": "Additional properties are not allowed ('suppressed_answers', 'visibility_delta' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/AutosaveResult.schema.json',\n     'title': 'AutosaveResult',\n     'type': 'object',\n     'properties': {'saved': {'type': 'boolean',\n                              'description': 'Result flag for per-answer '\n                                             'autosave'},\n                    'etag': {'type': 'string',\n                             'description': 'ETag token for optimistic '\n                                            'concurrency'}},\n     'required': ['saved', 'etag'],\n     'additionalProperties': False}\n\nOn instance:\n    {'saved': True,\n     'etag': 'W/\"493c7eb599e2de21e05ab1681d3c6b5cfd61c346\"',\n     'visibility_delta': {'now_visible': [], 'now_hidden': []},\n     'suppressed_answers': []}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 200, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "etag", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "GET with unknown screen_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::GET with unknown screen_id returns 404", "step_name": "the JSON \"$.detail\" should contain \"screen_id\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:129", "exception_class": "AssertionError", "exception_message": "path not found: $.detail", "last_response": {"method": "GET", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/screens/9fe2d5b9-0654-51a1-8262-c685dde96eac", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with unknown question_id returns 404", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with unknown question_id returns 404", "step_name": "the JSON \"$.title\" should contain \"Not Found\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:142", "exception_class": "AssertionError", "exception_message": "path not found: $.title", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/499937fa-5d67-5cc8-a51c-79d797ffbd54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the JSON \"$.title\" should contain \"Unprocessable Entity\"", "location": "tests/integration/features/epic_I_conditional_visibility.feature:119", "exception_class": "AssertionError", "exception_message": "Expected substring 'Unprocessable Entity' in $.title, got 'Validation failed'", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Retrieve a screen with questions and current answers (none yet)", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Retrieve a screen with questions and current answers (none yet)", "step_name": "the response code should be 200", "location": "tests/integration/features/questionnaire_integration.feature:28", "exception_class": "AssertionError", "exception_message": "Expected 200, got 404", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave a single answer with idempotency and ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave a single answer with idempotency and ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"etag\\_v1\"", "location": "tests/integration/features/questionnaire_integration.feature:37", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 409 Conflict on stale ETag", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 409 Conflict on stale ETag", "step_name": "I GET \"/response-sets/44444444-4444-4444-4444-444444444444/screens/22222222-2222-2222-2222-222222222222\" and capture header \"ETag\" as \"old\\_etag\"", "location": "tests/integration/features/questionnaire_integration.feature:100", "exception_class": "AssertionError", "exception_message": "Expected non-empty ETag header", "last_response": {"method": "GET", "path": "/response-sets/44444444-4444-4444-4444-444444444444/screens/4b518193-5168-5536-a99e-8074b197ad54", "status": 404, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response JSON at \"\\$.errors\\[0].path\" equals \"\\$.value\"", "location": "tests/integration/features/questionnaire_integration.feature:130", "exception_class": "AssertionError", "exception_message": "path not found: \\$.errors\\[0].path", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Epic I — Conditional Visibility", "scenario": "PATCH with type mismatch returns 422 and no visibility delta", "test_id": "feature::Epic I — Conditional Visibility::scenario::PATCH with type mismatch returns 422 and no visibility delta", "step_name": "the response status should be 422", "location": "tests/integration/features/epic_I_conditional_visibility.feature:118", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/1d37450a-89ad-517e-a402-257c2f826ae9/answers/641a6188-3175-543b-9363-0fbd4fbf26b2", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
{"feature": "Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)", "scenario": "Autosave fails with 422 Unprocessable Entity for type mismatch", "test_id": "feature::Questionnaire Service end-to-end integration (API ⇄ DB ⇄ API)::scenario::Autosave fails with 422 Unprocessable Entity for type mismatch", "step_name": "the response code should be 422", "location": "tests/integration/features/questionnaire_integration.feature:129", "exception_class": "ValidationError", "exception_message": "'title' is a required property\n\nFailed validating 'required' in schema:\n    {'$schema': 'https://json-schema.org/draft/2020-12/schema',\n     '$id': 'https://example.com/schemas/Problem.schema.json',\n     'title': 'Problem',\n     'type': 'object',\n     'properties': {'type': {'type': 'string', 'format': 'uri'},\n                    'title': {'type': 'string'},\n                    'status': {'type': 'integer'},\n                    'detail': {'type': 'string'},\n                    'instance': {'type': 'string',\n                                 'format': 'uri-reference'}},\n     'required': ['title', 'status'],\n     'additionalProperties': True,\n     'description': 'application/problem+json per RFC7807.'}\n\nOn instance:\n    {'errors': [{'path': '$.value', 'code': 'type_mismatch'}]}", "last_response": {"method": "PATCH", "path": "/response-sets/44444444-4444-4444-4444-444444444444/answers/33333333-3333-3333-3333-333333333332", "status": 422, "headers_keys": ["Content-Type", "content-length", "content-type", "date", "server", "x-request-id"], "has_json": true, "has_text": false}}
