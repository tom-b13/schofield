{
  "clarke_review": {
    "acceptable_as_is": [
      "7.2.1.1",
      "7.2.1.2",
      "7.2.1.3",
      "7.2.1.4",
      "7.2.1.5",
      "7.2.1.6",
      "7.2.1.7",
      "7.2.1.8",
      "7.2.1.9",
      "7.2.1.10",
      "7.2.1.11",
      "7.2.1.12",
      "7.2.1.13",
      "7.2.1.14",
      "7.2.1.15",
      "7.2.1.16",
      "7.2.1.17",
      "7.2.2.1",
      "7.2.2.2",
      "7.2.2.3",
      "7.2.2.4",
      "7.2.2.5",
      "7.2.2.6",
      "7.2.2.7",
      "7.2.2.8",
      "7.2.2.9",
      "7.2.2.10",
      "7.2.2.11",
      "7.2.2.12",
      "7.2.2.13",
      "7.2.2.14",
      "7.2.2.15",
      "7.2.2.16",
      "7.2.2.17",
      "7.2.2.18",
      "7.2.2.19",
      "7.2.2.20",
      "7.2.2.21",
      "7.2.2.22",
      "7.2.2.23",
      "7.2.2.24",
      "7.2.2.25",
      "7.2.2.26",
      "7.2.2.27",
      "7.2.2.28",
      "7.2.2.29",
      "7.2.2.30",
      "7.2.2.31",
      "7.2.2.32",
      "7.2.2.33",
      "7.2.2.34",
      "7.2.2.35",
      "7.2.2.36",
      "7.2.2.37",
      "7.2.2.38",
      "7.2.2.39",
      "7.2.2.40",
      "7.2.2.41",
      "7.2.2.42",
      "7.2.2.43",
      "7.2.2.44",
      "7.2.2.45",
      "7.2.2.46",
      "7.2.2.47",
      "7.2.2.48",
      "7.2.2.49",
      "7.2.2.50",
      "7.2.2.51",
      "7.2.2.52",
      "7.2.2.53",
      "7.2.2.54",
      "7.2.2.55",
      "7.2.2.56",
      "7.2.2.57",
      "7.2.2.58",
      "7.2.2.59",
      "7.2.2.60",
      "7.2.2.61",
      "7.2.2.62",
      "7.2.2.63",
      "7.2.2.64",
      "7.2.2.65",
      "7.2.2.66",
      "7.2.2.67",
      "7.2.2.68",
      "7.2.2.69",
      "7.2.2.70",
      "7.2.2.71",
      "7.2.2.72",
      "7.2.2.73",
      "7.2.2.74",
      "7.2.2.75",
      "7.2.2.76",
      "7.2.2.77",
      "7.2.2.78",
      "7.2.2.79",
      "7.2.2.80",
      "7.2.2.81",
      "7.2.2.82",
      "7.2.2.83",
      "7.2.2.84",
      "7.2.2.85",
      "7.2.2.86",
      "7.2.2.87",
      "7.2.2.88",
      "7.2.2.89",
      "7.2.2.90",
      "7.2.2.91",
      "7.2.2.92",
      "7.2.2.93",
      "7.2.2.94",
      "7.2.2.95",
      "7.2.2.96",
      "7.2.2.97",
      "7.2.2.98",
      "7.2.2.99",
      "7.2.2.100",
      "7.2.2.101",
      "7.2.2.102",
      "7.2.2.103",
      "7.2.2.104",
      "7.2.2.105",
      "7.2.2.106",
      "7.2.2.107",
      "7.2.2.108",
      "7.2.2.109",
      "7.2.2.110",
      "7.2.2.111",
      "7.2.2.112",
      "7.2.2.113",
      "7.2.2.114",
      "7.2.2.115",
      "7.2.2.116",
      "7.2.2.117",
      "7.2.2.118",
      "7.2.2.119",
      "7.2.2.120",
      "7.2.2.121",
      "7.2.2.122",
      "7.2.2.123",
      "7.2.2.124",
      "7.2.2.125",
      "7.2.2.126",
      "7.3.1.10",
      "7.3.2.1",
      "7.3.2.2",
      "7.3.2.3",
      "7.3.2.4",
      "7.3.2.5",
      "7.3.2.6",
      "7.3.2.7",
      "7.3.2.8",
      "7.3.2.9",
      "7.3.2.10",
      "7.3.2.11",
      "7.3.2.12",
      "7.3.2.13",
      "7.3.2.14",
      "7.3.2.15",
      "7.3.2.16",
      "7.3.2.17",
      "7.3.2.18",
      "7.3.2.19",
      "7.3.2.20"
    ],
    "needs_improvement": [
      "7.3.1.1",
      "7.3.1.2",
      "7.3.1.3",
      "7.3.1.4",
      "7.3.1.5",
      "7.3.1.6",
      "7.3.1.7",
      "7.3.1.8",
      "7.3.1.9",
      "7.3.1.11",
      "7.3.1.12"
    ],
    "required_missing_tests": [],
    "suspicious_passing_tests": [],
    "explicit_actions_for_ada": [
      {
        "test_id": "7.3.1.1",
        "category": "needs_improvement",
        "instruction": "Patch app.db.migrations_runner.MigrationRunner.start and app.db.migrations_runner.MigrationRunner.create_tables using mocker.patch(create=True) to append to a shared order list, then assert order == ['runner.start','create_tables'] and both call_count == 1.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.1 Mocking and Assertions require boundary method patching and order checks; current test uses local MagicMocks only (lines ~870–880) and does not patch the boundary."
      },
      {
        "test_id": "7.3.1.2",
        "category": "needs_improvement",
        "instruction": "Patch app.db.migrations_runner.MigrationRunner.create_tables and app.db.migrations_runner.MigrationRunner.create_constraints with mocker.patch(create=True) to append to order; assert order == ['create_tables','create_constraints'] and each called exactly once.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.2 requires sequencing via boundary mocks; current test uses local MagicMocks, not boundary patches (lines ~882–890)."
      },
      {
        "test_id": "7.3.1.3",
        "category": "needs_improvement",
        "instruction": "Patch app.db.migrations_runner.MigrationRunner.create_constraints and app.db.migrations_runner.MigrationRunner.apply_column_encryption with mocker.patch(create=True) to append to order; assert order == ['create_constraints','apply_column_encryption'] and single invocation of each.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.3 Mocking requires patching apply_column_encryption; current test uses local MagicMocks only (lines ~892–900)."
      },
      {
        "test_id": "7.3.1.4",
        "category": "needs_improvement",
        "instruction": "Patch app.db.base.DB.connect_tls and app.db.base.DB.any_operation with mocker.patch(create=True) to append to order; assert order == ['connect_tls','any_operation'] and both call_count == 1.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.4 requires TLS connect before any DB operation; current test doesn't patch DB boundary (lines ~902–910)."
      },
      {
        "test_id": "7.3.1.5",
        "category": "needs_improvement",
        "instruction": "Patch app.db.base.DB.connect_tls and app.db.base.DBSession.validate_row using mocker.patch(create=True) to append to order; assert order == ['connect_tls','validate_row'] and single invocation each.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.5 Mocking notes DBSession.validate_row; current test uses local MagicMocks (lines ~912–920) without boundary patch."
      },
      {
        "test_id": "7.3.1.6",
        "category": "needs_improvement",
        "instruction": "Patch app.db.base.DBSession.validate_row and app.resolution.placeholder.PlaceholderResolver.lookup_by_code with mocker.patch(create=True); append to order and assert order == ['validate_row','lookup_by_code'] with call_count == 1.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.6 mandates direct lookup follows validation; current test doesn't patch boundary (lines ~922–930)."
      },
      {
        "test_id": "7.3.1.7",
        "category": "needs_improvement",
        "instruction": "Patch app.resolution.placeholder.PlaceholderResolver.lookup_by_code and app.resolution.engine.Resolver.resolve_placeholders using mocker.patch(create=True); assert order == ['lookup_by_code','resolve_placeholders'] and both called once.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.7 requires boundary mocks; current test uses local MagicMocks (lines ~932–940)."
      },
      {
        "test_id": "7.3.1.8",
        "category": "needs_improvement",
        "instruction": "Patch app.db.migrations_runner.MigrationRunner.create_tables to raise a controlled error and app.db.migrations_runner.MigrationRunner.rollback to append to order; assert order == ['create_tables','rollback'] and single invocations.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.8 requires simulating failure and asserting immediate rollback; current test lacks boundary patching (lines ~942–950)."
      },
      {
        "test_id": "7.3.1.9",
        "category": "needs_improvement",
        "instruction": "Patch app.determinism.checker.DeterminismChecker.verify and app.flow.NextStep.start using mocker.patch(create=True); append to order and assert order == ['determinism_check','next_step'] with verify and start each called once.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.9 requires determinism check precedes next step; current test uses local MagicMocks (lines ~952–960)."
      },
      {
        "test_id": "7.3.1.11",
        "category": "needs_improvement",
        "instruction": "Patch app.registry.templates.TemplateRegistry.register to a MagicMock and patch app.db.migrations_runner.MigrationRunner.start with mocker.patch(create=True); assert register.call_count == 1 and start.called is False.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.11 requires registry call and no migration start; current test uses local MagicMocks without boundary patch (lines ~967–974)."
      },
      {
        "test_id": "7.3.1.12",
        "category": "needs_improvement",
        "instruction": "Patch app.registry.policies.PolicyRegistry.register and app.db.migrations_runner.MigrationRunner.start using mocker.patch(create=True); assert PolicyRegistry.register called once and MigrationRunner.start not called.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.12 requires policy registration proceeds without migrations; current test uses local MagicMocks (lines ~977–984)."
      }
    ]
  },
  "final_decision": {
    "continue": false
  }
}