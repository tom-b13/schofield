{
  "clarke_review": {
    "acceptable_as_is": [
      "7.2.1.1",
      "7.2.1.2",
      "7.2.1.3",
      "7.2.1.4",
      "7.2.1.5",
      "7.2.1.6",
      "7.2.1.7",
      "7.2.1.8",
      "7.2.1.9",
      "7.2.1.10",
      "7.2.1.11",
      "7.2.1.12",
      "7.2.1.13",
      "7.2.1.14",
      "7.2.1.15",
      "7.2.1.16",
      "7.2.1.17",
      "7.3.1.1",
      "7.3.1.2",
      "7.3.1.3",
      "7.3.1.4",
      "7.3.1.5",
      "7.3.1.6",
      "7.3.1.7",
      "7.3.1.8",
      "7.3.1.9",
      "7.3.1.10",
      "7.3.1.11",
      "7.3.1.12"
    ],
    "needs_improvement": [
      "7.2.2.1",
      "7.2.2.2",
      "7.2.2.3",
      "7.2.2.4",
      "7.2.2.5",
      "7.2.2.6",
      "7.2.2.7",
      "7.2.2.8",
      "7.2.2.9",
      "7.2.2.10",
      "7.2.2.11",
      "7.2.2.12",
      "7.2.2.13",
      "7.2.2.14",
      "7.2.2.15",
      "7.2.2.16",
      "7.2.2.17",
      "7.2.2.18",
      "7.2.2.19",
      "7.2.2.20",
      "7.2.2.21",
      "7.2.2.22",
      "7.2.2.23",
      "7.2.2.24",
      "7.2.2.25",
      "7.2.2.26",
      "7.2.2.27",
      "7.2.2.28",
      "7.2.2.29",
      "7.2.2.30",
      "7.2.2.31",
      "7.2.2.32",
      "7.2.2.33",
      "7.2.2.34",
      "7.2.2.35",
      "7.2.2.36",
      "7.2.2.37",
      "7.2.2.38",
      "7.2.2.39",
      "7.2.2.40",
      "7.2.2.41",
      "7.2.2.42",
      "7.2.2.43",
      "7.2.2.44",
      "7.2.2.45",
      "7.2.2.46",
      "7.2.2.47",
      "7.2.2.48",
      "7.2.2.49",
      "7.2.2.50",
      "7.2.2.51",
      "7.2.2.52",
      "7.2.2.53",
      "7.2.2.54",
      "7.2.2.55",
      "7.2.2.56",
      "7.2.2.57",
      "7.2.2.58",
      "7.2.2.59",
      "7.2.2.60",
      "7.2.2.61",
      "7.2.2.62",
      "7.2.2.63",
      "7.2.2.64",
      "7.2.2.65",
      "7.2.2.66",
      "7.2.2.67",
      "7.2.2.68",
      "7.2.2.69",
      "7.2.2.70",
      "7.2.2.71",
      "7.2.2.72",
      "7.2.2.73",
      "7.2.2.74",
      "7.2.2.75",
      "7.2.2.76",
      "7.2.2.77",
      "7.2.2.78",
      "7.2.2.79",
      "7.2.2.80",
      "7.2.2.81",
      "7.2.2.82",
      "7.2.2.83",
      "7.2.2.84",
      "7.2.2.85",
      "7.2.2.86",
      "7.2.2.87",
      "7.2.2.88",
      "7.2.2.89",
      "7.2.2.90",
      "7.2.2.91",
      "7.2.2.92",
      "7.2.2.93",
      "7.2.2.94",
      "7.2.2.95",
      "7.2.2.96",
      "7.2.2.97",
      "7.2.2.98",
      "7.2.2.99",
      "7.2.2.100",
      "7.2.2.101",
      "7.2.2.102",
      "7.2.2.103",
      "7.2.2.104",
      "7.2.2.105",
      "7.2.2.106",
      "7.2.2.107",
      "7.2.2.108",
      "7.2.2.109",
      "7.2.2.110",
      "7.2.2.111",
      "7.2.2.112",
      "7.2.2.113",
      "7.2.2.114",
      "7.2.2.115",
      "7.2.2.116",
      "7.2.2.117",
      "7.2.2.118",
      "7.2.2.119",
      "7.2.2.120",
      "7.2.2.121",
      "7.2.2.122",
      "7.2.2.123",
      "7.2.2.124",
      "7.2.2.125",
      "7.2.2.126",
      "7.3.2.1",
      "7.3.2.2",
      "7.3.2.3",
      "7.3.2.4",
      "7.3.2.5",
      "7.3.2.6",
      "7.3.2.7",
      "7.3.2.8",
      "7.3.2.9",
      "7.3.2.10",
      "7.3.2.11",
      "7.3.2.12",
      "7.3.2.13",
      "7.3.2.14",
      "7.3.2.15",
      "7.3.2.16",
      "7.3.2.17",
      "7.3.2.18",
      "7.3.2.19",
      "7.3.2.20"
    ],
    "required_missing_tests": [],
    "suspicious_passing_tests": [],
    "explicit_actions_for_ada": [
      {
        "test_id": "7.2.2.1",
        "category": "needs_improvement",
        "instruction": "In the dynamically generated test function for 7.2.2.1, mock reading ./docs/erd_spec.json to raise FileNotFoundError, assert exit_code == 1 (kept), assert error.message includes the missing file path and 'unreadable' or 'missing', and assert the file open was called exactly once; keep asserting no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.1 'Assertions' and 'Mocking'; current dynamic generator around 'Dynamic generation: 7.2.2.x' contains only generic status/code/message checks without boundary mocks."
      },
      {
        "test_id": "7.2.2.2",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.2, mock file read to return invalid JSON (e.g., '}{'), assert exit_code == 1 (kept), assert error.message mentions JSON parse failure with position, and verify the JSON parser/open was invoked once; ensure no outputs are present.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.2 requires message content and boundary usage; current test lacks parser/boundary assertions."
      },
      {
        "test_id": "7.2.2.3",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.3, feed an ERD that violates the schema; assert exit_code == 1 (kept), assert error.message contains the specific schema path, and verify schema validator was called; ensure outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.3 'Assertions'; dynamic test is generic and omits schema/boundary checks."
      },
      {
        "test_id": "7.2.2.4",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.4, mock reading ./docs/erd_mermaid.md to raise FileNotFoundError; assert exit_code == 1 (kept), assert error.message mentions 'Mermaid' and the path, verify open called once; assert no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.4; only generic assertions present."
      },
      {
        "test_id": "7.2.2.5",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.5, mock reading Mermaid as bytes with a non-UTF-8 sequence; assert exit_code == 1 (kept), assert error.message includes 'UTF-8' or 'encoding', and verify decode boundary was called; assert no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.5; encoding assertion missing."
      },
      {
        "test_id": "7.2.2.6",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.6, supply malformed Mermaid content to the parser; assert exit_code == 1 (kept), assert error.message contains the parser error snippet, and verify parser invocation; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.6 requires parser error details and boundary checks."
      },
      {
        "test_id": "7.2.2.7",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.7, mock relationships CSV open to raise FileNotFoundError; assert exit_code == 1 (kept), error.message mentions 'relationships.csv' missing/unreadable, verify open called once; assert no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.7; boundary and message assertions missing."
      },
      {
        "test_id": "7.2.2.8",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.8, feed invalid CSV rows to the CSV parser; assert exit_code == 1 (kept), error.message includes 'CSV' and parse error, verify parser used once; no outputs permitted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.8; add parser boundary assertion."
      },
      {
        "test_id": "7.2.2.9",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.9, use a CSV with header mismatch; assert exit_code == 1 (kept), error.message contains 'header mismatch' and expected header names, and verify file read once; ensure no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.9; current test generic."
      },
      {
        "test_id": "7.2.2.10",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.10, mock missing migrations/001_init.sql; assert exit_code == 1 (kept), error.message includes the filename, verify file access once; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.10 mandates filename in error."
      },
      {
        "test_id": "7.2.2.11",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.11, execute invalid SQL in 001_init; assert exit_code == 1 (kept), error.message contains SQL error detail (code/position), verify executor boundary called with script; assert no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.11; executor boundary not asserted."
      },
      {
        "test_id": "7.2.2.12",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.12, simulate runtime execution failure; assert exit_code == 1 (kept), error.message contains executor exception, verify executor call count; ensure no outputs and no rollback yet unless specified.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.12; add boundary checks."
      },
      {
        "test_id": "7.2.2.13",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.13, mock migrations/002_constraints.sql missing; assert exit_code == 1 (kept), error.message includes missing file path, verify open once; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.13."
      },
      {
        "test_id": "7.2.2.14",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.14, pass invalid SQL for constraints; assert exit_code == 1 (kept), error.message shows SQL parsing/exec error, assert executor invocation with constraints script; no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.14."
      },
      {
        "test_id": "7.2.2.15",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.15, simulate constraints execution error; assert exit_code == 1 (kept), error.message includes executor failure, and verify rollback path expectations per spec; no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.15."
      },
      {
        "test_id": "7.2.2.16",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.16, mock missing indexes migration; assert exit_code == 1 (kept), error.message includes the missing indexes file, verify open called once; assert outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.16."
      },
      {
        "test_id": "7.2.2.17",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.17, inject invalid SQL for indexes; assert exit_code == 1 (kept), error.message contains SQL error text, verify executor called once; no outputs/side effects.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.17."
      },
      {
        "test_id": "7.2.2.18",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.18, simulate indexes execution error; assert exit_code == 1 (kept), error.message contains executor failure, verify executor boundary; assert no outputs; assert rollback behavior if specified.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.18."
      },
      {
        "test_id": "7.2.2.19",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.19, mock missing rollbacks migration; assert exit_code == 1 (kept), error.message contains file path, verify open once; outputs absent and events empty.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.19."
      },
      {
        "test_id": "7.2.2.20",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.20, provide invalid SQL in rollbacks; assert exit_code == 1 (kept), error.message shows SQL error, verify executor call; ensure no outputs produced.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.20."
      },
      {
        "test_id": "7.2.2.21",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.21, simulate rollback execution error; assert exit_code == 1 (kept), error.message includes rollback failure, verify executor invocation and that subsequent steps are not run; outputs must be absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.21."
      },
      {
        "test_id": "7.2.2.22",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.22, unset database URL env/param; assert exit_code == 1 (kept), error.message mentions missing DB URL; verify config loader boundary called; assert no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.22."
      },
      {
        "test_id": "7.2.2.23",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.23, provide invalid DSN; assert exit_code == 1 (kept), error.message mentions invalid DSN, verify DSN parser boundary call and that no DB operations occur; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.23."
      },
      {
        "test_id": "7.2.2.24",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.24, simulate DNS resolution failure; assert exit_code == 1 (kept), error.message includes hostname resolution failure; verify resolver/driver boundary call; assert no outputs/events.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.24."
      },
      {
        "test_id": "7.2.2.25",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.25, omit TLS required flag; assert exit_code == 1 (kept), error.message mentions missing TLS flag; verify config loader access; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.25."
      },
      {
        "test_id": "7.2.2.26",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.26, set TLS required to non-boolean; assert exit_code == 1 (kept), error.message indicates type error; verify config parsing boundary; assert no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.26."
      },
      {
        "test_id": "7.2.2.27",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.27, simulate missing TLS materials while required; assert exit_code == 1 (kept), error.message mentions missing cert/key/CA; verify filesystem access for TLS paths; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.27."
      },
      {
        "test_id": "7.2.2.28",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.28, missing encryption mode; assert exit_code == 1 (kept), error.message mentions missing encryption mode; verify config fetch; no outputs permitted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.28."
      },
      {
        "test_id": "7.2.2.29",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.29, set invalid encryption mode; assert exit_code == 1 (kept), error.message lists allowed modes; verify config validation; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.29."
      },
      {
        "test_id": "7.2.2.30",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.30, require KMS key alias in column mode but omit it; assert exit_code == 1 (kept), error.message mentions required alias; verify KMS config boundary; assert no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.30."
      },
      {
        "test_id": "7.2.2.31",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.31, simulate KMS alias not found; assert exit_code == 1 (kept), error.message includes alias not found; verify KMS lookup boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.31."
      },
      {
        "test_id": "7.2.2.32",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.32, simulate KMS get_key call failure; assert exit_code == 1 (kept), error.message contains KMS error; verify KMS call; outputs absent and no downstream steps.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.32."
      },
      {
        "test_id": "7.2.2.33",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.33, return a key payload with schema mismatch; assert exit_code == 1 (kept), error.message references schema/path; verify schema validator boundary; no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.33."
      },
      {
        "test_id": "7.2.2.34",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.34, simulate non-immutable KMS key material; assert exit_code == 1 (kept), error.message mentions immutability requirement; verify metadata check boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.34."
      },
      {
        "test_id": "7.2.2.35",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.35, simulate secret manager call failure; assert exit_code == 1 (kept), error.message includes secret call failure; verify secret manager boundary call; ensure no outputs or events.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.35."
      },
      {
        "test_id": "7.2.2.36",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.36, return a secret schema mismatch; assert exit_code == 1 (kept), error.message contains schema path; verify schema validator call; outputs absent; no downstream calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.36."
      },
      {
        "test_id": "7.2.2.37",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.37, ensure a secret is never logged: assert logs do not contain secret content; assert exit_code == 1 (kept), error.code matches; mock logger and assert redaction; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.37 'Secret was logged'."
      },
      {
        "test_id": "7.2.2.38",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.38, mock CA bundle path missing; assert exit_code == 1 (kept), error.message mentions CA bundle file; verify open/stat boundary; outputs absent and no TLS connection attempt asserted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.38."
      },
      {
        "test_id": "7.2.2.39",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.39, inject invalid PEM content; assert exit_code == 1 (kept), error.message mentions invalid PEM; verify PEM parser boundary; assert no outputs or events.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.39."
      },
      {
        "test_id": "7.2.2.40",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.40, mock an expired/not-yet-valid CA certificate; assert exit_code == 1 (kept), error.message mentions certificate validity; verify cert parser boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.40."
      },
      {
        "test_id": "7.2.2.41",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.41, simulate missing encrypted fields policy file; assert exit_code == 1 (kept), error.message includes file path; verify open/stat boundary calls; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.41."
      },
      {
        "test_id": "7.2.2.42",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.42, populate policy with pointers that cannot be resolved to ERD fields; assert exit_code == 1 (kept), error.message lists unresolved pointers; verify ERD lookup boundary called; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.42."
      },
      {
        "test_id": "7.2.2.43",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.43, include a field pointer to a non-existent entity/field; assert exit_code == 1 (kept), error.message includes 'not in entity'; verify ERD lookup boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.43."
      },
      {
        "test_id": "7.2.2.44",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.44, missing migration timeout; assert exit_code == 1 (kept), error.message mentions missing timeout; verify config boundary call; outputs absent and events empty.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.44."
      },
      {
        "test_id": "7.2.2.45",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.45, set non-positive timeout; assert exit_code == 1 (kept), error.message mentions positive integer requirement; verify config validation boundary; no outputs allowed.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.45."
      },
      {
        "test_id": "7.2.2.46",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.46, simulate generic migration execution failure; assert exit_code == 1 (kept), error.message includes executor error, verify executor boundary and that rollback path recorded as per spec; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.46."
      },
      {
        "test_id": "7.2.2.47",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.47, simulate constraint creation error; assert exit_code == 1 (kept), error.message mentions constraint failure; verify executor/DDL boundary; no outputs; ensure no index creation attempted afterward.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E2 failure per Spec 7.2.2.47."
      },
      {
        "test_id": "7.2.2.48",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.48, simulate encryption apply error; assert exit_code == 1 (kept), error.message describes encryption apply failure; verify encryption boundary invoked with targets; assert no outputs and that rollback initiation is asserted if required.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E3 failure per Spec 7.2.2.48."
      },
      {
        "test_id": "7.2.2.49",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.49, simulate rollback error; assert exit_code == 1 (kept), error.message contains rollback failure; verify rollback boundary call; outputs must be absent and events record failure only.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E8 failure per Spec 7.2.2.49."
      },
      {
        "test_id": "7.2.2.50",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.50, simulate TLS connection error; assert exit_code == 1 (kept), error.message contains TLS connection failure; verify TLS handshake boundary; ensure steps after E4 are not recorded; outputs/events empty accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E4 failure per Spec 7.2.2.50."
      },
      {
        "test_id": "7.2.2.51",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.51, simulate row insertion error; assert exit_code == 1 (kept), error.message denotes insertion error; verify DB execute boundary was invoked with sample statement; outputs absent and no subsequent joins attempted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E5 failure per Spec 7.2.2.51."
      },
      {
        "test_id": "7.2.2.52",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.52, simulate join resolution error; assert exit_code == 1 (kept), error.message includes join failure; verify join boundary invoked; assert no outputs and next steps halted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E6 failure per Spec 7.2.2.52."
      },
      {
        "test_id": "7.2.2.53",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.53, simulate invalid encryption key at access; assert exit_code == 1 (kept), error.message includes key invalid; verify KMS decrypt boundary called; no outputs/events.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "S3 failure per Spec 7.2.2.53."
      },
      {
        "test_id": "7.2.2.54",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.54, simulate TLS materials unavailable; assert exit_code == 1 (kept), error.message mentions missing TLS materials; verify file access; outputs absent and no DB ops recorded.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E4 failure per Spec 7.2.2.54."
      },
      {
        "test_id": "7.2.2.55",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.55, submit unsupported data type; assert exit_code == 1 (kept), error.message lists invalid type; verify validator boundary; ensure no outputs or writes occurred.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "E5 failure per Spec 7.2.2.55."
      },
      {
        "test_id": "7.2.2.56",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.56, run migrations out of order; assert exit_code == 1 (kept), error.message indicates out-of-order execution; verify migration planner boundary; outputs/events absent beyond failure.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Ordering failure per Spec 7.2.2.56."
      },
      {
        "test_id": "7.2.2.57",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.57, simulate unidentified error; assert exit_code == 1 (kept), error.message is non-empty and generic; verify catch-all handler boundary invoked; no outputs or downstream events recorded.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Catch-all per Spec 7.2.2.57."
      },
      {
        "test_id": "7.2.2.58",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.58, ensure outputs entities incomplete is detected; assert exit_code == 1 (kept), error.message references 'entities incomplete'; verify outputs validator boundary; outputs must be absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Outputs validator per Spec 7.2.2.58."
      },
      {
        "test_id": "7.2.2.59",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.59, assert non-deterministic entity order is flagged; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker boundary; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Determinism per Spec 7.2.2.59."
      },
      {
        "test_id": "7.2.2.60",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.60, assert entities mutable within step is detected; exit_code == 1 (kept), error.message mentions mutation; verify immutability checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Immutability per Spec 7.2.2.60."
      },
      {
        "test_id": "7.2.2.61",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.61, assert entity name empty is caught; exit_code == 1 (kept), error.message mentions empty name; verify validator boundary; no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Entity name check per Spec 7.2.2.61."
      },
      {
        "test_id": "7.2.2.62",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.62, assert entity name mismatch with ERD; exit_code == 1 (kept), error.message mentions mismatch; verify ERD cross-check boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Name mismatch per Spec 7.2.2.62."
      },
      {
        "test_id": "7.2.2.63",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.63, assert entity name missing; exit_code == 1 (kept), error.message mentions missing name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing name per Spec 7.2.2.63."
      },
      {
        "test_id": "7.2.2.64",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.64, fields set invalid; exit_code == 1 (kept), error.message includes 'fields set invalid'; verify schema validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Fields invalid per Spec 7.2.2.64."
      },
      {
        "test_id": "7.2.2.65",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.65, fields order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker boundary; outputs absent or flagged.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Field order per Spec 7.2.2.65."
      },
      {
        "test_id": "7.2.2.66",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.66, fields array missing; exit_code == 1 (kept), error.message mentions fields array missing; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Fields array per Spec 7.2.2.66."
      },
      {
        "test_id": "7.2.2.67",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.67, field name mismatch with ERD; exit_code == 1 (kept), error.message mentions mismatch; verify ERD checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Field mismatch per Spec 7.2.2.67."
      },
      {
        "test_id": "7.2.2.68",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.68, field name not unique; exit_code == 1 (kept), error.message mentions duplication; verify uniqueness checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Field uniqueness per Spec 7.2.2.68."
      },
      {
        "test_id": "7.2.2.69",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.69, field name missing; exit_code == 1 (kept), error.message mentions missing field name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing field name per Spec 7.2.2.69."
      },
      {
        "test_id": "7.2.2.70",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.70, field type mismatch with ERD; exit_code == 1 (kept), error.message mentions type mismatch; verify ERD checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Type mismatch per Spec 7.2.2.70."
      },
      {
        "test_id": "7.2.2.71",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.71, field type missing; exit_code == 1 (kept), error.message mentions missing type; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing type per Spec 7.2.2.71."
      },
      {
        "test_id": "7.2.2.72",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.72, encrypted flag false when required; exit_code == 1 (kept), error.message indicates encryption flag mismatch; verify ERD/policy checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Encryption flag per Spec 7.2.2.72."
      },
      {
        "test_id": "7.2.2.73",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.73, encrypted flag true when not required; exit_code == 1 (kept), error.message mentions flag incorrect; verify checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Encryption flag per Spec 7.2.2.73."
      },
      {
        "test_id": "7.2.2.74",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.74, encrypted flag missing; exit_code == 1 (kept), error.message mentions missing flag; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Flag missing per Spec 7.2.2.74."
      },
      {
        "test_id": "7.2.2.75",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.75, primary key columns empty; exit_code == 1 (kept), error.message mentions PK columns empty; verify outputs validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "PK empty per Spec 7.2.2.75."
      },
      {
        "test_id": "7.2.2.76",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.76, primary key columns unknown; exit_code == 1 (kept), error.message mentions unknown PK columns; verify ERD checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "PK unknown per Spec 7.2.2.76."
      },
      {
        "test_id": "7.2.2.77",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.77, primary key columns order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "PK order per Spec 7.2.2.77."
      },
      {
        "test_id": "7.2.2.78",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.78, PK columns missing when PK defined; exit_code == 1 (kept), error.message mentions missing PK columns; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "PK missing per Spec 7.2.2.78."
      },
      {
        "test_id": "7.2.2.79",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.79, foreign keys set invalid; exit_code == 1 (kept), error.message mentions invalid FK set; verify FK validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK set invalid per Spec 7.2.2.79."
      },
      {
        "test_id": "7.2.2.80",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.80, FKs order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK order per Spec 7.2.2.80."
      },
      {
        "test_id": "7.2.2.81",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.81, FK name empty; exit_code == 1 (kept), error.message mentions FK name empty; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK name empty per Spec 7.2.2.81."
      },
      {
        "test_id": "7.2.2.82",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.82, FK name not unique; exit_code == 1 (kept), error.message mentions duplication; verify uniqueness checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK name unique per Spec 7.2.2.82."
      },
      {
        "test_id": "7.2.2.83",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.83, FK name missing when FKs exist; exit_code == 1 (kept), error.message mentions missing FK name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK name missing per Spec 7.2.2.83."
      },
      {
        "test_id": "7.2.2.84",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.84, FK columns unknown; exit_code == 1 (kept), error.message mentions unknown FK columns; verify ERD lookup boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK columns unknown per Spec 7.2.2.84."
      },
      {
        "test_id": "7.2.2.85",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.85, FK columns order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK column order per Spec 7.2.2.85."
      },
      {
        "test_id": "7.2.2.86",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.86, FK columns missing when FKs exist; exit_code == 1 (kept), error.message mentions missing columns; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK columns missing per Spec 7.2.2.86."
      },
      {
        "test_id": "7.2.2.87",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.87, FK references entity missing; exit_code == 1 (kept), error.message mentions missing reference entity; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK ref entity per Spec 7.2.2.87."
      },
      {
        "test_id": "7.2.2.88",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.88, FK references columns missing; exit_code == 1 (kept), error.message mentions missing reference columns; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK ref columns per Spec 7.2.2.88."
      },
      {
        "test_id": "7.2.2.89",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.89, FK references entity unknown; exit_code == 1 (kept), error.message mentions unknown entity; verify ERD lookup boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK ref entity unknown per Spec 7.2.2.89."
      },
      {
        "test_id": "7.2.2.90",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.90, FK references columns unknown; exit_code == 1 (kept), error.message mentions unknown columns; verify ERD lookup boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK ref columns unknown per Spec 7.2.2.90."
      },
      {
        "test_id": "7.2.2.91",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.91, FK references columns count mismatch; exit_code == 1 (kept), error.message mentions count mismatch; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK count mismatch per Spec 7.2.2.91."
      },
      {
        "test_id": "7.2.2.92",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.92, unique constraints set invalid; exit_code == 1 (kept), error.message mentions invalid unique set; verify uniques checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Uniques per Spec 7.2.2.92."
      },
      {
        "test_id": "7.2.2.93",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.93, unique constraints order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unique order per Spec 7.2.2.93."
      },
      {
        "test_id": "7.2.2.94",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.94, unique constraint name empty; exit_code == 1 (kept), error.message mentions empty name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unique name empty per Spec 7.2.2.94."
      },
      {
        "test_id": "7.2.2.95",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.95, unique constraint name not unique; exit_code == 1 (kept), error.message mentions duplicate names; verify uniqueness checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unique name uniqueness per Spec 7.2.2.95."
      },
      {
        "test_id": "7.2.2.96",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.96, unique constraint name missing when uniques exist; exit_code == 1 (kept), error.message mentions missing name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unique name missing per Spec 7.2.2.96."
      },
      {
        "test_id": "7.2.2.97",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.97, unique constraint columns unknown; exit_code == 1 (kept), error.message mentions unknown columns; verify ERD checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unique columns unknown per Spec 7.2.2.97."
      },
      {
        "test_id": "7.2.2.98",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.98, unique columns order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unique column order per Spec 7.2.2.98."
      },
      {
        "test_id": "7.2.2.99",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.99, unique columns missing when uniques exist; exit_code == 1 (kept), error.message mentions missing columns; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unique columns missing per Spec 7.2.2.99."
      },
      {
        "test_id": "7.2.2.100",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.100, indexes set invalid; exit_code == 1 (kept), error.message mentions invalid index set; verify index checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Indexes invalid per Spec 7.2.2.100."
      },
      {
        "test_id": "7.2.2.101",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.101, indexes order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Index order per Spec 7.2.2.101."
      },
      {
        "test_id": "7.2.2.102",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.102, index name empty; exit_code == 1 (kept), error.message mentions empty name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Index name empty per Spec 7.2.2.102."
      },
      {
        "test_id": "7.2.2.103",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.103, index name not unique; exit_code == 1 (kept), error.message mentions duplicate index names; verify uniqueness checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Index name uniqueness per Spec 7.2.2.103."
      },
      {
        "test_id": "7.2.2.104",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.104, index name missing when indexes exist; exit_code == 1 (kept), error.message mentions missing index name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Index name missing per Spec 7.2.2.104."
      },
      {
        "test_id": "7.2.2.105",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.105, index columns unknown; exit_code == 1 (kept), error.message mentions unknown columns; verify ERD checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Index columns unknown per Spec 7.2.2.105."
      },
      {
        "test_id": "7.2.2.106",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.106, index columns order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Index column order per Spec 7.2.2.106."
      },
      {
        "test_id": "7.2.2.107",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.107, index columns missing when indexes exist; exit_code == 1 (kept), error.message mentions missing columns; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Index columns missing per Spec 7.2.2.107."
      },
      {
        "test_id": "7.2.2.108",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.108, enums incomplete; exit_code == 1 (kept), error.message mentions missing enum values; verify enum checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enums per Spec 7.2.2.108."
      },
      {
        "test_id": "7.2.2.109",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.109, enums order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enums order per Spec 7.2.2.109."
      },
      {
        "test_id": "7.2.2.110",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.110, enum name empty; exit_code == 1 (kept), error.message mentions empty enum name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enum name empty per Spec 7.2.2.110."
      },
      {
        "test_id": "7.2.2.111",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.111, enum name mismatch with ERD; exit_code == 1 (kept), error.message mentions mismatch; verify ERD checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enum name mismatch per Spec 7.2.2.111."
      },
      {
        "test_id": "7.2.2.112",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.112, enum name missing when enums exist; exit_code == 1 (kept), error.message mentions missing name; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enum name missing per Spec 7.2.2.112."
      },
      {
        "test_id": "7.2.2.113",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.113, enum values empty; exit_code == 1 (kept), error.message mentions empty values; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enum values empty per Spec 7.2.2.113."
      },
      {
        "test_id": "7.2.2.114",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.114, enum values mismatch with ERD; exit_code == 1 (kept), error.message mentions mismatch; verify ERD checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enum values mismatch per Spec 7.2.2.114."
      },
      {
        "test_id": "7.2.2.115",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.115, enum values order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enum order per Spec 7.2.2.115."
      },
      {
        "test_id": "7.2.2.116",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.116, enum values missing when enums exist; exit_code == 1 (kept), error.message mentions missing values; verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enum values missing per Spec 7.2.2.116."
      },
      {
        "test_id": "7.2.2.117",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.117, encrypted fields incomplete; exit_code == 1 (kept), error.message mentions incomplete set; verify ERD/policy checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Encrypted fields per Spec 7.2.2.117."
      },
      {
        "test_id": "7.2.2.118",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.118, encrypted fields values not unique; exit_code == 1 (kept), error.message mentions duplicates; verify uniqueness checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Encrypted fields uniqueness per Spec 7.2.2.118."
      },
      {
        "test_id": "7.2.2.119",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.119, encrypted fields present when ERD none; exit_code == 1 (kept), error.message mentions unexpected encrypted fields; verify ERD checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Unexpected encrypted fields per Spec 7.2.2.119."
      },
      {
        "test_id": "7.2.2.120",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.120, constraints applied incomplete; exit_code == 1 (kept), error.message mentions incomplete constraints; verify constraints manifest checker; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Constraints applied per Spec 7.2.2.120."
      },
      {
        "test_id": "7.2.2.121",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.121, constraints applied value empty; exit_code == 1 (kept), error.message mentions empty identifiers; verify validator boundary; outputs absent and no duplicates recorded.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Constraints empty per Spec 7.2.2.121."
      },
      {
        "test_id": "7.2.2.122",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.122, constraints applied values not unique; exit_code == 1 (kept), error.message mentions duplicates; verify uniqueness checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Constraints unique per Spec 7.2.2.122."
      },
      {
        "test_id": "7.2.2.123",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.123, constraints applied order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Constraints order per Spec 7.2.2.123."
      },
      {
        "test_id": "7.2.2.124",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.124, migration journal empty; exit_code == 1 (kept), error.message mentions empty journal; verify journal checker boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Journal per Spec 7.2.2.124."
      },
      {
        "test_id": "7.2.2.125",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.125, migration journal order not deterministic; exit_code == 1 (kept), error.message mentions ordering; verify determinism checker; outputs absent or flagged accordingly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Journal order per Spec 7.2.2.125."
      },
      {
        "test_id": "7.2.2.126",
        "category": "needs_improvement",
        "instruction": "For 7.2.2.126, migration journal missing required fields; exit_code == 1 (kept), error.message mentions missing keys (filename/applied_at); verify validator boundary; outputs absent.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Journal fields per Spec 7.2.2.126."
      },
      {
        "test_id": "7.3.2.1",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.1, simulate migration execution error; assert exit_code == 1 (kept), error.message contains migration error; verify executor boundary; assert result.events is empty to prove halt.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.1."
      },
      {
        "test_id": "7.3.2.2",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.2, simulate constraint creation error; assert exit_code == 1 (kept), error.message mentions constraint failure; verify constraint boundary; events empty to show halt before indexes.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.2."
      },
      {
        "test_id": "7.3.2.3",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.3, simulate encryption apply error; assert exit_code == 1 (kept), error.message shows encryption failure; verify encryption boundary; events empty (no remainder).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.3."
      },
      {
        "test_id": "7.3.2.4",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.4, simulate rollback failure; assert exit_code == 1 (kept), error.message indicates rollback failure; verify rollback boundary; events empty (halt).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.4."
      },
      {
        "test_id": "7.3.2.5",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.5, simulate TLS connection error; assert exit_code == 1 (kept), error.message mentions TLS connect; verify TLS boundary; events empty (halt before E5).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.5."
      },
      {
        "test_id": "7.3.2.6",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.6, simulate row insertion validation error; assert exit_code == 1 (kept), error.message mentions validation; verify validator boundary; events empty (halt before E6).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.6."
      },
      {
        "test_id": "7.3.2.7",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.7, simulate join resolution error; assert exit_code == 1 (kept), error.message mentions join; verify join boundary; events empty (halt before E7).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.7."
      },
      {
        "test_id": "7.3.2.8",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.8, simulate invalid encryption key during access; assert exit_code == 1 (kept), error.message mentions key invalid; verify KMS boundary; events empty (halt).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.8."
      },
      {
        "test_id": "7.3.2.9",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.9, simulate TLS materials unavailable; assert exit_code == 1 (kept), error.message mentions missing materials; verify file access boundary; events empty (halt).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.9."
      },
      {
        "test_id": "7.3.2.10",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.10, simulate unsupported data type at validation; assert exit_code == 1 (kept), error.message mentions unsupported type; verify validator boundary; events empty (halt).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.10."
      },
      {
        "test_id": "7.3.2.11",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.11, simulate out-of-order migration execution; assert exit_code == 1 (kept), error.message mentions ordering; verify planner boundary; events empty (halt).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Behaviour halt per Spec 7.3.2.11."
      },
      {
        "test_id": "7.3.2.12",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.12, simulate unidentified runtime error; assert exit_code == 1 (kept), error.message non-empty; verify catch-all handler boundary; events empty (halt); keep no outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Catch-all per Spec 7.3.2.12."
      },
      {
        "test_id": "7.3.2.13",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.13, simulate database connectivity failure; assert exit_code == 1 (kept), error.message mentions connectivity; verify driver connect boundary; events empty (halt).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Extended behaviour per Spec 7.3.2.13."
      },
      {
        "test_id": "7.3.2.14",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.14, simulate permission failure; assert exit_code == 1 (kept), error.message mentions permission denied; verify driver boundary; events empty; no schema creation attempted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.2.14."
      },
      {
        "test_id": "7.3.2.15",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.15, simulate TLS certificate/handshake failure; assert exit_code == 1 (kept), error.message mentions handshake; verify TLS boundary; events empty (no inserts).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.2.15."
      },
      {
        "test_id": "7.3.2.16",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.16, simulate storage exhaustion; assert exit_code == 1 (kept), error.message mentions disk/storage; verify DB write boundary; events empty; no journal updates proceed.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.2.16."
      },
      {
        "test_id": "7.3.2.17",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.17, simulate filesystem/temp unavailability; assert exit_code == 1 (kept), error.message mentions temp FS; verify file system boundary; events empty; degraded stop asserted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.2.17."
      },
      {
        "test_id": "7.3.2.18",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.18, simulate KMS unavailability; assert exit_code == 1 (kept), error.message mentions KMS; verify KMS boundary; events empty; encryption operations halted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.2.18."
      },
      {
        "test_id": "7.3.2.19",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.19, simulate unspecified additional failure per spec; assert exit_code == 1 (kept), error.message matches section requirement; verify corresponding boundary; events empty; no downstream operations executed.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.2.19."
      },
      {
        "test_id": "7.3.2.20",
        "category": "needs_improvement",
        "instruction": "For 7.3.2.20, simulate additional behaviour halt case per spec; assert exit_code == 1 (kept), error.message contains required phrase; verify boundary; ensure events remain empty to demonstrate halt.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.2.20."
      }
    ]
  },
  "final_decision": {
    "continue": false
  }
}