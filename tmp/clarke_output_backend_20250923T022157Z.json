{
  "clarke_review": {
    "acceptable_as_is": [
      "7.2.1.1",
      "7.2.1.2",
      "7.2.1.3",
      "7.2.1.4",
      "7.2.1.5",
      "7.2.1.6",
      "7.2.1.7",
      "7.2.1.8",
      "7.2.1.9",
      "7.2.1.10",
      "7.2.1.11",
      "7.2.1.12",
      "7.2.1.13",
      "7.2.1.14",
      "7.2.1.15",
      "7.2.1.16",
      "7.2.1.17",
      "7.3.1.1",
      "7.3.1.2",
      "7.3.1.3",
      "7.3.1.4",
      "7.3.1.5",
      "7.3.1.6",
      "7.3.1.7",
      "7.3.1.8",
      "7.3.1.9",
      "7.3.1.10",
      "7.3.1.11",
      "7.3.1.12",
      "7.3.2.1",
      "7.3.2.2",
      "7.3.2.3",
      "7.3.2.4",
      "7.3.2.5",
      "7.3.2.6",
      "7.3.2.7",
      "7.3.2.8",
      "7.3.2.9",
      "7.3.2.10",
      "7.3.2.11",
      "7.3.2.12",
      "7.3.2.13",
      "7.3.2.14",
      "7.3.2.15",
      "7.3.2.16",
      "7.3.2.17",
      "7.3.2.18",
      "7.3.2.19",
      "7.3.2.20",
      "7.2.2.1",
      "7.2.2.2",
      "7.2.2.3",
      "7.2.2.4",
      "7.2.2.5",
      "7.2.2.6",
      "7.2.2.7",
      "7.2.2.8",
      "7.2.2.9",
      "7.2.2.10",
      "7.2.2.11",
      "7.2.2.12",
      "7.2.2.13",
      "7.2.2.14",
      "7.2.2.15",
      "7.2.2.16",
      "7.2.2.17",
      "7.2.2.18",
      "7.2.2.19",
      "7.2.2.20",
      "7.2.2.21",
      "7.2.2.22",
      "7.2.2.23",
      "7.2.2.24",
      "7.2.2.25",
      "7.2.2.26",
      "7.2.2.27",
      "7.2.2.28",
      "7.2.2.29",
      "7.2.2.30",
      "7.2.2.31",
      "7.2.2.32",
      "7.2.2.33",
      "7.2.2.34",
      "7.2.2.35",
      "7.2.2.36",
      "7.2.2.37",
      "7.2.2.38",
      "7.2.2.39",
      "7.2.2.40",
      "7.2.2.41",
      "7.2.2.42",
      "7.2.2.43",
      "7.2.2.44",
      "7.2.2.45",
      "7.2.2.46",
      "7.2.2.47",
      "7.2.2.48",
      "7.2.2.49",
      "7.2.2.50",
      "7.2.2.51",
      "7.2.2.53",
      "7.2.2.54",
      "7.2.2.55",
      "7.2.2.56",
      "7.2.2.57"
    ],
    "needs_improvement": [
      "7.2.2.52",
      "7.2.2.58",
      "7.2.2.59",
      "7.2.2.60",
      "7.2.2.61",
      "7.2.2.62",
      "7.2.2.63",
      "7.2.2.64",
      "7.2.2.65",
      "7.2.2.66",
      "7.2.2.67",
      "7.2.2.68",
      "7.2.2.69",
      "7.2.2.70",
      "7.2.2.71",
      "7.2.2.72",
      "7.2.2.73",
      "7.2.2.74",
      "7.2.2.75",
      "7.2.2.76",
      "7.2.2.77",
      "7.2.2.78",
      "7.2.2.79",
      "7.2.2.80",
      "7.2.2.81",
      "7.2.2.82",
      "7.2.2.83",
      "7.2.2.84",
      "7.2.2.85",
      "7.2.2.86",
      "7.2.2.87",
      "7.2.2.88",
      "7.2.2.89",
      "7.2.2.90",
      "7.2.2.91",
      "7.2.2.92",
      "7.2.2.93",
      "7.2.2.94",
      "7.2.2.95",
      "7.2.2.96",
      "7.2.2.97",
      "7.2.2.98",
      "7.2.2.99",
      "7.2.2.100",
      "7.2.2.101",
      "7.2.2.102",
      "7.2.2.103",
      "7.2.2.104",
      "7.2.2.105",
      "7.2.2.106",
      "7.2.2.107",
      "7.2.2.108",
      "7.2.2.109",
      "7.2.2.110",
      "7.2.2.111",
      "7.2.2.112",
      "7.2.2.113",
      "7.2.2.114",
      "7.2.2.115",
      "7.2.2.116",
      "7.2.2.117",
      "7.2.2.118",
      "7.2.2.119",
      "7.2.2.120",
      "7.2.2.121",
      "7.2.2.122",
      "7.2.2.123",
      "7.2.2.124",
      "7.2.2.125",
      "7.2.2.126"
    ],
    "required_missing_tests": [],
    "suspicious_passing_tests": [],
    "explicit_actions_for_ada": [
      {
        "test_id": "7.2.2.52",
        "category": "needs_improvement",
        "instruction": "In _gen_722_prelude, add a joiner mock when sec_id == '52' (e.g., pre.append(\"joiner = mocker.Mock(name='join_executor')\")) so the postlude's joiner.assert_called() does not raise NameError.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Postlude asserts joiner.assert_called() for 7.2.2.52 (around lines 917–921); prelude lacks a joiner mock for sec_id '52' (search _gen_722_prelude)."
      },
      {
        "test_id": "7.2.2.58",
        "category": "needs_improvement",
        "instruction": "In _gen_722_post, do not append the final \"assert 'outputs' not in result\" for this sec_id; these 'Outputs:*' sections validate outputs structure and must not forbid outputs presence.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.58 has Error Mode POST_OUTPUTS_ENTITIES_INCOMPLETE; test currently appends an unconditional outputs-absent assertion near lines 1018–1023."
      },
      {
        "test_id": "7.2.2.59",
        "category": "needs_improvement",
        "instruction": "Guard the final outputs-absent assertion in _gen_722_post so it does not run for sec_id '59'; keep the outputs structure asserts and error.code check.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.59 (POST_OUTPUTS_ENTITIES_ORDER_NOT_DETERMINISTIC); unconditional \"assert 'outputs' not in result\" appended at end of _gen_722_post."
      },
      {
        "test_id": "7.2.2.60",
        "category": "needs_improvement",
        "instruction": "Skip the final outputs-absent assertion in _gen_722_post for this sec_id; retain existing outputs immutability checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.60 (POST_OUTPUTS_ENTITIES_MUTABLE_WITHIN_STEP) expects outputs to exist; file ends with unconditional outputs-absent assert."
      },
      {
        "test_id": "7.2.2.61",
        "category": "needs_improvement",
        "instruction": "Exclude sec_id '61' from the final outputs-absent assertion in _gen_722_post; keep entity name empty checks intact.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.61 (POST_OUTPUTS_ENTITIES_NAME_EMPTY); test enforces outputs absence unconditionally."
      },
      {
        "test_id": "7.2.2.62",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence in _gen_722_post for this sec_id; maintain ERD name mismatch checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.62 (POST_OUTPUTS_ENTITIES_NAME_MISMATCH_WITH_ERD); unconditional outputs-absent assert present."
      },
      {
        "test_id": "7.2.2.63",
        "category": "needs_improvement",
        "instruction": "Guard the final outputs-absent assertion in _gen_722_post for sec_id '63'; outputs must be present to validate missing name.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.63 (POST_OUTPUTS_ENTITIES_NAME_MISSING); outputs-absent assert conflicts with structure checks."
      },
      {
        "test_id": "7.2.2.64",
        "category": "needs_improvement",
        "instruction": "Skip the outputs-absent assertion in _gen_722_post for sec_id '64'; keep fields set validation asserts.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.64 (POST_OUTPUTS_ENTITIES_FIELDS_SET_INVALID); file appends outputs-absent assert unconditionally."
      },
      {
        "test_id": "7.2.2.65",
        "category": "needs_improvement",
        "instruction": "Disable the final outputs-absent assertion in _gen_722_post for sec_id '65'; maintain field order checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.65 (POST_OUTPUTS_ENTITIES_FIELDS_ORDER_NOT_DETERMINISTIC); outputs-absent assert at file end."
      },
      {
        "test_id": "7.2.2.66",
        "category": "needs_improvement",
        "instruction": "Exclude sec_id '66' from the unconditional outputs-absent assertion in _gen_722_post; entity fields array presence must be validated on existing outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.66 (POST_OUTPUTS_ENTITIES_FIELDS_ARRAY_MISSING); outputs-absent assert present globally."
      },
      {
        "test_id": "7.2.2.67",
        "category": "needs_improvement",
        "instruction": "Remove the outputs-absent check in _gen_722_post for sec_id '67'; keep ERD field name mismatch assertion flow.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.67 (POST_OUTPUTS_ENTITIES_FIELDS_NAME_MISMATCH_WITH_ERD); outputs-absent assert conflicts."
      },
      {
        "test_id": "7.2.2.68",
        "category": "needs_improvement",
        "instruction": "Skip the final outputs-absent assertion for sec_id '68' in _gen_722_post; duplicate field name detection requires outputs presence.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_ENTITIES_FIELDS_NAME_NOT_UNIQUE vs unconditional outputs-absent assert."
      },
      {
        "test_id": "7.2.2.69",
        "category": "needs_improvement",
        "instruction": "Guard the outputs-absent assert in _gen_722_post so it does not run for sec_id '69'; retain missing field name checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_ENTITIES_FIELDS_NAME_MISSING requires outputs present."
      },
      {
        "test_id": "7.2.2.70",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '70' in _gen_722_post; keep field type mismatch invariants intact.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_ENTITIES_FIELDS_TYPE_MISMATCH_WITH_ERD; outputs-absent assert present."
      },
      {
        "test_id": "7.2.2.71",
        "category": "needs_improvement",
        "instruction": "Exclude sec_id '71' from the final outputs-absent assertion in _gen_722_post; maintain type missing checks on outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_ENTITIES_FIELDS_TYPE_MISSING; outputs-absent assert conflicts."
      },
      {
        "test_id": "7.2.2.72",
        "category": "needs_improvement",
        "instruction": "Skip the outputs-absent assert for sec_id '72' in _gen_722_post; validate encrypted flag false when required on outputs instead.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_ENTITIES_FIELDS_ENCRYPTED_FALSE_WHEN_REQUIRED vs unconditional outputs-absent."
      },
      {
        "test_id": "7.2.2.73",
        "category": "needs_improvement",
        "instruction": "Guard out the outputs-absent assertion for sec_id '73' in _gen_722_post; leave over-declaration encrypted flag checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_ENTITIES_FIELDS_ENCRYPTED_TRUE_WHEN_NOT_REQUIRED requires outputs present."
      },
      {
        "test_id": "7.2.2.74",
        "category": "needs_improvement",
        "instruction": "Disable the outputs-absent assertion for sec_id '74' in _gen_722_post; maintain encrypted flag missing checks on outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_ENTITIES_FIELDS_ENCRYPTED_MISSING; unconditional outputs-absent assert present."
      },
      {
        "test_id": "7.2.2.75",
        "category": "needs_improvement",
        "instruction": "Remove the final outputs-absent assertion for sec_id '75' in _gen_722_post; keep PK columns empty validation on outputs entities.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.75 describes outputs.entities[].primary_key validations; asserting outputs absence contradicts this."
      },
      {
        "test_id": "7.2.2.76",
        "category": "needs_improvement",
        "instruction": "Guard the outputs-absent assert in _gen_722_post for sec_id '76'; preserve PK columns unknown checks using outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "PK columns unknown requires outputs present; file appends outputs-absent assertion unconditionally."
      },
      {
        "test_id": "7.2.2.77",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '77' in _gen_722_post; keep deterministic order checks on PK columns.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks on outputs conflict with unconditional outputs-absent assert."
      },
      {
        "test_id": "7.2.2.78",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent assertion for sec_id '78' in _gen_722_post; retain PK present-when-defined checks using outputs snapshot.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Outputs-based PK presence validated; outputs-absent assert contradicts."
      },
      {
        "test_id": "7.2.2.79",
        "category": "needs_improvement",
        "instruction": "Omit the outputs-absent assertion for sec_id '79' in _gen_722_post; foreign keys set invalid checks require outputs presence.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK validations on outputs vs unconditional outputs-absent."
      },
      {
        "test_id": "7.2.2.80",
        "category": "needs_improvement",
        "instruction": "Guard the outputs-absent assertion in _gen_722_post for sec_id '80'; keep FK order deterministic checks intact on outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs present; file ends with outputs-absent assert."
      },
      {
        "test_id": "7.2.2.81",
        "category": "needs_improvement",
        "instruction": "Skip the outputs-absent assert for sec_id '81' in _gen_722_post; retain FK name empty checks using outputs.fks[].name.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK name checks depend on outputs; outputs-absent contradicts."
      },
      {
        "test_id": "7.2.2.82",
        "category": "needs_improvement",
        "instruction": "Do not enforce outputs absence for sec_id '82' in _gen_722_post; keep FK name uniqueness assertions based on outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "FK uniqueness requires outputs; unconditional outputs-absent assert present."
      },
      {
        "test_id": "7.2.2.83",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent check for sec_id '83' in _gen_722_post; assertions must validate missing FK name when FKs exist using outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "POST_OUTPUTS_* FK name missing when FKs exist; outputs must be present."
      },
      {
        "test_id": "7.2.2.84",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent assertion in _gen_722_post for sec_id '84'; keep FK columns unknown checks on outputs columns list.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Outputs needed for column membership checks."
      },
      {
        "test_id": "7.2.2.85",
        "category": "needs_improvement",
        "instruction": "Disable outputs-absent assertion for sec_id '85' in _gen_722_post; retain FK columns order deterministic asserts using outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks conflict with outputs-absent."
      },
      {
        "test_id": "7.2.2.86",
        "category": "needs_improvement",
        "instruction": "Guard out the outputs-absent assertion for sec_id '86' in _gen_722_post; validate missing FK columns via outputs entity data.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing columns checks require outputs."
      },
      {
        "test_id": "7.2.2.87",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '87' in _gen_722_post; retain FK reference entity missing checks on outputs references.entity.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Reference entity missing requires outputs."
      },
      {
        "test_id": "7.2.2.88",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent assertion for sec_id '88' in _gen_722_post; validate FK references columns missing using outputs references.columns[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Requires outputs present."
      },
      {
        "test_id": "7.2.2.89",
        "category": "needs_improvement",
        "instruction": "Guard the outputs-absent assertion in _gen_722_post for sec_id '89'; keep FK references entity unknown assertions based on outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Outputs required."
      },
      {
        "test_id": "7.2.2.90",
        "category": "needs_improvement",
        "instruction": "Do not enforce outputs absence for sec_id '90' in _gen_722_post; maintain FK references columns unknown checks on outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Outputs needed."
      },
      {
        "test_id": "7.2.2.91",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '91' in _gen_722_post; keep FK references columns count mismatch checks using outputs lists length compare.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Outputs required."
      },
      {
        "test_id": "7.2.2.92",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent for sec_id '92' in _gen_722_post; validate unique constraints set invalid using outputs unique_constraints[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Outputs required for uniques."
      },
      {
        "test_id": "7.2.2.93",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '93' in _gen_722_post; keep unique constraints order deterministic assertions on outputs indexes.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs."
      },
      {
        "test_id": "7.2.2.94",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '94' in _gen_722_post; retain unique constraint name empty checks via outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Name checks require outputs."
      },
      {
        "test_id": "7.2.2.95",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '95' in _gen_722_post; validate unique constraint name uniqueness using outputs unique_constraints[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Uniqueness requires outputs."
      },
      {
        "test_id": "7.2.2.96",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '96' in _gen_722_post; maintain 'name missing when uniques exist' checks via outputs path existence tests.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Requires outputs."
      },
      {
        "test_id": "7.2.2.97",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '97' in _gen_722_post; preserve unique constraint columns unknown validations against outputs fields().",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Requires outputs."
      },
      {
        "test_id": "7.2.2.98",
        "category": "needs_improvement",
        "instruction": "Disable outputs-absent for sec_id '98' in _gen_722_post; retain index/unique columns order deterministic checks via outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs."
      },
      {
        "test_id": "7.2.2.99",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '99' in _gen_722_post; keep 'columns missing when uniques exist' assertions based on outputs object shape.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Needs outputs."
      },
      {
        "test_id": "7.2.2.100",
        "category": "needs_improvement",
        "instruction": "Omit outputs-absent for sec_id '100' in _gen_722_post; validate indexes set invalid using outputs indexes[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Indexes checks require outputs."
      },
      {
        "test_id": "7.2.2.101",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent assertion for sec_id '101' in _gen_722_post; keep index order deterministic assertions on outputs indexes[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs."
      },
      {
        "test_id": "7.2.2.102",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '102' in _gen_722_post; retain index name empty checks using outputs indexes[].name.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Name checks require outputs."
      },
      {
        "test_id": "7.2.2.103",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '103' in _gen_722_post; maintain index name unique checks via outputs list uniqueness assertions.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Uniqueness checks require outputs."
      },
      {
        "test_id": "7.2.2.104",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent for sec_id '104' in _gen_722_post; validate 'index name missing when indexes exist' via outputs shape checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Requires outputs."
      },
      {
        "test_id": "7.2.2.105",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '105' in _gen_722_post; keep index columns unknown validations against outputs field sets.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Requires outputs to compare columns."
      },
      {
        "test_id": "7.2.2.106",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '106' in _gen_722_post; retain index columns order deterministic checks via outputs indexes[].columns.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs."
      },
      {
        "test_id": "7.2.2.107",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '107' in _gen_722_post; validate 'index columns missing when indexes exist' using outputs-based assertions.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing columns checks require outputs."
      },
      {
        "test_id": "7.2.2.108",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent for sec_id '108' in _gen_722_post; validate enums completeness using outputs.enums[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Enums require outputs present."
      },
      {
        "test_id": "7.2.2.109",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '109' in _gen_722_post; keep enums order deterministic checks via outputs.enums[].name ordering.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs."
      },
      {
        "test_id": "7.2.2.110",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '110' in _gen_722_post; retain enum name empty checks on outputs enums[].name truthiness.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Name checks require outputs."
      },
      {
        "test_id": "7.2.2.111",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '111' in _gen_722_post; maintain enum names match ERD via outputs enums names set equality.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Comparison needs outputs."
      },
      {
        "test_id": "7.2.2.112",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent for sec_id '112' in _gen_722_post; validate enum name missing when enums exist using outputs shape checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Requires outputs present."
      },
      {
        "test_id": "7.2.2.113",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '113' in _gen_722_post; keep enum values non-empty checks using outputs enums[].values.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Values checks need outputs."
      },
      {
        "test_id": "7.2.2.114",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '114' in _gen_722_post; retain enum values mismatch with ERD checks via outputs values sets.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Comparison requires outputs."
      },
      {
        "test_id": "7.2.2.115",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '115' in _gen_722_post; keep enum values order deterministic checks using outputs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs."
      },
      {
        "test_id": "7.2.2.116",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent for sec_id '116' in _gen_722_post; validate enum values missing when enums exist using outputs structure assertions.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Presence checks require outputs."
      },
      {
        "test_id": "7.2.2.117",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '117' in _gen_722_post; keep encrypted fields list completeness checks using outputs.encrypted_fields[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "List checks require outputs."
      },
      {
        "test_id": "7.2.2.118",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '118' in _gen_722_post; retain encrypted fields values uniqueness checks using outputs list uniqueness.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Uniqueness checks require outputs."
      },
      {
        "test_id": "7.2.2.119",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '119' in _gen_722_post; keep 'encrypted fields present when ERD none' check using outputs.encrypted_fields == [].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Empty-list check requires outputs."
      },
      {
        "test_id": "7.2.2.120",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent for sec_id '120' in _gen_722_post; validate constraints_applied completeness using outputs.constraints_applied[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Constraints list checks require outputs."
      },
      {
        "test_id": "7.2.2.121",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '121' in _gen_722_post; keep non-empty constraint identifiers checks using outputs list truthiness per item.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Needs outputs."
      },
      {
        "test_id": "7.2.2.122",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '122' in _gen_722_post; retain constraints_applied uniqueness checks using outputs set comparisons.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Needs outputs."
      },
      {
        "test_id": "7.2.2.123",
        "category": "needs_improvement",
        "instruction": "Guard outputs-absent for sec_id '123' in _gen_722_post; keep constraints_applied order deterministic assertions on outputs list ordering.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks need outputs."
      },
      {
        "test_id": "7.2.2.124",
        "category": "needs_improvement",
        "instruction": "Remove outputs-absent for sec_id '124' in _gen_722_post; validate migration journal non-empty using outputs.migration_journal[].",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Journal checks require outputs."
      },
      {
        "test_id": "7.2.2.125",
        "category": "needs_improvement",
        "instruction": "Skip outputs-absent for sec_id '125' in _gen_722_post; keep migration journal order deterministic checks on outputs filenames list ordering.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Order checks require outputs."
      },
      {
        "test_id": "7.2.2.126",
        "category": "needs_improvement",
        "instruction": "Do not assert outputs absence for sec_id '126' in _gen_722_post; validate required fields exist in each journal entry using outputs dict key checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Key presence checks require outputs."
      }
    ]
  },
  "final_decision": {
    "continue": false
  }
}