============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/codex/schofield
plugins: mock-3.14.1, anyio-4.9.0, cov-6.2.1, langsmith-0.4.1
collected 76 items

tests/architectural/test_epic_a_data_model_architecture.py ............. [ 17%]
..............                                                           [ 35%]
tests/functional/test_epic_a_data_model_functional.py FFFFFFFFFFF.FFFF.. [ 59%]
.F......FFFFFFFFFFFFFFFFFFFFFFF                                          [100%]

=================================== FAILURES ===================================
_____________ test_7_2_1_1_entities_persisted_with_canonical_names _____________

    def test_7_2_1_1_entities_persisted_with_canonical_names():
        """Verifies 7.2.1.1 — Entities are persisted with canonical names."""
        # Invoke migration then request outputs snapshot (shim returns error envelope)
        result = run_migrate_cli(["--section", "7.2.1.1"])
        outputs = result.get("outputs") or {}
    
        # Assert: names set equals expected canonical names (set-equality)
        expected_names = {
            "Company",
            "QuestionnaireQuestion",
            "AnswerOption",
            "ResponseSet",
            "Response",
            "GeneratedDocument",
            "FieldGroup",
            "QuestionToFieldGroup",
            "GroupValue",
        }
        actual_names = {e.get("name") for e in (outputs.get("entities") or [])}
>       assert actual_names == expected_names
E       AssertionError: assert set() == {'AnswerOptio...ldGroup', ...}
E         
E         Extra items in the right set:
E         'Response'
E         'QuestionnaireQuestion'
E         'GroupValue'
E         'Company'
E         'FieldGroup'
E         'GeneratedDocument'
E         'QuestionToFieldGroup'
E         'AnswerOption'
E         'ResponseSet'
E         
E         Full diff:
E         + set()
E         - {
E         -     'AnswerOption',
E         -     'Company',
E         -     'FieldGroup',
E         -     'GeneratedDocument',
E         -     'GroupValue',
E         -     'QuestionToFieldGroup',
E         -     'QuestionnaireQuestion',
E         -     'Response',
E         -     'ResponseSet',
E         - }

tests/functional/test_epic_a_data_model_functional.py:315: AssertionError
____________ test_7_2_1_2_entity_fields_exposed_with_declared_types ____________

    def test_7_2_1_2_entity_fields_exposed_with_declared_types():
        """Verifies 7.2.1.2 — Entity fields are exposed with declared types for Response."""
        result = run_migrate_cli(["--section", "7.2.1.2"])
        outputs = result.get("outputs") or {}
        entities = outputs.get("entities") or []
        response = next((e for e in entities if e.get("name") == "Response"), {})
        fields = {f.get("name"): f.get("type") for f in (response.get("fields") or [])}
        # Assert: required field types present exactly
>       assert fields.get("response_id") == "uuid"
E       AssertionError: assert None == 'uuid'
E        +  where None = <built-in method get of dict object at 0x7f1855fc9e80>('response_id')
E        +    where <built-in method get of dict object at 0x7f1855fc9e80> = {}.get

tests/functional/test_epic_a_data_model_functional.py:330: AssertionError
_________________ test_7_2_1_3_primary_key_externally_declared _________________

    def test_7_2_1_3_primary_key_externally_declared():
        """Verifies 7.2.1.3 — Primary key is externally declared for Response."""
        result = run_migrate_cli(["--section", "7.2.1.3"])
        outputs = result.get("outputs") or {}
        response = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        pk_cols = (response.get("primary_key") or {}).get("columns") or []
        # Assert: exact PK columns
>       assert pk_cols == ["response_id"]
E       AssertionError: assert [] == ['response_id']
E         
E         Right contains one more item: 'response_id'
E         
E         Full diff:
E         + []
E         - [
E         -     'response_id',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:348: AssertionError
_________________ test_7_2_1_4_foreign_key_constraints_present _________________

    def test_7_2_1_4_foreign_key_constraints_present():
        """Verifies 7.2.1.4 — Foreign key constraints are present for Response → ResponseSet."""
        result = run_migrate_cli(["--section", "7.2.1.4"])
        outputs = result.get("outputs") or {}
        response = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        fks = response.get("foreign_keys") or []
        expected = {
            "name": "fk_response_set",
            "columns": ["response_set_id"],
            "references": {"entity": "ResponseSet", "columns": ["response_set_id"]},
        }
        # Assert: exact FK entry exists
>       assert expected in fks
E       AssertionError: assert {'columns': ['response_set_id'], 'name': 'fk_response_set', 'references': {'columns': ['response_set_id'], 'entity': 'ResponseSet'}} in []

tests/functional/test_epic_a_data_model_functional.py:365: AssertionError
___________________ test_7_2_1_5_unique_constraints_present ____________________

    def test_7_2_1_5_unique_constraints_present():
        """Verifies 7.2.1.5 — Unique constraints are present (Response one-per-question-per-submission)."""
        result = run_migrate_cli(["--section", "7.2.1.5"])
        outputs = result.get("outputs") or {}
        response = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        uniques = response.get("unique_constraints") or []
        expected = {"name": "uq_response_set_question", "columns": ["response_set_id", "question_id"]}
>       assert expected in uniques
E       AssertionError: assert {'columns': ['response_set_id', 'question_id'], 'name': 'uq_response_set_question'} in []

tests/functional/test_epic_a_data_model_functional.py:378: AssertionError
_________________________ test_7_2_1_6_indexes_present _________________________

    def test_7_2_1_6_indexes_present():
        """Verifies 7.2.1.6 — Indexes are present (QuestionnaireQuestion.placeholder_code lookup)."""
        result = run_migrate_cli(["--section", "7.2.1.6"])
        outputs = result.get("outputs") or {}
        qq = next((e for e in (outputs.get("entities") or []) if e.get("name") == "QuestionnaireQuestion"), {})
        idxs = qq.get("indexes") or []
        expected = {"name": "uq_question_placeholder_code", "columns": ["placeholder_code"]}
>       assert expected in idxs
E       AssertionError: assert {'columns': ['placeholder_code'], 'name': 'uq_question_placeholder_code'} in []

tests/functional/test_epic_a_data_model_functional.py:390: AssertionError
____________________ test_7_2_1_7_enums_externally_declared ____________________

    def test_7_2_1_7_enums_externally_declared():
        """Verifies 7.2.1.7 — Enums are externally declared (answer_kind values)."""
        result = run_migrate_cli(["--section", "7.2.1.7"])
        outputs = result.get("outputs") or {}
        enums = outputs.get("enums") or []
        answer_kind = next((e for e in enums if e.get("name") == "answer_kind"), {})
        expected_values = ["boolean", "enum_single", "long_text", "number", "short_string"]
>       assert answer_kind.get("values") == expected_values
E       AssertionError: assert None == ['boolean', 'enum_single', 'long_text', 'number', 'short_string']
E        +  where None = <built-in method get of dict object at 0x7f1855e52780>('values')
E        +    where <built-in method get of dict object at 0x7f1855e52780> = {}.get

tests/functional/test_epic_a_data_model_functional.py:403: AssertionError
____________________ test_7_2_1_8_encrypted_fields_flagged _____________________

    def test_7_2_1_8_encrypted_fields_flagged():
        """Verifies 7.2.1.8 — Encrypted fields are explicitly flagged."""
        result = run_migrate_cli(["--section", "7.2.1.8"])
        outputs = result.get("outputs") or {}
    
        def _encrypted(entity: str, field: str) -> Any:
            ent = next((e for e in (outputs.get("entities") or []) if e.get("name") == entity), {})
            fld = next((f for f in (ent.get("fields") or []) if f.get("name") == field), {})
            return fld.get("encrypted", False)
    
        # Assert: sensitive fields are flagged true
>       assert _encrypted("Company", "legal_name") is True
E       AssertionError: assert False is True
E        +  where False = <function test_7_2_1_8_encrypted_fields_flagged.<locals>._encrypted at 0x7f1855d4a320>('Company', 'legal_name')

tests/functional/test_epic_a_data_model_functional.py:417: AssertionError
_____________ test_7_2_1_9_global_encrypted_fields_manifest_exists _____________

    def test_7_2_1_9_global_encrypted_fields_manifest_exists():
        """Verifies 7.2.1.9 — Global encrypted fields manifest exists."""
        result = run_migrate_cli(["--section", "7.2.1.9"])
        outputs = result.get("outputs") or {}
        manifest = outputs.get("encrypted_fields") or []
        expected = {
            "Company.legal_name",
            "Company.registered_office_address",
            "Response.value_json",
            "GeneratedDocument.output_uri",
        }
>       assert set(manifest) == expected
E       AssertionError: assert set() == {'Company.leg...e.value_json'}
E         
E         Extra items in the right set:
E         'Company.registered_office_address'
E         'Response.value_json'
E         'Company.legal_name'
E         'GeneratedDocument.output_uri'
E         
E         Full diff:
E         + set()
E         - {
E         -     'Company.legal_name',
E         -     'Company.registered_office_address',
E         -     'GeneratedDocument.output_uri',
E         -     'Response.value_json',
E         - }

tests/functional/test_epic_a_data_model_functional.py:436: AssertionError
__________________ test_7_2_1_10_constraints_listed_globally ___________________

    def test_7_2_1_10_constraints_listed_globally():
        """Verifies 7.2.1.10 — Constraints are listed globally in outputs.constraints_applied[]."""
        result = run_migrate_cli(["--section", "7.2.1.10"])
        outputs = result.get("outputs") or {}
        constraints = outputs.get("constraints_applied") or []
        required = {"pk_response", "fk_response_set", "uq_response_set_question"}
>       assert required.issubset(set(constraints))
E       AssertionError: assert False
E        +  where False = <built-in method issubset of set object at 0x7f185646af80>(set())
E        +    where <built-in method issubset of set object at 0x7f185646af80> = {'fk_response_set', 'pk_response', 'uq_response_set_question'}.issubset
E        +    and   set() = set([])

tests/functional/test_epic_a_data_model_functional.py:447: AssertionError
______________ test_7_2_1_11_migration_journal_includes_filenames ______________

    def test_7_2_1_11_migration_journal_includes_filenames():
        """Verifies 7.2.1.11 — Migration journal entries include filenames under migrations/."""
        result = run_migrate_cli(["--section", "7.2.1.11"])
        outputs = result.get("outputs") or {}
        journal = outputs.get("migration_journal") or []
        filenames = [j.get("filename") for j in journal]
        # Assert: includes the two expected filenames
>       assert "migrations/001_init.sql" in filenames
E       AssertionError: assert 'migrations/001_init.sql' in []

tests/functional/test_epic_a_data_model_functional.py:460: AssertionError
________ test_7_2_1_13_one_response_per_question_per_submission_visible ________

    def test_7_2_1_13_one_response_per_question_per_submission_visible():
        """Verifies 7.2.1.13 — Uniqueness rule externally visible in outputs for Response."""
        result = run_migrate_cli(["--section", "7.2.1.13"])
        outputs = result.get("outputs") or {}
        response = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        uniques = response.get("unique_constraints") or []
>       assert {"name": "uq_response_set_question", "columns": ["response_set_id", "question_id"]} in uniques
E       AssertionError: assert {'columns': ['response_set_id', 'question_id'], 'name': 'uq_response_set_question'} in []

tests/functional/test_epic_a_data_model_functional.py:483: AssertionError
_________ test_7_2_1_14_duplicate_placeholders_rejected_via_uniqueness _________

    def test_7_2_1_14_duplicate_placeholders_rejected_via_uniqueness():
        """Verifies 7.2.1.14 — Duplicate placeholders are rejected via uniqueness on placeholder_code."""
        result = run_migrate_cli(["--section", "7.2.1.14"])
        outputs = result.get("outputs") or {}
        qq = next((e for e in (outputs.get("entities") or []) if e.get("name") == "QuestionnaireQuestion"), {})
        # Assert: unique/index exists with exact name and columns
>       assert {"name": "uq_question_placeholder_code", "columns": ["placeholder_code"]} in (qq.get("unique_constraints") or []) or (
            {"name": "uq_question_placeholder_code", "columns": ["placeholder_code"]} in (qq.get("indexes") or [])
        )
E       AssertionError: assert ({'columns': ['placeholder_code'], 'name': 'uq_question_placeholder_code'} in ((None or [])) or {'columns': ['placeholder_code'], 'name': 'uq_question_placeholder_code'} in ((None or [])))
E        +  where None = <built-in method get of dict object at 0x7f1855e85540>('unique_constraints')
E        +    where <built-in method get of dict object at 0x7f1855e85540> = {}.get
E        +  and   None = <built-in method get of dict object at 0x7f1855e85540>('indexes')
E        +    where <built-in method get of dict object at 0x7f1855e85540> = {}.get

tests/functional/test_epic_a_data_model_functional.py:492: AssertionError
________ test_7_2_1_15_direct_lookup_resolves_placeholders_structurally ________

    def test_7_2_1_15_direct_lookup_resolves_placeholders_structurally():
        """Verifies 7.2.1.15 — Direct lookup artefacts present; no template mapping entities exist."""
        result = run_migrate_cli(["--section", "7.2.1.15"])
        outputs = result.get("outputs") or {}
        entities = [e.get("name") for e in (outputs.get("entities") or [])]
        # Assert: QuestionnaireQuestion has placeholder_code field
        qq = next((e for e in (outputs.get("entities") or []) if e.get("name") == "QuestionnaireQuestion"), {})
>       assert any(f.get("name") == "placeholder_code" for f in (qq.get("fields") or []))
E       assert False
E        +  where False = any(<generator object test_7_2_1_15_direct_lookup_resolves_placeholders_structurally.<locals>.<genexpr> at 0x7f1855e1db60>)

tests/functional/test_epic_a_data_model_functional.py:504: AssertionError
_______________ test_7_2_1_16_tls_enforcement_externally_visible _______________

    def test_7_2_1_16_tls_enforcement_externally_visible():
        """Verifies 7.2.1.16 — TLS enforcement is externally visible if outputs surface configuration."""
        result = run_migrate_cli(["--section", "7.2.1.16"])
        outputs = result.get("outputs") or {}
        config = outputs.get("config") or {}
        # Assert: if TLS projection exists, it reflects true
        tls_required = (config.get("database") or {}).get("ssl", {}).get("required")
>       assert tls_required is True
E       assert None is True

tests/functional/test_epic_a_data_model_functional.py:517: AssertionError
____________________ test_7_2_2_3_erd_spec_schema_mismatch _____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18564add80>

    def test_7_2_2_3_erd_spec_schema_mismatch(mocker):
        """Verifies 7.2.2.3 — ERD spec schema mismatch."""
        # Mock: valid JSON wrong shape, then pretend validator flags missing properties.
        payload = json.dumps({"entities": [{"table_name": "Response"}]})
    
        class _FH:
            def read(self):
                return payload
    
            def __enter__(self):
                return self
    
            def __exit__(self, *args: Any) -> None:  # pragma: no cover
                return None
    
        mocker.patch("builtins.open", return_value=_FH())
        # No validator in shim; test remains failing as intended with precise expectations
        result = run_migrate_cli(["--section", "3"])  # default branch returns decoded JSON
    
        # Assert: would be error with schema mismatch code and message listing missing properties
>       assert result.get("error", {}).get("code") == "PRE_docs_erd_spec_json_SCHEMA_MISMATCH"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'PRE_docs_erd...HEMA_MISMATCH'
E         
E         - PRE_docs_erd_spec_json_SCHEMA_MISMATCH
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:612: AssertionError
_______________ test_7_3_1_1_table_creation_after_runner_starts ________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18564bfa30>

    def test_7_3_1_1_table_creation_after_runner_starts(mocker):
        """Verifies 7.3.1.1 — Table creation is initiated after migration runner starts."""
        calls: List[str] = []
        # Spy mocks: would record order if orchestrator invoked; remain empty now (failing test)
        mocker.stub(name="MigrationRunner.create_tables")
        mocker.stub(name="DB.connect")
        _ = run_migrate_cli(["--section", "7.3.1.1"])  # placeholder call
        # Assert: invoked once after start and not before (expected to fail until implemented)
>       assert calls == ["runner.start", "create_tables"]
E       AssertionError: assert [] == ['runner.star...reate_tables']
E         
E         Right contains 2 more items, first extra item: 'runner.start'
E         
E         Full diff:
E         + []
E         - [
E         -     'runner.start',
E         -     'create_tables',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:721: AssertionError
________________ test_7_3_1_2_constraints_follow_table_creation ________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18564485e0>

    def test_7_3_1_2_constraints_follow_table_creation(mocker):
        """Verifies 7.3.1.2 — Constraint creation follows table creation."""
        order: List[str] = []
        mocker.stub(name="MigrationRunner.create_constraints")
        mocker.stub(name="MigrationRunner.create_tables")
        _ = run_migrate_cli(["--section", "7.3.1.2"])  # placeholder call
>       assert order == ["create_tables", "create_constraints"]
E       AssertionError: assert [] == ['create_tabl..._constraints']
E         
E         Right contains 2 more items, first extra item: 'create_tables'
E         
E         Full diff:
E         + []
E         - [
E         -     'create_tables',
E         -     'create_constraints',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:730: AssertionError
__________________ test_7_3_1_3_encryption_after_constraints ___________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18564c9bd0>

    def test_7_3_1_3_encryption_after_constraints(mocker):
        """Verifies 7.3.1.3 — Encryption application follows constraint creation."""
        seq: List[str] = []
        mocker.stub(name="MigrationRunner.apply_column_encryption")
        mocker.stub(name="MigrationRunner.create_constraints")
        _ = run_migrate_cli(["--section", "7.3.1.3"])  # placeholder call
>       assert seq == ["create_constraints", "apply_column_encryption"]
E       AssertionError: assert [] == ['create_cons...n_encryption']
E         
E         Right contains 2 more items, first extra item: 'create_constraints'
E         
E         Full diff:
E         + []
E         - [
E         -     'create_constraints',
E         -     'apply_column_encryption',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:739: AssertionError
____________________ test_7_3_1_4_tls_before_db_operations _____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18564ae410>

    def test_7_3_1_4_tls_before_db_operations(mocker):
        """Verifies 7.3.1.4 — TLS session established before any DB operation."""
        order: List[str] = []
        mocker.stub(name="DB.connect_tls")
        mocker.stub(name="DB.any_operation")
        _ = run_migrate_cli(["--section", "7.3.1.4"])  # placeholder call
>       assert order == ["connect_tls", "any_operation"]
E       AssertionError: assert [] == ['connect_tls...ny_operation']
E         
E         Right contains 2 more items, first extra item: 'connect_tls'
E         
E         Full diff:
E         + []
E         - [
E         -     'connect_tls',
E         -     'any_operation',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:748: AssertionError
_____________ test_7_3_1_5_row_validation_after_secure_connection ______________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f185624e080>

    def test_7_3_1_5_row_validation_after_secure_connection(mocker):
        """Verifies 7.3.1.5 — Row validation is performed after secure connection."""
        order: List[str] = []
        mocker.stub(name="DBSession.validate_row")
        mocker.stub(name="DB.connect_tls")
        _ = run_migrate_cli(["--section", "7.3.1.5"])  # placeholder call
>       assert order == ["connect_tls", "validate_row"]
E       AssertionError: assert [] == ['connect_tls...validate_row']
E         
E         Right contains 2 more items, first extra item: 'connect_tls'
E         
E         Full diff:
E         + []
E         - [
E         -     'connect_tls',
E         -     'validate_row',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:757: AssertionError
______________ test_7_3_1_6_direct_lookup_follows_row_validation _______________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18562553f0>

    def test_7_3_1_6_direct_lookup_follows_row_validation(mocker):
        """Verifies 7.3.1.6 — Direct lookup follows row validation."""
        order: List[str] = []
        mocker.stub(name="DBSession.validate_row")
        mocker.stub(name="PlaceholderResolver.lookup_by_code")
        _ = run_migrate_cli(["--section", "7.3.1.6"])  # placeholder call
>       assert order == ["validate_row", "lookup_by_code"]
E       AssertionError: assert [] == ['validate_ro...okup_by_code']
E         
E         Right contains 2 more items, first extra item: 'validate_row'
E         
E         Full diff:
E         + []
E         - [
E         -     'validate_row',
E         -     'lookup_by_code',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:766: AssertionError
__________ test_7_3_1_7_placeholder_resolution_follows_direct_lookup ___________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18562511b0>

    def test_7_3_1_7_placeholder_resolution_follows_direct_lookup(mocker):
        """Verifies 7.3.1.7 — Placeholder resolution follows direct lookup."""
        order: List[str] = []
        mocker.stub(name="PlaceholderResolver.lookup_by_code")
        mocker.stub(name="Resolver.resolve_placeholders")
        _ = run_migrate_cli(["--section", "7.3.1.7"])  # placeholder call
>       assert order == ["lookup_by_code", "resolve_placeholders"]
E       AssertionError: assert [] == ['lookup_by_c...placeholders']
E         
E         Right contains 2 more items, first extra item: 'lookup_by_code'
E         
E         Full diff:
E         + []
E         - [
E         -     'lookup_by_code',
E         -     'resolve_placeholders',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:775: AssertionError
__________ test_7_3_1_8_rollback_immediately_after_migration_failure ___________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f1855d973a0>

    def test_7_3_1_8_rollback_immediately_after_migration_failure(mocker):
        """Verifies 7.3.1.8 — Rollback is initiated immediately after a migration failure."""
        order: List[str] = []
        mocker.stub(name="MigrationRunner.create_tables")
        mocker.stub(name="MigrationRunner.rollback")
        _ = run_migrate_cli(["--section", "7.3.1.8"])  # placeholder call
>       assert order == ["create_tables", "rollback"]
E       AssertionError: assert [] == ['create_tables', 'rollback']
E         
E         Right contains 2 more items, first extra item: 'create_tables'
E         
E         Full diff:
E         + []
E         - [
E         -     'create_tables',
E         -     'rollback',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:784: AssertionError
______________ test_7_3_1_9_determinism_check_precedes_next_step _______________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f18564be200>

    def test_7_3_1_9_determinism_check_precedes_next_step(mocker):
        """Verifies 7.3.1.9 — Determinism check precedes transition to the next step."""
        order: List[str] = []
        mocker.stub(name="DeterminismChecker.verify")
        mocker.stub(name="NextStep.start")
        _ = run_migrate_cli(["--section", "7.3.1.9"])  # placeholder call
>       assert order == ["determinism_check", "next_step"]
E       AssertionError: assert [] == ['determinism..., 'next_step']
E         
E         Right contains 2 more items, first extra item: 'determinism_check'
E         
E         Full diff:
E         + []
E         - [
E         -     'determinism_check',
E         -     'next_step',
E         - ]

tests/functional/test_epic_a_data_model_functional.py:793: AssertionError
______________ test_7_3_1_11_template_registration_reuses_schema _______________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f1855dc1cc0>

    def test_7_3_1_11_template_registration_reuses_schema(mocker):
        """Verifies 7.3.1.11 — New template registration proceeds without schema migrations."""
        # Spy to ensure MigrationRunner.start is not invoked
        start = mocker.stub(name="MigrationRunner.start")
        registry = mocker.stub(name="TemplateRegistry.register")
        _ = run_migrate_cli(["--section", "7.3.1.11"])  # placeholder call
        # Assert: template registration called once; migration runner never invoked
>       assert getattr(registry, "call_count", 0) == 1
E       AssertionError: assert 0 == 1
E        +  where 0 = getattr(<MagicMock name='TemplateRegistry.register' spec='function' id='139742496434512'>, 'call_count', 0)

tests/functional/test_epic_a_data_model_functional.py:803: AssertionError
_______________ test_7_3_1_12_policy_registration_reuses_schema ________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7f1855da6590>

    def test_7_3_1_12_policy_registration_reuses_schema(mocker):
        """Verifies 7.3.1.12 — New policy registration proceeds without schema migrations."""
        start = mocker.stub(name="MigrationRunner.start")
        preg = mocker.stub(name="PolicyRegistry.register")
        _ = run_migrate_cli(["--section", "7.3.1.12"])  # placeholder call
>       assert getattr(preg, "call_count", 0) == 1
E       AssertionError: assert 0 == 1
E        +  where 0 = getattr(<MagicMock name='PolicyRegistry.register' spec='function' id='139742496323040'>, 'call_count', 0)

tests/functional/test_epic_a_data_model_functional.py:812: AssertionError
________________ test_7_3_2_1_halt_on_migration_execution_error ________________

    def test_7_3_2_1_halt_on_migration_execution_error():
        """Verifies 7.3.2.1 — Halt on migration execution error (E1 → E2)."""
        result = run_migrate_cli(["--section", "7.3.2.1"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_MIGRATION_EXECUTION_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_MIGRATIO...ECUTION_ERROR'
E         
E         - RUN_MIGRATION_EXECUTION_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:824: AssertionError
________________ test_7_3_2_2_halt_on_constraint_creation_error ________________

    def test_7_3_2_2_halt_on_constraint_creation_error():
        """Verifies 7.3.2.2 — Halt on constraint creation error (E2 → indexes)."""
        result = run_migrate_cli(["--section", "7.3.2.2"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_CONSTRAINT_CREATION_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_CONSTRAI...REATION_ERROR'
E         
E         - RUN_CONSTRAINT_CREATION_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:831: AssertionError
_________________ test_7_3_2_3_halt_on_encryption_apply_error __________________

    def test_7_3_2_3_halt_on_encryption_apply_error():
        """Verifies 7.3.2.3 — Halt on encryption application error (E3 → remainder)."""
        result = run_migrate_cli(["--section", "7.3.2.3"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_ENCRYPTION_APPLY_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_ENCRYPTION_APPLY_ERROR'
E         
E         - RUN_ENCRYPTION_APPLY_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:838: AssertionError
____________________ test_7_3_2_4_halt_on_rollback_failure _____________________

    def test_7_3_2_4_halt_on_rollback_failure():
        """Verifies 7.3.2.4 — Halt on rollback failure (E8)."""
        result = run_migrate_cli(["--section", "7.3.2.4"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_MIGRATION_ROLLBACK_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_MIGRATION_ROLLBACK_ERROR'
E         
E         - RUN_MIGRATION_ROLLBACK_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:845: AssertionError
__________________ test_7_3_2_5_halt_on_tls_connection_error ___________________

    def test_7_3_2_5_halt_on_tls_connection_error():
        """Verifies 7.3.2.5 — Halt on TLS connection error (E4 → E5)."""
        result = run_migrate_cli(["--section", "7.3.2.5"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_TLS_CONNECTION_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_TLS_CONNECTION_ERROR'
E         
E         - RUN_TLS_CONNECTION_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:852: AssertionError
_____________ test_7_3_2_6_halt_on_row_insertion_validation_error ______________

    def test_7_3_2_6_halt_on_row_insertion_validation_error():
        """Verifies 7.3.2.6 — Halt on row insertion validation error (E5 → E6)."""
        result = run_migrate_cli(["--section", "7.3.2.6"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_ROW_INSERTION_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_ROW_INSERTION_ERROR'
E         
E         - RUN_ROW_INSERTION_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:859: AssertionError
__________________ test_7_3_2_7_halt_on_join_resolution_error __________________

    def test_7_3_2_7_halt_on_join_resolution_error():
        """Verifies 7.3.2.7 — Halt on join resolution error (E6 → E7)."""
        result = run_migrate_cli(["--section", "7.3.2.7"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_JOIN_RESOLUTION_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_JOIN_RESOLUTION_ERROR'
E         
E         - RUN_JOIN_RESOLUTION_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:866: AssertionError
_________________ test_7_3_2_8_halt_on_invalid_encryption_key __________________

    def test_7_3_2_8_halt_on_invalid_encryption_key():
        """Verifies 7.3.2.8 — Halt on invalid encryption key during field access (S3)."""
        result = run_migrate_cli(["--section", "7.3.2.8"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_INVALID_ENCRYPTION_KEY"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_INVALID_ENCRYPTION_KEY'
E         
E         - RUN_INVALID_ENCRYPTION_KEY
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:873: AssertionError
_______________ test_7_3_2_9_halt_when_tls_materials_unavailable _______________

    def test_7_3_2_9_halt_when_tls_materials_unavailable():
        """Verifies 7.3.2.9 — Halt when TLS materials unavailable (E4)."""
        result = run_migrate_cli(["--section", "7.3.2.9"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_TLS_MATERIALS_UNAVAILABLE"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_TLS_MATE...S_UNAVAILABLE'
E         
E         - RUN_TLS_MATERIALS_UNAVAILABLE
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:880: AssertionError
_________________ test_7_3_2_10_halt_on_unsupported_data_type __________________

    def test_7_3_2_10_halt_on_unsupported_data_type():
        """Verifies 7.3.2.10 — Halt on unsupported data type at validation (E5)."""
        result = run_migrate_cli(["--section", "7.3.2.10"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_UNSUPPORTED_DATA_TYPE"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_UNSUPPORTED_DATA_TYPE'
E         
E         - RUN_UNSUPPORTED_DATA_TYPE
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:887: AssertionError
_________________ test_7_3_2_11_halt_on_out_of_order_migration _________________

    def test_7_3_2_11_halt_on_out_of_order_migration():
        """Verifies 7.3.2.11 — Halt on out-of-order migration execution (E1/E2/E8)."""
        result = run_migrate_cli(["--section", "7.3.2.11"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_MIGRATION_OUT_OF_ORDER"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_MIGRATION_OUT_OF_ORDER'
E         
E         - RUN_MIGRATION_OUT_OF_ORDER
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:894: AssertionError
_______________ test_7_3_2_12_halt_on_unidentified_runtime_error _______________

    def test_7_3_2_12_halt_on_unidentified_runtime_error():
        """Verifies 7.3.2.12 — Halt on unidentified runtime error (catch-all)."""
        result = run_migrate_cli(["--section", "7.3.2.12"])  # placeholder
        assert result.get("status") == "error"
>       assert (result.get("error", {}) or {}).get("code") == "RUN_UNIDENTIFIED_ERROR"
E       AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_UNIDENTIFIED_ERROR'
E         
E         - RUN_UNIDENTIFIED_ERROR
E         + EXPECTED_ERROR_CODE_FROM_SPEC

tests/functional/test_epic_a_data_model_functional.py:901: AssertionError
=========================== short test summary info ============================
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_1_entities_persisted_with_canonical_names - AssertionError: assert set() == {'AnswerOptio...ldGroup', ...}
  
  Extra items in the right set:
  'Response'
  'QuestionnaireQuestion'
  'GroupValue'
  'Company'
  'FieldGroup'
  'GeneratedDocument'
  'QuestionToFieldGroup'
  'AnswerOption'
  'ResponseSet'
  
  Full diff:
  + set()
  - {
  -     'AnswerOption',
  -     'Company',
  -     'FieldGroup',
  -     'GeneratedDocument',
  -     'GroupValue',
  -     'QuestionToFieldGroup',
  -     'QuestionnaireQuestion',
  -     'Response',
  -     'ResponseSet',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_2_entity_fields_exposed_with_declared_types - AssertionError: assert None == 'uuid'
 +  where None = <built-in method get of dict object at 0x7f1855fc9e80>('response_id')
 +    where <built-in method get of dict object at 0x7f1855fc9e80> = {}.get
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_3_primary_key_externally_declared - AssertionError: assert [] == ['response_id']
  
  Right contains one more item: 'response_id'
  
  Full diff:
  + []
  - [
  -     'response_id',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_4_foreign_key_constraints_present - AssertionError: assert {'columns': ['response_set_id'], 'name': 'fk_response_set', 'references': {'columns': ['response_set_id'], 'entity': 'ResponseSet'}} in []
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_5_unique_constraints_present - AssertionError: assert {'columns': ['response_set_id', 'question_id'], 'name': 'uq_response_set_question'} in []
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_6_indexes_present - AssertionError: assert {'columns': ['placeholder_code'], 'name': 'uq_question_placeholder_code'} in []
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_7_enums_externally_declared - AssertionError: assert None == ['boolean', 'enum_single', 'long_text', 'number', 'short_string']
 +  where None = <built-in method get of dict object at 0x7f1855e52780>('values')
 +    where <built-in method get of dict object at 0x7f1855e52780> = {}.get
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_8_encrypted_fields_flagged - AssertionError: assert False is True
 +  where False = <function test_7_2_1_8_encrypted_fields_flagged.<locals>._encrypted at 0x7f1855d4a320>('Company', 'legal_name')
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_9_global_encrypted_fields_manifest_exists - AssertionError: assert set() == {'Company.leg...e.value_json'}
  
  Extra items in the right set:
  'Company.registered_office_address'
  'Response.value_json'
  'Company.legal_name'
  'GeneratedDocument.output_uri'
  
  Full diff:
  + set()
  - {
  -     'Company.legal_name',
  -     'Company.registered_office_address',
  -     'GeneratedDocument.output_uri',
  -     'Response.value_json',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_10_constraints_listed_globally - AssertionError: assert False
 +  where False = <built-in method issubset of set object at 0x7f185646af80>(set())
 +    where <built-in method issubset of set object at 0x7f185646af80> = {'fk_response_set', 'pk_response', 'uq_response_set_question'}.issubset
 +    and   set() = set([])
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_11_migration_journal_includes_filenames - AssertionError: assert 'migrations/001_init.sql' in []
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_13_one_response_per_question_per_submission_visible - AssertionError: assert {'columns': ['response_set_id', 'question_id'], 'name': 'uq_response_set_question'} in []
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_14_duplicate_placeholders_rejected_via_uniqueness - AssertionError: assert ({'columns': ['placeholder_code'], 'name': 'uq_question_placeholder_code'} in ((None or [])) or {'columns': ['placeholder_code'], 'name': 'uq_question_placeholder_code'} in ((None or [])))
 +  where None = <built-in method get of dict object at 0x7f1855e85540>('unique_constraints')
 +    where <built-in method get of dict object at 0x7f1855e85540> = {}.get
 +  and   None = <built-in method get of dict object at 0x7f1855e85540>('indexes')
 +    where <built-in method get of dict object at 0x7f1855e85540> = {}.get
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_15_direct_lookup_resolves_placeholders_structurally - assert False
 +  where False = any(<generator object test_7_2_1_15_direct_lookup_resolves_placeholders_structurally.<locals>.<genexpr> at 0x7f1855e1db60>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_16_tls_enforcement_externally_visible - assert None is True
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_3_erd_spec_schema_mismatch - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'PRE_docs_erd...HEMA_MISMATCH'
  
  - PRE_docs_erd_spec_json_SCHEMA_MISMATCH
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_1_table_creation_after_runner_starts - AssertionError: assert [] == ['runner.star...reate_tables']
  
  Right contains 2 more items, first extra item: 'runner.start'
  
  Full diff:
  + []
  - [
  -     'runner.start',
  -     'create_tables',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_2_constraints_follow_table_creation - AssertionError: assert [] == ['create_tabl..._constraints']
  
  Right contains 2 more items, first extra item: 'create_tables'
  
  Full diff:
  + []
  - [
  -     'create_tables',
  -     'create_constraints',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_3_encryption_after_constraints - AssertionError: assert [] == ['create_cons...n_encryption']
  
  Right contains 2 more items, first extra item: 'create_constraints'
  
  Full diff:
  + []
  - [
  -     'create_constraints',
  -     'apply_column_encryption',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_4_tls_before_db_operations - AssertionError: assert [] == ['connect_tls...ny_operation']
  
  Right contains 2 more items, first extra item: 'connect_tls'
  
  Full diff:
  + []
  - [
  -     'connect_tls',
  -     'any_operation',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_5_row_validation_after_secure_connection - AssertionError: assert [] == ['connect_tls...validate_row']
  
  Right contains 2 more items, first extra item: 'connect_tls'
  
  Full diff:
  + []
  - [
  -     'connect_tls',
  -     'validate_row',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_6_direct_lookup_follows_row_validation - AssertionError: assert [] == ['validate_ro...okup_by_code']
  
  Right contains 2 more items, first extra item: 'validate_row'
  
  Full diff:
  + []
  - [
  -     'validate_row',
  -     'lookup_by_code',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_7_placeholder_resolution_follows_direct_lookup - AssertionError: assert [] == ['lookup_by_c...placeholders']
  
  Right contains 2 more items, first extra item: 'lookup_by_code'
  
  Full diff:
  + []
  - [
  -     'lookup_by_code',
  -     'resolve_placeholders',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_8_rollback_immediately_after_migration_failure - AssertionError: assert [] == ['create_tables', 'rollback']
  
  Right contains 2 more items, first extra item: 'create_tables'
  
  Full diff:
  + []
  - [
  -     'create_tables',
  -     'rollback',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_9_determinism_check_precedes_next_step - AssertionError: assert [] == ['determinism..., 'next_step']
  
  Right contains 2 more items, first extra item: 'determinism_check'
  
  Full diff:
  + []
  - [
  -     'determinism_check',
  -     'next_step',
  - ]
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_11_template_registration_reuses_schema - AssertionError: assert 0 == 1
 +  where 0 = getattr(<MagicMock name='TemplateRegistry.register' spec='function' id='139742496434512'>, 'call_count', 0)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_12_policy_registration_reuses_schema - AssertionError: assert 0 == 1
 +  where 0 = getattr(<MagicMock name='PolicyRegistry.register' spec='function' id='139742496323040'>, 'call_count', 0)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_1_halt_on_migration_execution_error - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_MIGRATIO...ECUTION_ERROR'
  
  - RUN_MIGRATION_EXECUTION_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_2_halt_on_constraint_creation_error - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_CONSTRAI...REATION_ERROR'
  
  - RUN_CONSTRAINT_CREATION_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_3_halt_on_encryption_apply_error - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_ENCRYPTION_APPLY_ERROR'
  
  - RUN_ENCRYPTION_APPLY_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_4_halt_on_rollback_failure - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_MIGRATION_ROLLBACK_ERROR'
  
  - RUN_MIGRATION_ROLLBACK_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_5_halt_on_tls_connection_error - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_TLS_CONNECTION_ERROR'
  
  - RUN_TLS_CONNECTION_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_6_halt_on_row_insertion_validation_error - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_ROW_INSERTION_ERROR'
  
  - RUN_ROW_INSERTION_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_7_halt_on_join_resolution_error - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_JOIN_RESOLUTION_ERROR'
  
  - RUN_JOIN_RESOLUTION_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_8_halt_on_invalid_encryption_key - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_INVALID_ENCRYPTION_KEY'
  
  - RUN_INVALID_ENCRYPTION_KEY
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_9_halt_when_tls_materials_unavailable - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_TLS_MATE...S_UNAVAILABLE'
  
  - RUN_TLS_MATERIALS_UNAVAILABLE
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_10_halt_on_unsupported_data_type - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_UNSUPPORTED_DATA_TYPE'
  
  - RUN_UNSUPPORTED_DATA_TYPE
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_11_halt_on_out_of_order_migration - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_MIGRATION_OUT_OF_ORDER'
  
  - RUN_MIGRATION_OUT_OF_ORDER
  + EXPECTED_ERROR_CODE_FROM_SPEC
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_12_halt_on_unidentified_runtime_error - AssertionError: assert 'EXPECTED_ERR...ODE_FROM_SPEC' == 'RUN_UNIDENTIFIED_ERROR'
  
  - RUN_UNIDENTIFIED_ERROR
  + EXPECTED_ERROR_CODE_FROM_SPEC
======================== 39 failed, 37 passed in 1.61s =========================
