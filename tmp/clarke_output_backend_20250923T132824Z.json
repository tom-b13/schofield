{
  "clarke_review": {
    "acceptable_as_is": [
      "7.2.1.1",
      "7.2.1.2",
      "7.2.1.3",
      "7.2.1.4",
      "7.2.1.5",
      "7.2.1.6",
      "7.2.1.7",
      "7.2.1.8",
      "7.2.1.9",
      "7.2.1.10",
      "7.2.1.11",
      "7.2.1.12",
      "7.2.1.13",
      "7.2.1.14",
      "7.2.1.15",
      "7.2.1.16",
      "7.2.1.17",
      "7.2.2.1",
      "7.2.2.2",
      "7.2.2.3",
      "7.2.2.4",
      "7.2.2.5",
      "7.2.2.6",
      "7.2.2.7",
      "7.2.2.8",
      "7.2.2.9",
      "7.2.2.22",
      "7.2.2.23",
      "7.2.2.24",
      "7.2.2.25",
      "7.2.2.26",
      "7.2.2.27",
      "7.2.2.28",
      "7.2.2.29",
      "7.2.2.30",
      "7.2.2.31",
      "7.2.2.32",
      "7.2.2.33",
      "7.2.2.34",
      "7.2.2.35",
      "7.2.2.36",
      "7.2.2.37",
      "7.2.2.38",
      "7.2.2.39",
      "7.2.2.40",
      "7.2.2.41",
      "7.2.2.42",
      "7.2.2.43",
      "7.2.2.44",
      "7.2.2.45",
      "7.2.2.46",
      "7.2.2.47",
      "7.2.2.48",
      "7.2.2.49",
      "7.2.2.50",
      "7.2.2.51",
      "7.2.2.52",
      "7.2.2.53",
      "7.2.2.54",
      "7.2.2.55",
      "7.2.2.56",
      "7.2.2.57",
      "7.2.2.58",
      "7.2.2.59",
      "7.2.2.60",
      "7.2.2.61",
      "7.2.2.62",
      "7.2.2.63",
      "7.2.2.64",
      "7.2.2.65",
      "7.2.2.66",
      "7.2.2.67",
      "7.2.2.68",
      "7.2.2.69",
      "7.2.2.70",
      "7.2.2.71",
      "7.2.2.72",
      "7.2.2.73",
      "7.2.2.74",
      "7.2.2.75",
      "7.2.2.76",
      "7.2.2.77",
      "7.2.2.78",
      "7.2.2.79",
      "7.2.2.80",
      "7.2.2.81",
      "7.2.2.82",
      "7.2.2.83",
      "7.2.2.84",
      "7.2.2.85",
      "7.2.2.86",
      "7.2.2.87",
      "7.2.2.88",
      "7.2.2.89",
      "7.2.2.90",
      "7.2.2.91",
      "7.2.2.92",
      "7.2.2.93",
      "7.2.2.94",
      "7.2.2.95",
      "7.2.2.96",
      "7.2.2.97",
      "7.2.2.98",
      "7.2.2.99",
      "7.2.2.100",
      "7.2.2.101",
      "7.2.2.102",
      "7.2.2.103",
      "7.2.2.104",
      "7.2.2.105",
      "7.2.2.106",
      "7.2.2.107",
      "7.2.2.108",
      "7.2.2.109",
      "7.2.2.110",
      "7.2.2.111",
      "7.2.2.112",
      "7.2.2.113",
      "7.2.2.114",
      "7.2.2.115",
      "7.2.2.116",
      "7.2.2.117",
      "7.2.2.118",
      "7.2.2.119",
      "7.2.2.120",
      "7.2.2.121",
      "7.2.2.122",
      "7.2.2.123",
      "7.2.2.124",
      "7.2.2.125",
      "7.2.2.126",
      "7.3.2.1",
      "7.3.2.2",
      "7.3.2.3",
      "7.3.2.4",
      "7.3.2.5",
      "7.3.2.6",
      "7.3.2.7",
      "7.3.2.8",
      "7.3.2.9",
      "7.3.2.10",
      "7.3.2.11",
      "7.3.2.12",
      "7.3.2.13",
      "7.3.2.14",
      "7.3.2.15",
      "7.3.2.16",
      "7.3.2.17",
      "7.3.2.18",
      "7.3.2.19",
      "7.3.2.20"
    ],
    "needs_improvement": [
      "7.2.2.10",
      "7.2.2.11",
      "7.2.2.12",
      "7.2.2.13",
      "7.2.2.14",
      "7.2.2.15",
      "7.2.2.16",
      "7.2.2.17",
      "7.2.2.18",
      "7.2.2.19",
      "7.2.2.20",
      "7.2.2.21",
      "7.3.1.1",
      "7.3.1.2",
      "7.3.1.3",
      "7.3.1.4",
      "7.3.1.5",
      "7.3.1.6",
      "7.3.1.7",
      "7.3.1.8",
      "7.3.1.9",
      "7.3.1.10",
      "7.3.1.11",
      "7.3.1.12"
    ],
    "required_missing_tests": [],
    "suspicious_passing_tests": [],
    "explicit_actions_for_ada": [
      {
        "test_id": "7.2.2.10",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_10_error_mode_matches_spec to patch open('migrations/001_init.sql','r',encoding='utf-8') to raise FileNotFoundError, then assert exit_code == 1 and that error.message mentions the exact path migrations/001_init.sql along with missing/unreadable wording; keep error.code exact.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.10 — Error Mode: PRE_migrations_001_init_sql_MISSING_OR_UNREADABLE; test currently only asserts status/code in the generated path."
      },
      {
        "test_id": "7.2.2.11",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_11_error_mode_matches_spec to simulate invalid SQL by returning content 'INVALID SQL;' from open('migrations/001_init.sql') and assert exit_code == 1 plus error.message includes SQL parse error wording.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.11 — Error Mode: PRE_migrations_001_init_sql_INVALID_SQL; add boundary mock and message assertion."
      },
      {
        "test_id": "7.2.2.12",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_12_error_mode_matches_spec to mock the executor invoked for 001 applying to raise a runtime error; assert exit_code == 1, error.message contains the executor error text, and (if callable hooks exist) assert no subsequent migration steps are invoked.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.12 — Error Mode: PRE_migrations_001_init_sql_EXECUTION_ERROR; halting semantics must be asserted."
      },
      {
        "test_id": "7.2.2.13",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_13_error_mode_matches_spec to patch open('migrations/002_constraints.sql') to raise FileNotFoundError and assert exit_code == 1 and error.message references migrations/002_constraints.sql.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.13 — PRE_migrations_002_constraints_sql_MISSING_OR_UNREADABLE; require path-specific message."
      },
      {
        "test_id": "7.2.2.14",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_14_error_mode_matches_spec to return 'INVALID SQL;' for 002 constraints file and assert exit_code == 1 plus message contains SQL parse error details; ensure no index migration steps are asserted as invoked after failure if hooks exist.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.14 — PRE_migrations_002_constraints_sql_INVALID_SQL; add message and halting assertions."
      },
      {
        "test_id": "7.2.2.15",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_15_error_mode_matches_spec to mock execution of 002 constraints to raise an error; assert exit_code == 1, error.message contains the raised error text, and no subsequent steps are invoked.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.15 — PRE_migrations_002_constraints_sql_EXECUTION_ERROR; requires halting/assertions."
      },
      {
        "test_id": "7.2.2.16",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_16_error_mode_matches_spec to patch open('migrations/003_indexes.sql') to raise FileNotFoundError; assert exit_code == 1 and the error.message includes the full path string migrations/003_indexes.sql.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.16 — PRE_migrations_003_indexes_sql_MISSING_OR_UNREADABLE; path detail must be asserted."
      },
      {
        "test_id": "7.2.2.17",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_17_error_mode_matches_spec to simulate invalid SQL content for 003 indexes; assert exit_code == 1 and error.message includes SQL parser error wording; verify no further steps are taken if hooks are available.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.17 — PRE_migrations_003_indexes_sql_INVALID_SQL; add robust assertions."
      },
      {
        "test_id": "7.2.2.18",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_18_error_mode_matches_spec to mock executor for 003 indexes execution raising an error; assert exit_code == 1 and error.message contains the executor error; ensure the pipeline halts (no subsequent steps).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.18 — PRE_migrations_003_indexes_sql_EXECUTION_ERROR; halting semantics required."
      },
      {
        "test_id": "7.2.2.19",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_19_error_mode_matches_spec to patch open('migrations/004_rollbacks.sql') to raise FileNotFoundError; assert exit_code == 1 and message cites migrations/004_rollbacks.sql explicitly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.19 — PRE_migrations_004_rollbacks_sql_MISSING_OR_UNREADABLE; include path in message."
      },
      {
        "test_id": "7.2.2.20",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_20_error_mode_matches_spec to simulate invalid SQL content in 004 rollbacks; assert exit_code == 1 and message includes SQL syntax error details; if hooks exist, assert no further rollbacks attempted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.20 — PRE_migrations_004_rollbacks_sql_INVALID_SQL; needs detailed assertions."
      },
      {
        "test_id": "7.2.2.21",
        "category": "needs_improvement",
        "instruction": "Update generated test_7_2_2_21_error_mode_matches_spec to mock executor raising during 004 rollbacks execution; assert exit_code == 1 and error.message includes the raised error; if possible, assert that only the first failing rollback was attempted.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.21 — PRE_migrations_004_rollbacks_sql_EXECUTION_ERROR; halting and single-attempt behavior must be asserted."
      },
      {
        "test_id": "7.3.1.1",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_1_table_creation_after_runner_starts to stub MigrationRunner.start and MigrationRunner.create_tables with side-effects that append to a shared 'order' list and then assert order == ['runner.start','create_tables']; also move this test module to tests/unit/ to conform to structure.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "AGENTS.md §4 places contractual/behavioural tests under /tests/unit/; current test only checks an empty 'calls' list without capturing order."
      },
      {
        "test_id": "7.3.1.2",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_2_constraints_follow_table_creation to stub create_tables and create_constraints to append to 'order', then assert ['create_tables','create_constraints']; ensure single-line docstring.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Current test initializes 'order' but never records calls; AGENTS.md §8 requires concise, intent-only single-line docstrings."
      },
      {
        "test_id": "7.3.1.3",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_3_encryption_after_constraints to capture call sequence ['create_constraints','apply_column_encryption'] via side-effects; assert exact order and no extras.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.3 demands ordering; current test never records any sequence."
      },
      {
        "test_id": "7.3.1.4",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_4_tls_before_db_operations to stub DB.connect_tls and DB.any_operation to append to 'order' and assert ['connect_tls','any_operation']; add call-count assertions.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.4 requires TLS established before any DB op; current test lacks real sequence capture."
      },
      {
        "test_id": "7.3.1.5",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_5_row_validation_after_secure_connection to assert connect_tls happens before DBSession.validate_row using 'order' side-effects; add exact call-count checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Current test uses 'order' but never appends; assertions are not meaningful."
      },
      {
        "test_id": "7.3.1.6",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_6_direct_lookup_follows_row_validation to stub validate_row and PlaceholderResolver.lookup_by_code to append and assert ['validate_row','lookup_by_code'] with exact call counts.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec requires sequence; present test has no recorded calls."
      },
      {
        "test_id": "7.3.1.7",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_7_placeholder_resolution_follows_direct_lookup to stub PlaceholderResolver.lookup_by_code and Resolver.resolve_placeholders to append to 'order' and assert ['lookup_by_code','resolve_placeholders'] with counts.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Sequence assertions are currently placeholders with no spy behavior."
      },
      {
        "test_id": "7.3.1.8",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_8_rollback_immediately_after_migration_failure to stub MigrationRunner.create_tables and MigrationRunner.rollback to append to 'order' and assert ['create_tables','rollback']; assert rollback called exactly once.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec mandates immediate rollback on failure; current test doesn't capture calls."
      },
      {
        "test_id": "7.3.1.9",
        "category": "needs_improvement",
        "instruction": "Rewrite test_7_3_1_9_determinism_check_precedes_next_step to stub DeterminismChecker.verify and NextStep.start to append to 'order' and assert ['determinism_check','next_step']; add call-count checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "No actual sequence capture; assertions are placeholders."
      },
      {
        "test_id": "7.3.1.10",
        "category": "needs_improvement",
        "instruction": "Replace test_7_3_1_10_reserved_noop_marker with a single-line docstring and mark it as pytest.xfail(reason='Reserved section, no runtime behaviour in this epic') to document intentional absence without asserting success/failure semantics.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "AGENTS.md §8 requires single-line docstrings; current test asserts status == 'success' which is not part of spec for a reserved item."
      },
      {
        "test_id": "7.3.1.11",
        "category": "needs_improvement",
        "instruction": "Strengthen test_7_3_1_11_template_registration_reuses_schema by asserting TemplateRegistry.register called exactly once with expected args and MigrationRunner.start not called; keep docstring single-line.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.11 requires no schema migrations; counts should be explicit and docstring single-line."
      },
      {
        "test_id": "7.3.1.12",
        "category": "needs_improvement",
        "instruction": "Strengthen test_7_3_1_12_policy_registration_reuses_schema by asserting PolicyRegistry.register called exactly once and MigrationRunner.start not called; convert to single-line docstring.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.3.1.12 mirrors 7.3.1.11; enforce explicit call counts and docstring format."
      }
    ]
  },
  "final_decision": {
    "continue": false
  }
}