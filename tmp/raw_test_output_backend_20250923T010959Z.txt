============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/codex/schofield
plugins: mock-3.14.1, anyio-4.9.0, cov-6.2.1, langsmith-0.4.1
collected 27 items

tests/architectural/test_epic_a_data_model_architecture.py .FFFF...FFFFF [ 48%]
FFFFF..F.FFFFF                                                           [100%]

=================================== FAILURES ===================================
_______________ test_entities_declare_explicit_field_collections _______________

    def test_entities_declare_explicit_field_collections() -> None:
        """Verifies 7.1.2 — each entity declares fields[] with name and type."""
        erd = _read_json(DOCS / "erd_spec.json")
        entities = erd.get("entities")
        assert isinstance(entities, list), "`entities` must be an array"
    
        for i, ent in enumerate(entities):
            fields = ent.get("fields")
>           assert isinstance(fields, list), f"entities[{i}].fields must be an array"
E           AssertionError: entities[0].fields must be an array
E           assert False
E            +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)

tests/architectural/test_epic_a_data_model_architecture.py:137: AssertionError
________________ test_entity_field_names_are_unique_per_entity _________________

    def test_entity_field_names_are_unique_per_entity() -> None:
        """Verifies 7.1.3 — no duplicate field names within an entity."""
        erd = _read_json(DOCS / "erd_spec.json")
        for i, ent in enumerate(erd.get("entities", [])):
>           assert isinstance(ent.get("fields"), list), f"entities[{i}].fields must be an array"
E           AssertionError: entities[0].fields must be an array
E           assert False
E            +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)
E            +    where {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'} = <built-in method get of dict object at 0x7ff4203711c0>('fields')
E            +      where <built-in method get of dict object at 0x7ff4203711c0> = {'fields': {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, 'name': 'Company', 'pk': {'company_id': 'uuid:not_null'}}.get

tests/architectural/test_epic_a_data_model_architecture.py:150: AssertionError
_________________ test_migration_column_types_match_erd_types __________________

    def test_migration_column_types_match_erd_types() -> None:
        """Verifies 7.1.4 — migration column types correspond to ERD field types."""
        erd = _read_json(DOCS / "erd_spec.json")
        sql_path = MIGRATIONS / "001_init.sql"
        assert sql_path.exists(), "migrations/001_init.sql must exist"
        sql = _read_text(sql_path)
        tables = _extract_create_table_columns(sql)
    
        for ent in erd.get("entities", []):
            assert isinstance(ent.get("name"), str) and ent["name"].strip(), "Entity must have name"
>           assert isinstance(ent.get("fields"), list), f"Entity {ent.get('name')} must declare fields[]"
E           AssertionError: Entity Company must declare fields[]
E           assert False
E            +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)
E            +    where {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'} = <built-in method get of dict object at 0x7ff42033b680>('fields')
E            +      where <built-in method get of dict object at 0x7ff42033b680> = {'fields': {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, 'name': 'Company', 'pk': {'company_id': 'uuid:not_null'}}.get

tests/architectural/test_epic_a_data_model_architecture.py:167: AssertionError
_______________ test_sensitive_fields_include_encrypted_boolean ________________

    def test_sensitive_fields_include_encrypted_boolean() -> None:
        """Verifies 7.1.5 — sensitive fields include `encrypted` boolean and values are correct."""
        erd = _read_json(DOCS / "erd_spec.json")
        for ent in erd.get("entities", []):
            fields = ent.get("fields")
>           assert isinstance(fields, list), "fields must be an array of objects"
E           AssertionError: fields must be an array of objects
E           assert False
E            +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)

tests/architectural/test_epic_a_data_model_architecture.py:189: AssertionError
_______________ test_indexes_declared_and_created_by_migrations ________________

    def test_indexes_declared_and_created_by_migrations() -> None:
        """Verifies 7.1.9 — indexes have name and columns and exist in 003."""
        erd = _read_json(DOCS / "erd_spec.json")
        sql = _read_text(MIGRATIONS / "003_indexes.sql")
        create_index_cols = [
            (m.group(1).lower(), m.group(2).lower(), m.group(3).replace(" ", "").lower())
            for m in re.finditer(
                r"CREATE\s+INDEX\s+(?:IF\s+NOT\s+EXISTS\s+)?(\w+)\s+ON\s+(\w+)\s*\(([^)]*)\);",
                sql, re.IGNORECASE)
        ]
        for ent in erd.get("entities", []):
            for ix in ent.get("indexes", []):
>               assert isinstance(ix.get("name"), str) and ix["name"].strip(), "Index must have name"
E               AttributeError: 'str' object has no attribute 'get'

tests/architectural/test_epic_a_data_model_architecture.py:272: AttributeError
_________________ test_enums_centralised_with_names_and_values _________________

    def test_enums_centralised_with_names_and_values() -> None:
        """Verifies 7.1.10 — ERD includes enums[] with name and values, and SQL defines them."""
        erd = _read_json(DOCS / "erd_spec.json")
>       assert isinstance(erd.get("enums"), list) and erd["enums"], "ERD must include enums[] with entries"
E       AssertionError: ERD must include enums[] with entries
E       assert (False)
E        +  where False = isinstance(None, list)
E        +    where None = <built-in method get of dict object at 0x7ff4203a0ec0>('enums')
E        +      where <built-in method get of dict object at 0x7ff4203a0ec0> = {'conventions': {'db_case': 'snake_case', 'entities_case': 'CamelCase', 'enums': {'answer_kind': ['boolean', 'enum_sin...r_code with partial unique index.', 'answer_kind includes enum_single for single-choice questions.'], 'version': '0.3'}.get

tests/architectural/test_epic_a_data_model_architecture.py:285: AssertionError
_________________ test_global_encrypted_field_manifest_exists __________________

    def test_global_encrypted_field_manifest_exists() -> None:
        """Verifies 7.1.11 — encrypted_fields[] manifest exists and is complete."""
        erd = _read_json(DOCS / "erd_spec.json")
        manifest = erd.get("encrypted_fields")
>       assert isinstance(manifest, list), "encrypted_fields[] manifest must exist"
E       AssertionError: encrypted_fields[] manifest must exist
E       assert False
E        +  where False = isinstance(None, list)

tests/architectural/test_epic_a_data_model_architecture.py:305: AssertionError
___________________ test_global_constraints_manifest_exists ____________________

    def test_global_constraints_manifest_exists() -> None:
        """Verifies 7.1.12 — constraints_applied[] enumerates all applied constraints."""
        erd = _read_json(DOCS / "erd_spec.json")
        manifest = erd.get("constraints_applied")
>       assert isinstance(manifest, list), "constraints_applied[] must exist"
E       AssertionError: constraints_applied[] must exist
E       assert False
E        +  where False = isinstance(None, list)

tests/architectural/test_epic_a_data_model_architecture.py:321: AssertionError
__________________ test_migration_journal_structure_is_stable __________________

    def test_migration_journal_structure_is_stable() -> None:
        """Verifies 7.1.13 — journal file exists and entries have filename/applied_at."""
        # Allow multiple possible locations; require at least one present
        candidates = [MIGRATIONS / "_journal.json", Path("_journal.json")]
        present = [p for p in candidates if p.exists()]
>       assert present, "Migration journal artefact must exist (e.g., migrations/_journal.json)"
E       AssertionError: Migration journal artefact must exist (e.g., migrations/_journal.json)
E       assert []

tests/architectural/test_epic_a_data_model_architecture.py:331: AssertionError
______________ test_collections_are_in_deterministic_sorted_order ______________

    def test_collections_are_in_deterministic_sorted_order() -> None:
        """Verifies 7.1.14 — collections are deterministically ordered in exports."""
        erd = _read_json(DOCS / "erd_spec.json")
        mermaid = _read_text(DOCS / "erd_mermaid.md")
        rel_rows = _read_csv_rows(DOCS / "erd_relationships.csv")
    
        # Entities sorted by canonical name in CSV export header sections
        entities = [e.get("name", "") for e in erd.get("entities", [])]
>       assert entities == sorted(entities), "ERD entities should be sorted by name deterministically"
E       AssertionError: ERD entities should be sorted by name deterministically
E       assert ['Company', '...onseSet', ...] == ['AnswerOptio...ldGroup', ...]
E         
E         At index 0 diff: 'Company' != 'AnswerOption'
E         
E         Full diff:
E           [
E         +     'Company',
E         +     'QuestionnaireQuestion',
E               'AnswerOption',
E         -     'Company',
E               'FieldGroup',
E         +     'QuestionToFieldGroup',
E         +     'ResponseSet',
E         +     'Response',
E         +     'GroupValue',
E               'GeneratedDocument',
E         -     'GroupValue',
E         -     'QuestionToFieldGroup',
E         -     'QuestionnaireQuestion',
E         -     'Response',
E         -     'ResponseSet',
E           ]

tests/architectural/test_epic_a_data_model_architecture.py:353: AssertionError
________________ test_placeholder_lookup_artifacts_are_present _________________

    def test_placeholder_lookup_artifacts_are_present() -> None:
        """Verifies 7.1.15 — direct lookup placeholder artifacts exist and no legacy join artefacts."""
        erd = _read_json(DOCS / "erd_spec.json")
        # ERD includes QuestionnaireQuestion with optional placeholder_code field
        qq = next((e for e in erd.get("entities", []) if e.get("name") == "QuestionnaireQuestion"), None)
        assert qq is not None, "ERD must include entity QuestionnaireQuestion"
        fields = {f.get("name") for f in (qq.get("fields") or []) if isinstance(f, dict)}
>       assert "placeholder_code" in fields, "QuestionnaireQuestion must include optional placeholder_code field"
E       AssertionError: QuestionnaireQuestion must include optional placeholder_code field
E       assert 'placeholder_code' in set()

tests/architectural/test_epic_a_data_model_architecture.py:370: AssertionError
__________ test_structural_constraints_for_responses_and_placeholders __________

    def test_structural_constraints_for_responses_and_placeholders() -> None:
        """Verifies 7.1.16 — one-response-per-question-per-submission and no duplicate placeholders."""
        erd = _read_json(DOCS / "erd_spec.json")
        sql = _read_text(MIGRATIONS / "002_constraints.sql")
    
        # ERD defines composite unique on Response(response_set_id, question_id)
        response = next((e for e in erd.get("entities", []) if e.get("name") == "Response"), None)
        assert response is not None, "ERD must include entity Response"
        uniques = response.get("unique") or []
>       assert any(u.get("columns") == ["response_set_id", "question_id"] for u in uniques if isinstance(u, dict)), (
            "ERD must define composite unique on Response(response_set_id, question_id)"
        )
E       AssertionError: ERD must define composite unique on Response(response_set_id, question_id)
E       assert False
E        +  where False = any(<generator object test_structural_constraints_for_responses_and_placeholders.<locals>.<genexpr> at 0x7ff4202e3760>)

tests/architectural/test_epic_a_data_model_architecture.py:397: AssertionError
________________ test_tls_requirement_exposed_as_configuration _________________

    def test_tls_requirement_exposed_as_configuration() -> None:
        """Verifies 7.1.17 — configuration key for TLS enforcement exists and is boolean."""
        key_path = CONFIG / "database.ssl.required"
>       assert key_path.exists(), "config/database.ssl.required must exist"
E       AssertionError: config/database.ssl.required must exist
E       assert False
E        +  where False = exists()
E        +    where exists = PosixPath('config/database.ssl.required').exists

tests/architectural/test_epic_a_data_model_architecture.py:417: AssertionError
_________________ test_column_level_encryption_is_configurable _________________

    def test_column_level_encryption_is_configurable() -> None:
        """Verifies 7.1.18 — encryption.mode allowed values; kms.key_alias required when mode includes column."""
        mode_path = CONFIG / "encryption.mode"
>       assert mode_path.exists(), "config/encryption.mode must exist"
E       AssertionError: config/encryption.mode must exist
E       assert False
E        +  where False = exists()
E        +    where exists = PosixPath('config/encryption.mode').exists

tests/architectural/test_epic_a_data_model_architecture.py:426: AssertionError
_________________ test_generated_document_storage_is_modelled __________________

    def test_generated_document_storage_is_modelled() -> None:
        """Verifies 7.1.21 — model contains generated document entity with id and output_uri; DDL present."""
        erd = _read_json(DOCS / "erd_spec.json")
        gen = next((e for e in erd.get("entities", []) if e.get("name") == "GeneratedDocument"), None)
        assert gen is not None, "ERD must include entity GeneratedDocument"
        fields = {f.get("name") for f in (gen.get("fields") or []) if isinstance(f, dict)}
>       assert "generated_document_id" in fields or "id" in fields, "GeneratedDocument must have stable identifier field"
E       AssertionError: GeneratedDocument must have stable identifier field
E       assert ('generated_document_id' in set() or 'id' in set())

tests/architectural/test_epic_a_data_model_architecture.py:465: AssertionError
________________ test_encrypted_fields_trace_to_global_manifest ________________

    def test_encrypted_fields_trace_to_global_manifest() -> None:
        """Verifies 7.1.25 — Entity.field set for encrypted columns equals encrypted_fields[]."""
        erd = _read_json(DOCS / "erd_spec.json")
        from_entities: Set[str] = set()
        for ent in erd.get("entities", []):
            for f in ent.get("fields", []) or []:
                if isinstance(f, dict) and f.get("encrypted") is True:
                    from_entities.add(f"{ent.get('name')}.{f.get('name')}")
        manifest = erd.get("encrypted_fields")
>       assert isinstance(manifest, list), "encrypted_fields[] must exist"
E       AssertionError: encrypted_fields[] must exist
E       assert False
E        +  where False = isinstance(None, list)

tests/architectural/test_epic_a_data_model_architecture.py:499: AssertionError
___________ test_constraints_and_indexes_live_in_migrations_not_code ___________

    def test_constraints_and_indexes_live_in_migrations_not_code() -> None:
        """Verifies 7.1.26 — constraints/indexes defined in migrations; none in application code."""
        # Presence in SQL files
        for fname in ("001_init.sql", "002_constraints.sql", "003_indexes.sql"):
            path = MIGRATIONS / fname
            assert path.exists(), f"{path} must exist"
            sql = _read_text(path)
            assert re.search(r"\b(CREATE\s+TABLE|CREATE\s+INDEX|ALTER\s+TABLE|CONSTRAINT)\b", sql, re.IGNORECASE), (
                f"DDL tokens should be present in {fname}"
            )
        # Absence in application source code
        offenders = _ddl_tokens_present_outside_migrations()
>       assert not offenders, f"DDL tokens must not appear outside migrations: {offenders}"
E       AssertionError: DDL tokens must not appear outside migrations: [(PosixPath('tests/architectural/test_epic_a_data_model_architecture.py'), '\\bCREATE\\s+TABLE\\b')]
E       assert not [(PosixPath('tests/architectural/test_epic_a_data_model_architecture.py'), '\\bCREATE\\s+TABLE\\b')]

tests/architectural/test_epic_a_data_model_architecture.py:516: AssertionError
_____ test_placeholder_uniqueness_enforced_via_partial_unique_on_questions _____

    def test_placeholder_uniqueness_enforced_via_partial_unique_on_questions() -> None:
        """Verifies 7.1.27 — partial unique on QuestionnaireQuestion(placeholder_code) non-null only."""
        erd = _read_json(DOCS / "erd_spec.json")
        qq = next((e for e in erd.get("entities", []) if e.get("name") == "QuestionnaireQuestion"), None)
        assert qq is not None, "ERD must include entity QuestionnaireQuestion"
        uniqs = qq.get("unique") or []
>       assert any(
            u.get("columns") == ["placeholder_code"] and (u.get("where") or "").lower().strip() in {"placeholder_code is not null", "placeholder_code!=null"}
            for u in uniqs if isinstance(u, dict)
        ), "ERD must define partial unique on QuestionnaireQuestion(placeholder_code) where placeholder_code IS NOT NULL"
E       AssertionError: ERD must define partial unique on QuestionnaireQuestion(placeholder_code) where placeholder_code IS NOT NULL
E       assert False
E        +  where False = any(<generator object test_placeholder_uniqueness_enforced_via_partial_unique_on_questions.<locals>.<genexpr> at 0x7ff4202e2570>)

tests/architectural/test_epic_a_data_model_architecture.py:526: AssertionError
____________ test_one_response_per_question_per_submission_enforced ____________

    def test_one_response_per_question_per_submission_enforced() -> None:
        """Verifies 7.1.28 — composite unique (response_set_id, question_id) exists in ERD and SQL."""
        erd = _read_json(DOCS / "erd_spec.json")
        resp = next((e for e in erd.get("entities", []) if e.get("name") == "Response"), None)
        assert resp is not None, "ERD must include entity Response"
        uniqs = resp.get("unique") or []
>       assert any(u.get("columns") == ["response_set_id", "question_id"] for u in uniqs if isinstance(u, dict)), (
            "ERD must define composite unique on Response(response_set_id, question_id)"
        )
E       AssertionError: ERD must define composite unique on Response(response_set_id, question_id)
E       assert False
E        +  where False = any(<generator object test_one_response_per_question_per_submission_enforced.<locals>.<genexpr> at 0x7ff4202e3300>)

tests/architectural/test_epic_a_data_model_architecture.py:543: AssertionError
________________ test_erd_parity_exports_correspond_to_erd_spec ________________

    def test_erd_parity_exports_correspond_to_erd_spec() -> None:
        """Verifies 7.1.29 — Mermaid and CSV mirror ERD entities and relationships only."""
        erd = _read_json(DOCS / "erd_spec.json")
        mermaid = _read_text(DOCS / "erd_mermaid.md")
        rows = _read_csv_rows(DOCS / "erd_relationships.csv")
        # Assume CSV header: source,target or similar; detect columns by names
        header = [h.strip().lower() for h in rows[0]] if rows else []
        assert rows and header, "relationships CSV must be non-empty with header"
        # heuristics for columns
        try:
            src_idx = header.index("source")
            dst_idx = header.index("target")
        except ValueError:
            # fallback to first two columns
            src_idx, dst_idx = 0, 1
    
        csv_entities: Set[str] = set()
        csv_relationships: Set[Tuple[str, str]] = set()
        for r in rows[1:]:
            if len(r) <= max(src_idx, dst_idx):
                continue
            s, t = r[src_idx].strip(), r[dst_idx].strip()
            if s and t:
                csv_relationships.add((s, t))
                csv_entities.update({s, t})
    
        erd_entities = {e.get("name") for e in erd.get("entities", []) if isinstance(e, dict)}
    
        # Mermaid edges like: A --> B ; or A -- FK --> B; collect pairs
        mermaid_edges = set()
        for line in mermaid.splitlines():
            m = re.search(r"(\w+)\s*[-.]{2,}>\s*(\w+)", line)
            if m:
                mermaid_edges.add((m.group(1), m.group(2)))
    
        # Every ERD entity appears in Mermaid and CSV
>       assert erd_entities.issubset(csv_entities), "All ERD entities must appear in relationships CSV"
E       AssertionError: All ERD entities must appear in relationships CSV
E       assert False
E        +  where False = <built-in method issubset of set object at 0x7ff4202c6960>({'Company', 'ContractTemplate', 'QuestionnaireQuestion', 'QuestionnaireScreen', 'ResponseSet', 'ScreenGroup', ...})
E        +    where <built-in method issubset of set object at 0x7ff4202c6960> = {'AnswerOption', 'Company', 'FieldGroup', 'GeneratedDocument', 'GroupValue', 'QuestionToFieldGroup', ...}.issubset

tests/architectural/test_epic_a_data_model_architecture.py:589: AssertionError
=========================== short test summary info ============================
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_entities_declare_explicit_field_collections - AssertionError: entities[0].fields must be an array
assert False
 +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_entity_field_names_are_unique_per_entity - AssertionError: entities[0].fields must be an array
assert False
 +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)
 +    where {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'} = <built-in method get of dict object at 0x7ff4203711c0>('fields')
 +      where <built-in method get of dict object at 0x7ff4203711c0> = {'fields': {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, 'name': 'Company', 'pk': {'company_id': 'uuid:not_null'}}.get
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_migration_column_types_match_erd_types - AssertionError: Entity Company must declare fields[]
assert False
 +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)
 +    where {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'} = <built-in method get of dict object at 0x7ff42033b680>('fields')
 +      where <built-in method get of dict object at 0x7ff42033b680> = {'fields': {'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, 'name': 'Company', 'pk': {'company_id': 'uuid:not_null'}}.get
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_sensitive_fields_include_encrypted_boolean - AssertionError: fields must be an array of objects
assert False
 +  where False = isinstance({'created_at': 'timestamptz:not_null', 'legal_name': 'text:not_null', 'registered_office_address': 'text', 'updated_at': 'timestamptz'}, list)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_indexes_declared_and_created_by_migrations - AttributeError: 'str' object has no attribute 'get'
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_enums_centralised_with_names_and_values - AssertionError: ERD must include enums[] with entries
assert (False)
 +  where False = isinstance(None, list)
 +    where None = <built-in method get of dict object at 0x7ff4203a0ec0>('enums')
 +      where <built-in method get of dict object at 0x7ff4203a0ec0> = {'conventions': {'db_case': 'snake_case', 'entities_case': 'CamelCase', 'enums': {'answer_kind': ['boolean', 'enum_sin...r_code with partial unique index.', 'answer_kind includes enum_single for single-choice questions.'], 'version': '0.3'}.get
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_global_encrypted_field_manifest_exists - AssertionError: encrypted_fields[] manifest must exist
assert False
 +  where False = isinstance(None, list)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_global_constraints_manifest_exists - AssertionError: constraints_applied[] must exist
assert False
 +  where False = isinstance(None, list)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_migration_journal_structure_is_stable - AssertionError: Migration journal artefact must exist (e.g., migrations/_journal.json)
assert []
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_collections_are_in_deterministic_sorted_order - AssertionError: ERD entities should be sorted by name deterministically
assert ['Company', '...onseSet', ...] == ['AnswerOptio...ldGroup', ...]
  
  At index 0 diff: 'Company' != 'AnswerOption'
  
  Full diff:
    [
  +     'Company',
  +     'QuestionnaireQuestion',
        'AnswerOption',
  -     'Company',
        'FieldGroup',
  +     'QuestionToFieldGroup',
  +     'ResponseSet',
  +     'Response',
  +     'GroupValue',
        'GeneratedDocument',
  -     'GroupValue',
  -     'QuestionToFieldGroup',
  -     'QuestionnaireQuestion',
  -     'Response',
  -     'ResponseSet',
    ]
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_placeholder_lookup_artifacts_are_present - AssertionError: QuestionnaireQuestion must include optional placeholder_code field
assert 'placeholder_code' in set()
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_structural_constraints_for_responses_and_placeholders - AssertionError: ERD must define composite unique on Response(response_set_id, question_id)
assert False
 +  where False = any(<generator object test_structural_constraints_for_responses_and_placeholders.<locals>.<genexpr> at 0x7ff4202e3760>)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_tls_requirement_exposed_as_configuration - AssertionError: config/database.ssl.required must exist
assert False
 +  where False = exists()
 +    where exists = PosixPath('config/database.ssl.required').exists
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_column_level_encryption_is_configurable - AssertionError: config/encryption.mode must exist
assert False
 +  where False = exists()
 +    where exists = PosixPath('config/encryption.mode').exists
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_generated_document_storage_is_modelled - AssertionError: GeneratedDocument must have stable identifier field
assert ('generated_document_id' in set() or 'id' in set())
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_encrypted_fields_trace_to_global_manifest - AssertionError: encrypted_fields[] must exist
assert False
 +  where False = isinstance(None, list)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_constraints_and_indexes_live_in_migrations_not_code - AssertionError: DDL tokens must not appear outside migrations: [(PosixPath('tests/architectural/test_epic_a_data_model_architecture.py'), '\\bCREATE\\s+TABLE\\b')]
assert not [(PosixPath('tests/architectural/test_epic_a_data_model_architecture.py'), '\\bCREATE\\s+TABLE\\b')]
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_placeholder_uniqueness_enforced_via_partial_unique_on_questions - AssertionError: ERD must define partial unique on QuestionnaireQuestion(placeholder_code) where placeholder_code IS NOT NULL
assert False
 +  where False = any(<generator object test_placeholder_uniqueness_enforced_via_partial_unique_on_questions.<locals>.<genexpr> at 0x7ff4202e2570>)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_one_response_per_question_per_submission_enforced - AssertionError: ERD must define composite unique on Response(response_set_id, question_id)
assert False
 +  where False = any(<generator object test_one_response_per_question_per_submission_enforced.<locals>.<genexpr> at 0x7ff4202e3300>)
FAILED tests/architectural/test_epic_a_data_model_architecture.py::test_erd_parity_exports_correspond_to_erd_spec - AssertionError: All ERD entities must appear in relationships CSV
assert False
 +  where False = <built-in method issubset of set object at 0x7ff4202c6960>({'Company', 'ContractTemplate', 'QuestionnaireQuestion', 'QuestionnaireScreen', 'ResponseSet', 'ScreenGroup', ...})
 +    where <built-in method issubset of set object at 0x7ff4202c6960> = {'AnswerOption', 'Company', 'FieldGroup', 'GeneratedDocument', 'GroupValue', 'QuestionToFieldGroup', ...}.issubset
========================= 20 failed, 7 passed in 0.68s =========================
