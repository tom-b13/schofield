{
  "clarke_review": {
    "acceptable_as_is": [
      "7.2.1.1",
      "7.2.1.2",
      "7.2.1.3",
      "7.2.1.4",
      "7.2.1.5",
      "7.2.1.6",
      "7.2.1.7",
      "7.2.1.8",
      "7.2.1.9",
      "7.2.1.10",
      "7.2.1.12",
      "7.2.1.13",
      "7.2.1.14",
      "7.2.1.15",
      "7.2.1.16",
      "7.2.1.17",
      "7.3.1.1",
      "7.3.1.2",
      "7.3.1.3",
      "7.3.1.4",
      "7.3.1.5",
      "7.3.1.6",
      "7.3.1.7",
      "7.3.1.8",
      "7.3.1.9",
      "7.3.1.10",
      "7.3.1.11",
      "7.3.1.12",
      "7.2.2.10",
      "7.2.2.11",
      "7.2.2.12",
      "7.2.2.13",
      "7.2.2.14",
      "7.2.2.15",
      "7.2.2.16",
      "7.2.2.17",
      "7.2.2.18",
      "7.2.2.19",
      "7.2.2.20",
      "7.2.2.21"
    ],
    "needs_improvement": [
      "7.2.1.11",
      "7.2.2.1",
      "7.2.2.2",
      "7.2.2.3",
      "7.2.2.4",
      "7.2.2.5",
      "7.2.2.6",
      "7.2.2.7",
      "7.2.2.8",
      "7.2.2.9",
      "7.2.2.22",
      "7.2.2.23",
      "7.2.2.24",
      "7.2.2.25",
      "7.2.2.26",
      "7.2.2.27",
      "7.2.2.28",
      "7.2.2.29",
      "7.2.2.30",
      "7.2.2.31",
      "7.2.2.32",
      "7.2.2.33",
      "7.2.2.34",
      "7.2.2.35",
      "7.2.2.36",
      "7.2.2.37",
      "7.2.2.38",
      "7.2.2.39",
      "7.2.2.40",
      "7.2.2.41",
      "7.2.2.42",
      "7.2.2.43",
      "7.2.2.44",
      "7.2.2.45",
      "7.2.2.46",
      "7.2.2.47",
      "7.2.2.48",
      "7.2.2.49",
      "7.2.2.50",
      "7.2.2.51",
      "7.2.2.52",
      "7.2.2.53",
      "7.2.2.54",
      "7.2.2.55",
      "7.2.2.56",
      "7.2.2.57",
      "7.3.2.1",
      "7.3.2.2",
      "7.3.2.3",
      "7.3.2.4",
      "7.3.2.5",
      "7.3.2.6",
      "7.3.2.7",
      "7.3.2.8",
      "7.3.2.9",
      "7.3.2.10",
      "7.3.2.11",
      "7.3.2.12",
      "7.3.2.13",
      "7.3.2.14",
      "7.3.2.15",
      "7.3.2.16",
      "7.3.2.17",
      "7.3.2.18",
      "7.3.2.19",
      "7.3.2.20"
    ],
    "required_missing_tests": [
      "7.2.2.58",
      "7.2.2.59",
      "7.2.2.60",
      "7.2.2.61",
      "7.2.2.62",
      "7.2.2.63",
      "7.2.2.64",
      "7.2.2.65",
      "7.2.2.66",
      "7.2.2.67",
      "7.2.2.68",
      "7.2.2.69",
      "7.2.2.70",
      "7.2.2.71",
      "7.2.2.72",
      "7.2.2.73",
      "7.2.2.74",
      "7.2.2.75",
      "7.2.2.76",
      "7.2.2.77",
      "7.2.2.78",
      "7.2.2.79",
      "7.2.2.80",
      "7.2.2.81",
      "7.2.2.82",
      "7.2.2.83",
      "7.2.2.84",
      "7.2.2.85",
      "7.2.2.86",
      "7.2.2.87",
      "7.2.2.88",
      "7.2.2.89",
      "7.2.2.90",
      "7.2.2.91",
      "7.2.2.92",
      "7.2.2.93",
      "7.2.2.94",
      "7.2.2.95",
      "7.2.2.96",
      "7.2.2.97",
      "7.2.2.98",
      "7.2.2.99",
      "7.2.2.100",
      "7.2.2.101",
      "7.2.2.102",
      "7.2.2.103",
      "7.2.2.104",
      "7.2.2.105",
      "7.2.2.106",
      "7.2.2.107",
      "7.2.2.108",
      "7.2.2.109",
      "7.2.2.110",
      "7.2.2.111",
      "7.2.2.112",
      "7.2.2.113",
      "7.2.2.114",
      "7.2.2.115",
      "7.2.2.116",
      "7.2.2.117",
      "7.2.2.118",
      "7.2.2.119",
      "7.2.2.120",
      "7.2.2.121",
      "7.2.2.122",
      "7.2.2.123",
      "7.2.2.124",
      "7.2.2.125",
      "7.2.2.126"
    ],
    "suspicious_passing_tests": [],
    "explicit_actions_for_ada": [
      {
        "test_id": "7.2.1.11",
        "category": "needs_improvement",
        "instruction": "In test_7_2_1_11_migration_journal_includes_filenames, assert presence of all expected migration filenames including migrations/003_indexes.sql, migrations/004_rollbacks.sql, and migrations/005_add_enum_single.sql, not only 001 and 002.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.1.11; current test only checks two filenames (see function asserting only 001 and 002)."
      },
      {
        "test_id": "7.2.2.1",
        "category": "needs_improvement",
        "instruction": "Keep the explicit test and remove dynamic generation for 7.2.2.1; assert open('docs/erd_spec.json','r',encoding='utf-8') is called once and that outputs is absent; do not allow the shim to pre-satisfy error.code.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.1; duplicate ID coverage exists (explicit + dynamic)."
      },
      {
        "test_id": "7.2.2.2",
        "category": "needs_improvement",
        "instruction": "Keep explicit test and skip dynamic for 7.2.2.2; assert that error message includes JSON parse position (line/char) and outputs is not set.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.2 requires parser detail; dynamic test only checks code."
      },
      {
        "test_id": "7.2.2.3",
        "category": "needs_improvement",
        "instruction": "Complete the explicit test by asserting the schema validator was invoked and that the message lists missing/extra properties; remove dynamic duplicate for 7.2.2.3.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.3; current test stub ends mid-context and lacks validator assertions."
      },
      {
        "test_id": "7.2.2.4",
        "category": "needs_improvement",
        "instruction": "In the generated test, also assert that mermaid path is included in the error message and that read was attempted exactly once; avoid relying on hardcoded err_code in run_migrate_cli.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "run_migrate_cli special-cases section '4' returning PRE_docs_erd_mermaid_md_MISSING_OR_UNREADABLE."
      },
      {
        "test_id": "7.2.2.5",
        "category": "needs_improvement",
        "instruction": "Assert a UnicodeDecodeError scenario by mocking read_text to raise UnicodeDecodeError and verify message includes 'utf-8' with file path.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.5; current generated test only checks code/exit."
      },
      {
        "test_id": "7.2.2.6",
        "category": "needs_improvement",
        "instruction": "Mock a mermaid parser to raise and assert the error message includes 'Mermaid' and parser details; ensure only one parse attempt was made.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.6; current test minimal."
      },
      {
        "test_id": "7.2.2.7",
        "category": "needs_improvement",
        "instruction": "Patch open on docs/erd_relationships.csv to raise FileNotFoundError and assert message mentions the exact path and 'missing'/'unreadable'.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.7; generated test only checks code."
      },
      {
        "test_id": "7.2.2.8",
        "category": "needs_improvement",
        "instruction": "Trigger csv.Error via DictReader and assert message includes 'CSV parse error'; confirm only one parse attempt.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.8; minimal assertions now."
      },
      {
        "test_id": "7.2.2.9",
        "category": "needs_improvement",
        "instruction": "Assert the header exact list ['from','to','kind'] and show actual vs expected in assertion message; ensure read occurs once.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.9; generated test only checks code."
      },
      {
        "test_id": "7.2.2.22",
        "category": "needs_improvement",
        "instruction": "Add assertion that the error message includes the missing config key 'database.url' and that no DB connect attempts occur (mock DB.connect and assert 0 calls).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.22; current generated test lacks message and call assertions."
      },
      {
        "test_id": "7.2.2.23",
        "category": "needs_improvement",
        "instruction": "Assert DSN validation detail (invalid scheme/host) and verify DB.connect is never called; patch and assert not called.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.23; test only checks error code."
      },
      {
        "test_id": "7.2.2.24",
        "category": "needs_improvement",
        "instruction": "Assert host resolution failure mentions the hostname and assert only one resolution attempt; mock resolver to control behavior.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.24."
      },
      {
        "test_id": "7.2.2.25",
        "category": "needs_improvement",
        "instruction": "Assert missing TLS required flag path 'config.database.ssl.required' and verify no DB ops; patch DB.any_operation and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.25."
      },
      {
        "test_id": "7.2.2.26",
        "category": "needs_improvement",
        "instruction": "Assert type mismatch detail for TLS flag and 0 DB.connect calls (mock to confirm).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.26."
      },
      {
        "test_id": "7.2.2.27",
        "category": "needs_improvement",
        "instruction": "Assert truststore material unavailability with path and confirm no TLS connect attempted; mock DB.connect_tls and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.27."
      },
      {
        "test_id": "7.2.2.28",
        "category": "needs_improvement",
        "instruction": "Assert missing encryption mode config key message and that apply_column_encryption is not called (mock and assert 0 calls).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.28."
      },
      {
        "test_id": "7.2.2.29",
        "category": "needs_improvement",
        "instruction": "Assert invalid encryption mode includes the provided value and that no KMS calls occur (mock KMS client; 0 calls).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.29."
      },
      {
        "test_id": "7.2.2.30",
        "category": "needs_improvement",
        "instruction": "Assert that column mode requires kms.key_alias and no KMS calls occur without it; mock get_key and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.30."
      },
      {
        "test_id": "7.2.2.31",
        "category": "needs_improvement",
        "instruction": "Assert alias-not-found message includes alias string and only one KMS attempt; mock KMS client and assert call args include the alias.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.31."
      },
      {
        "test_id": "7.2.2.32",
        "category": "needs_improvement",
        "instruction": "Assert KMS call failure includes provider code and ensure no retries without backoff; mock to count calls == 1.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.32."
      },
      {
        "test_id": "7.2.2.33",
        "category": "needs_improvement",
        "instruction": "Assert KMS response schema mismatch details (missing fields) and no decryption attempted; patch downstream and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.33."
      },
      {
        "test_id": "7.2.2.34",
        "category": "needs_improvement",
        "instruction": "Assert NOT_IMMUTABLE messaging and no reuse path executed; mock cache/save operations and assert not called.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.34."
      },
      {
        "test_id": "7.2.2.35",
        "category": "needs_improvement",
        "instruction": "Capture logs to assert secrets are not logged and that error mode PRE_secrets_db_password_CALL_FAILED is emitted with provider details.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.35–37 logging-related requirements."
      },
      {
        "test_id": "7.2.2.36",
        "category": "needs_improvement",
        "instruction": "Assert secret schema mismatch and verify DB connect is not attempted; patch DB.connect and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.36."
      },
      {
        "test_id": "7.2.2.37",
        "category": "needs_improvement",
        "instruction": "Assert PRE_secrets_db_password_LOGGED is emitted when secret value appears in logs; simulate by logging and asserting redaction fails now.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.37."
      },
      {
        "test_id": "7.2.2.38",
        "category": "needs_improvement",
        "instruction": "Assert CA bundle missing includes path and that connect_tls not attempted; patch and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.38–40."
      },
      {
        "test_id": "7.2.2.39",
        "category": "needs_improvement",
        "instruction": "Assert invalid PEM detail (line/offset) and zero TLS session attempts after failure.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.39."
      },
      {
        "test_id": "7.2.2.40",
        "category": "needs_improvement",
        "instruction": "Assert CA certificate not valid message and halt semantics with no downstream DB ops (mock any_operation and assert 0 calls).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.40."
      },
      {
        "test_id": "7.2.2.41",
        "category": "needs_improvement",
        "instruction": "Assert encrypted fields policy path missing/unreadable and that apply_column_encryption not called; patch and assert not called.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.41–43."
      },
      {
        "test_id": "7.2.2.42",
        "category": "needs_improvement",
        "instruction": "Assert pointers unresolved include exact pointer and that no accesses to those fields occur post-failure.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.42."
      },
      {
        "test_id": "7.2.2.43",
        "category": "needs_improvement",
        "instruction": "Assert field-not-in-entity includes entity.field in message; ensure early halt with zero encryption applies.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.43."
      },
      {
        "test_id": "7.2.2.44",
        "category": "needs_improvement",
        "instruction": "Assert migration timeout missing with config key and that runner.start not called; patch and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec 7.2.2.44–45."
      },
      {
        "test_id": "7.2.2.45",
        "category": "needs_improvement",
        "instruction": "Assert timeout not positive integer details and no runner.start; patch and assert not called.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.45."
      },
      {
        "test_id": "7.2.2.46",
        "category": "needs_improvement",
        "instruction": "Assert runtime migration execution failure halts before constraints; patch create_constraints and assert 0 calls after failure occurs.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.46."
      },
      {
        "test_id": "7.2.2.47",
        "category": "needs_improvement",
        "instruction": "Assert constraint creation error halts indexes; patch create_indexes and assert not called after error.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.47."
      },
      {
        "test_id": "7.2.2.48",
        "category": "needs_improvement",
        "instruction": "Assert encryption apply error halts row access; patch DBSession accessor and assert 0 calls after error.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.48."
      },
      {
        "test_id": "7.2.2.49",
        "category": "needs_improvement",
        "instruction": "Assert rollback error message and ensure only first rollback attempted; patch sequence and assert single call then halt.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.49."
      },
      {
        "test_id": "7.2.2.50",
        "category": "needs_improvement",
        "instruction": "Assert TLS connection error includes cause; patch DB.any_operation to assert 0 calls after failure.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.50."
      },
      {
        "test_id": "7.2.2.51",
        "category": "needs_improvement",
        "instruction": "Assert row insertion error halts joins; patch join method and assert not called post-error.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.51."
      },
      {
        "test_id": "7.2.2.52",
        "category": "needs_improvement",
        "instruction": "Assert join resolution error halts downstream; patch subsequent operations and assert not called.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.52."
      },
      {
        "test_id": "7.2.2.53",
        "category": "needs_improvement",
        "instruction": "Assert invalid encryption key message includes alias/fingerprint if available; assert no encrypted field access proceeds.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.53."
      },
      {
        "test_id": "7.2.2.54",
        "category": "needs_improvement",
        "instruction": "Assert TLS materials unavailable at runtime and that only one attempt is made; patch connect_tls and assert single call.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.54."
      },
      {
        "test_id": "7.2.2.55",
        "category": "needs_improvement",
        "instruction": "Assert unsupported data type mentions field and type; assert immediate halt with no further validation steps.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.55."
      },
      {
        "test_id": "7.2.2.56",
        "category": "needs_improvement",
        "instruction": "Assert out-of-order migration message includes expected ordering and assert no subsequent steps are attempted; patch and assert 0 calls.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.56."
      },
      {
        "test_id": "7.2.2.57",
        "category": "needs_improvement",
        "instruction": "Assert unidentified error emits one telemetry event and halts downstream; capture telemetry from result['telemetry'] and assert len==1.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.2.2.57."
      },
      {
        "test_id": "7.3.2.1",
        "category": "needs_improvement",
        "instruction": "Mock migration execution to raise and assert no constraint/index/encryption calls occur post-error; maintain error.code and exit_code assertions.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.1 currently only checks code."
      },
      {
        "test_id": "7.3.2.2",
        "category": "needs_improvement",
        "instruction": "Mock create_constraints to raise and assert create_indexes not called; keep code/exit assertions.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.2 currently minimal."
      },
      {
        "test_id": "7.3.2.3",
        "category": "needs_improvement",
        "instruction": "Mock apply_column_encryption to raise; assert no row insertion or joins attempted; keep code/exit assertions.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.3 minimal."
      },
      {
        "test_id": "7.3.2.4",
        "category": "needs_improvement",
        "instruction": "Mock rollback to raise and assert no further rollback attempts occur; check message fragment if specified in spec.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.4 minimal."
      },
      {
        "test_id": "7.3.2.5",
        "category": "needs_improvement",
        "instruction": "Mock connect_tls to raise and assert no validation/lookup steps run; keep code/exit checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.5 minimal."
      },
      {
        "test_id": "7.3.2.6",
        "category": "needs_improvement",
        "instruction": "Mock validate_row to raise and assert direct lookup not called afterwards; keep code/exit checks and call counts.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.6 minimal."
      },
      {
        "test_id": "7.3.2.7",
        "category": "needs_improvement",
        "instruction": "Mock join resolution to raise and assert placeholder resolution not called; keep code/exit checks and call counts.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.7 minimal."
      },
      {
        "test_id": "7.3.2.8",
        "category": "needs_improvement",
        "instruction": "Mock invalid encryption key error and assert no encrypted field access occurs; keep error code check RUN_INVALID_ENCRYPTION_KEY.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.8 minimal."
      },
      {
        "test_id": "7.3.2.9",
        "category": "needs_improvement",
        "instruction": "Mock TLS materials load to fail and assert DB.connect_tls not invoked; verify immediate halt semantics.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.9 minimal."
      },
      {
        "test_id": "7.3.2.10",
        "category": "needs_improvement",
        "instruction": "Mock validator to report unsupported type and assert no insert/join operations occur afterwards; keep code/exit checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.10 minimal."
      },
      {
        "test_id": "7.3.2.11",
        "category": "needs_improvement",
        "instruction": "Simulate out-of-order execution and assert no further steps run; include ordering detail assertion if spec requires messaging.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.11 minimal."
      },
      {
        "test_id": "7.3.2.12",
        "category": "needs_improvement",
        "instruction": "Simulate unidentified runtime error and assert one telemetry error event and no downstream operations; keep code/exit checks.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "7.3.2.12 minimal."
      },
      {
        "test_id": "7.3.2.13",
        "category": "needs_improvement",
        "instruction": "Add explicit test to mock DB connect network unreachable and assert ENV_NETWORK_UNREACHABLE_DB with zero downstream calls (do not rely solely on dynamic mapping).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5207 requires call-count and message assertions."
      },
      {
        "test_id": "7.3.2.14",
        "category": "needs_improvement",
        "instruction": "Add explicit test to mock permission denied on first DDL and assert ENV_DB_PERMISSION_DENIED; verify no schema creation proceeds.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5217."
      },
      {
        "test_id": "7.3.2.15",
        "category": "needs_improvement",
        "instruction": "Add explicit test to mock TLS handshake failure and assert ENV_TLS_HANDSHAKE_FAILED_DB; verify no inserts/joins attempted afterwards.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5227."
      },
      {
        "test_id": "7.3.2.16",
        "category": "needs_improvement",
        "instruction": "Add explicit test for DB storage exhaustion on first CREATE TABLE asserting ENV_DATABASE_STORAGE_EXHAUSTED and zero journal updates afterwards.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5237."
      },
      {
        "test_id": "7.3.2.17",
        "category": "needs_improvement",
        "instruction": "Add explicit test for temp filesystem unavailability halting STEP-3 and assert ENV_DATABASE_STORAGE_EXHAUSTED with no DB DDL afterwards.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5247."
      },
      {
        "test_id": "7.3.2.18",
        "category": "needs_improvement",
        "instruction": "Add explicit test to mock KMS unavailability and assert ENV_KMS_UNAVAILABLE; verify encryption operations do not proceed.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5257."
      },
      {
        "test_id": "7.3.2.19",
        "category": "needs_improvement",
        "instruction": "Add explicit test to mock unsynchronised time source and assert ENV_TIME_SYNCHRONISATION_FAILED; verify no downstream steps invoked.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5267."
      },
      {
        "test_id": "7.3.2.20",
        "category": "needs_improvement",
        "instruction": "Add explicit test to mock configuration dependency unavailability and assert ENV_DB_UNAVAILABLE; assert no DB connections or DDL occur.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Spec ~5277."
      },
      {
        "test_id": "7.2.2.58",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_58_outputs_entities_incomplete asserting outputs.entities equals ERD set (no missing/extras) and fails now.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "No function covers 7.2.2.58; spec heading 'Outputs: entities incomplete'."
      },
      {
        "test_id": "7.2.2.59",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_59_outputs_entities_order_not_deterministic asserting entities ordering is deterministic (sorted by name).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing test for spec 7.2.2.59."
      },
      {
        "test_id": "7.2.2.60",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_60_outputs_entities_mutable_within_step asserting snapshot immutability within step (two reads equal).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing test for 7.2.2.60."
      },
      {
        "test_id": "7.2.2.61",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_61_outputs_entity_name_empty asserting no entity has empty name and that type is str.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing test for 7.2.2.61."
      },
      {
        "test_id": "7.2.2.62",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_62_outputs_entity_name_mismatch_with_erd asserting entity names match ERD exactly (diff sets).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing test for 7.2.2.62."
      },
      {
        "test_id": "7.2.2.63",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_63_outputs_entity_name_missing asserting name property present for each entity object.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.63."
      },
      {
        "test_id": "7.2.2.64",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_64_outputs_fields_set_invalid asserting fields set matches ERD for a representative entity including types.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.64."
      },
      {
        "test_id": "7.2.2.65",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_65_outputs_fields_order_not_deterministic asserting deterministic sorting of fields by name.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.65."
      },
      {
        "test_id": "7.2.2.66",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_66_outputs_fields_array_missing asserting each entity has a list-valued fields key.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.66."
      },
      {
        "test_id": "7.2.2.67",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_67_outputs_field_name_mismatch_with_erd asserting field names equal ERD set per entity.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.67."
      },
      {
        "test_id": "7.2.2.68",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_68_outputs_field_name_not_unique asserting uniqueness of field names within an entity list.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.68."
      },
      {
        "test_id": "7.2.2.69",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_69_outputs_field_name_missing asserting presence of non-empty field.name for every field object.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.69."
      },
      {
        "test_id": "7.2.2.70",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_70_outputs_field_type_mismatch_with_erd asserting declared field types match ERD for sample entity fields.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.70."
      },
      {
        "test_id": "7.2.2.71",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_71_outputs_field_type_missing asserting all fields include a non-empty type string.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.71."
      },
      {
        "test_id": "7.2.2.72",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_72_outputs_encrypted_flag_false_when_required asserting encrypted==True for sensitive fields per policy manifest.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.72."
      },
      {
        "test_id": "7.2.2.73",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_73_outputs_encrypted_flag_true_when_not_required asserting encrypted not set/false for non-sensitive fields listed in ERD.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.73."
      },
      {
        "test_id": "7.2.2.74",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_74_outputs_encrypted_flag_missing asserting presence of the encrypted flag across all fields (True/False) where applicable.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.74."
      },
      {
        "test_id": "7.2.2.75",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_75_primary_key_columns_empty asserting non-empty primary_key.columns for entities with PK defined in ERD.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.75."
      },
      {
        "test_id": "7.2.2.76",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_76_primary_key_columns_unknown asserting PK columns must exist in fields list (no unknown column names).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.76."
      },
      {
        "test_id": "7.2.2.77",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_77_primary_key_columns_order_not_deterministic asserting deterministic PK columns order (per ERD order).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.77."
      },
      {
        "test_id": "7.2.2.78",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_78_primary_key_columns_missing_when_pk_defined asserting presence of columns list whenever primary_key object exists.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.78."
      },
      {
        "test_id": "7.2.2.79",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_79_foreign_keys_set_invalid asserting FK shape validity (name, columns, references.entity, references.columns).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.79."
      },
      {
        "test_id": "7.2.2.80",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_80_foreign_keys_order_not_deterministic asserting deterministic ordering of FK entries by name and no duplicates.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.80."
      },
      {
        "test_id": "7.2.2.81",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_81_foreign_key_name_empty asserting non-empty FK names (str, not blank).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.81."
      },
      {
        "test_id": "7.2.2.82",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_82_foreign_key_name_not_unique asserting uniqueness of FK names within entity FKs list.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.82."
      },
      {
        "test_id": "7.2.2.83",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_83_foreign_key_name_missing_when_fks_exist asserting presence of 'name' on each FK when FKs exist.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.83."
      },
      {
        "test_id": "7.2.2.84",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_84_foreign_key_columns_unknown asserting FK columns exist in the entity's defined fields set.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.84."
      },
      {
        "test_id": "7.2.2.85",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_85_foreign_key_columns_order_not_deterministic asserting deterministic ordering of FK columns per spec/ERD.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.85."
      },
      {
        "test_id": "7.2.2.86",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_86_foreign_key_columns_missing_when_fks_exist asserting non-empty columns list for each FK entry.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.86."
      },
      {
        "test_id": "7.2.2.87",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_87_foreign_key_references_entity_missing asserting referenced entity exists in outputs.entities list.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.87."
      },
      {
        "test_id": "7.2.2.88",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_88_foreign_key_references_columns_missing asserting referenced columns array present and non-empty for each FK.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.88."
      },
      {
        "test_id": "7.2.2.89",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_89_foreign_key_references_entity_unknown asserting referenced entity is known/valid; include diff if unknown.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.89."
      },
      {
        "test_id": "7.2.2.90",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_90_foreign_key_references_columns_unknown asserting referenced columns exist in target entity fields.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.90."
      },
      {
        "test_id": "7.2.2.91",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_91_foreign_key_references_columns_count_mismatch asserting FK and referenced columns counts match exactly.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.91."
      },
      {
        "test_id": "7.2.2.92",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_92_unique_constraints_set_invalid asserting unique constraints array shape and required keys present for each entry.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.92."
      },
      {
        "test_id": "7.2.2.93",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_93_unique_constraints_order_not_deterministic asserting deterministic ordering by name and no duplicates in uniques.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.93."
      },
      {
        "test_id": "7.2.2.94",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_94_unique_constraint_name_empty asserting unique constraint names are non-empty strings.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.94."
      },
      {
        "test_id": "7.2.2.95",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_95_unique_constraint_name_not_unique asserting names are unique (len vs set).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.95."
      },
      {
        "test_id": "7.2.2.96",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_96_unique_constraint_name_missing_when_uniques_exist asserting name property exists for each unique entry when uniques array non-empty.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.96."
      },
      {
        "test_id": "7.2.2.97",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_97_unique_constraint_columns_unknown asserting unique columns exist among entity fields.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.97."
      },
      {
        "test_id": "7.2.2.98",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_98_unique_constraint_columns_order_not_deterministic asserting deterministic ordering of unique columns per spec.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.98."
      },
      {
        "test_id": "7.2.2.99",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_99_unique_constraint_columns_missing_when_uniques_exist asserting columns list present and non-empty for all unique entries.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.99."
      },
      {
        "test_id": "7.2.2.100",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_100_indexes_set_invalid asserting indexes array validity and required fields existence per entry (name, columns).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.100."
      },
      {
        "test_id": "7.2.2.101",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_101_indexes_order_not_deterministic asserting deterministic ordering of index entries by name with no duplicates.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.101."
      },
      {
        "test_id": "7.2.2.102",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_102_index_name_empty asserting non-empty index names (str, not blank).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.102."
      },
      {
        "test_id": "7.2.2.103",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_103_index_name_not_unique asserting index names unique (len vs set).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.103."
      },
      {
        "test_id": "7.2.2.104",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_104_index_name_missing_when_indexes_exist asserting name property exists when indexes array is non-empty.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.104."
      },
      {
        "test_id": "7.2.2.105",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_105_index_columns_unknown asserting index columns exist among entity fields set.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.105."
      },
      {
        "test_id": "7.2.2.106",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_106_index_columns_order_not_deterministic asserting deterministic ordering of index columns.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.106."
      },
      {
        "test_id": "7.2.2.107",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_107_index_columns_missing_when_indexes_exist asserting columns list present and non-empty for each index entry.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.107."
      },
      {
        "test_id": "7.2.2.108",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_108_enums_incomplete asserting outputs.enums includes all required enums (e.g., answer_kind) with exact values order.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.108."
      },
      {
        "test_id": "7.2.2.109",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_109_enums_order_not_deterministic asserting deterministic ordering of enum values within each enum.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.109."
      },
      {
        "test_id": "7.2.2.110",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_110_enum_name_empty asserting non-empty enum names and type str for outputs.enums[].name.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.110."
      },
      {
        "test_id": "7.2.2.111",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_111_enum_name_mismatch_with_erd asserting enum names match ERD; fail on mismatches and report diff.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.111."
      },
      {
        "test_id": "7.2.2.112",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_112_enum_name_missing_when_enums_exist asserting presence of name for each enum entry when enums exist.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.112."
      },
      {
        "test_id": "7.2.2.113",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_113_enum_values_empty asserting values array present and non-empty for each enum entry.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.113."
      },
      {
        "test_id": "7.2.2.114",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_114_enum_values_mismatch_with_erd asserting enum values set equals ERD for each enum (order checked separately).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.114."
      },
      {
        "test_id": "7.2.2.115",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_115_enum_values_order_not_deterministic asserting enum values ordering deterministic (sorted/specified).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.115."
      },
      {
        "test_id": "7.2.2.116",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_116_enum_values_missing_when_enums_exist asserting non-empty values for every enum present (no missing values).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.116."
      },
      {
        "test_id": "7.2.2.117",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_117_encrypted_fields_incomplete asserting outputs.encrypted_fields equals expected manifest from policy (set equality).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.117."
      },
      {
        "test_id": "7.2.2.118",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_118_encrypted_fields_values_not_unique asserting manifest entries unique (len==len(set)).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.118."
      },
      {
        "test_id": "7.2.2.119",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_119_encrypted_fields_present_when_erd_none asserting that no encrypted fields appear when ERD defines none (must be empty).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.119."
      },
      {
        "test_id": "7.2.2.120",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_120_constraints_applied_incomplete asserting outputs.constraints_applied contains all required constraints (subset and equality as needed).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.120."
      },
      {
        "test_id": "7.2.2.121",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_121_constraints_applied_value_empty asserting no empty strings/None in constraints_applied list entries.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.121."
      },
      {
        "test_id": "7.2.2.122",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_122_constraints_applied_values_not_unique asserting uniqueness (len vs set) for constraints_applied list.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.122."
      },
      {
        "test_id": "7.2.2.123",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_123_constraints_applied_order_not_deterministic asserting deterministic ordering of constraints_applied (sorted).",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.123."
      },
      {
        "test_id": "7.2.2.124",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_124_migration_journal_empty asserting migration_journal is non-empty after successful run; fail when empty.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.124."
      },
      {
        "test_id": "7.2.2.125",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_125_migration_journal_order_not_deterministic asserting non-decreasing order by applied_at timestamps.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.125."
      },
      {
        "test_id": "7.2.2.126",
        "category": "required_missing_tests",
        "instruction": "Add test_7_2_2_126_migration_journal_missing_required_fields asserting each journal entry has filename and applied_at with correct formats.",
        "files": [
          "tests/functional/test_epic_a_data_model_functional.py"
        ],
        "evidence": "Missing 7.2.2.126."
      }
    ]
  },
  "final_decision": {
    "continue": false
  }
}