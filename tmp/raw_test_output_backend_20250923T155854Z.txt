============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/codex/schofield
plugins: mock-3.14.1, anyio-4.9.0, cov-6.2.1, langsmith-0.4.1
collected 190 items

tests/architectural/test_epic_a_data_model_architecture.py ............. [  6%]
..............                                                           [ 14%]
tests/functional/test_epic_a_data_model_functional.py ..........F....... [ 23%]
.F...............xFF........FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 61%]
FFFFF.F.F.F..F..F.F.....FFFFFFFFFFFFFFFFFFFFFF........F..F..F..F..F...F. [ 99%]
.                                                                        [100%]

=================================== FAILURES ===================================
______________ test_7_2_1_11_migration_journal_includes_filenames ______________

    def test_7_2_1_11_migration_journal_includes_filenames():
        """Verifies 7.2.1.11 — Migration journal entries include filenames under migrations/."""
        result = run_migrate_cli(["--section", "7.2.1.11"])
        outputs = result.get("outputs") or {}
        journal = outputs.get("migration_journal") or []
        filenames = [j.get("filename") for j in journal]
        # Assert: includes all expected filenames
        assert "migrations/001_init.sql" in filenames
        assert "migrations/002_constraints.sql" in filenames
        assert "migrations/003_indexes.sql" in filenames
        assert "migrations/004_rollbacks.sql" in filenames
>       assert "migrations/005_add_enum_single.sql" in filenames
E       AssertionError: assert 'migrations/005_add_enum_single.sql' in ['migrations/001_init.sql', 'migrations/002_constraints.sql', 'migrations/003_indexes.sql', 'migrations/004_rollbacks.sql']

tests/functional/test_epic_a_data_model_functional.py:932: AssertionError
____________________ test_7_2_2_3_erd_spec_schema_mismatch _____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cd5a290>

    def test_7_2_2_3_erd_spec_schema_mismatch(mocker):
        """Verifies 7.2.2.3 — ERD spec schema mismatch."""
        # Mock: valid JSON wrong shape, then pretend validator flags missing properties.
        payload = json.dumps({"entities": [{"table_name": "Response"}]})
    
        class _FH:
            def read(self, size: int = -1):
                return payload
    
            def __enter__(self):
                return self
    
            def __exit__(self, *args: Any) -> None:  # pragma: no cover
                return None
    
        # Constrain open() patch to docs/erd_spec.json only
        import builtins as _b
        real_open = _b.open
    
        def _side_effect(path, *a, **k):
            if str(path).endswith(str(Path("docs") / "erd_spec.json")):
                return _FH()
            return real_open(path, *a, **k)
    
        mocker.patch("builtins.open", side_effect=_side_effect)
        # Mock: schema validator boundary exists (not invoked by shim yet) and must be called
        import tests.functional.test_epic_a_data_model_functional as mod
        validator = mocker.patch.object(mod, "_validate_schema", return_value=None)
        result = run_migrate_cli(["--section", "3"])  # default branch returns decoded JSON
    
        # Assert: exit code present for failure path
        assert result.get("exit_code") == 1
        # Assert: would be error with schema mismatch code and message listing missing properties
        assert result.get("error", {}).get("code") == "PRE_docs_erd_spec_json_SCHEMA_MISMATCH"
        assert all(term in (result.get("error", {}).get("message") or "") for term in ["name", "fields"])
        assert not result.get("outputs")
        # Assert: schema validator invoked once with loaded document
>       assert validator.call_count == 1
E       AssertionError: assert 0 == 1
E        +  where 0 = <MagicMock name='_validate_schema' id='140692335654656'>.call_count

tests/functional/test_epic_a_data_model_functional.py:1113: AssertionError
______________ test_7_3_1_11_template_registration_reuses_schema _______________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'registry', import_path = 'app.registry'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'registry'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb97880>

    def test_7_3_1_11_template_registration_reuses_schema(mocker):
        """Verifies 7.3.1.11 — Template registration proceeds without schema migrations."""
        # Patch boundary: TemplateRegistry.register should be invoked once
>       register = mocker.patch(
            "app.registry.templates.TemplateRegistry.register",
            create=True,
            return_value=None,
        )

tests/functional/test_epic_a_data_model_functional.py:1519: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'registry', import_path = 'app.registry'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.registry'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_______________ test_7_3_1_12_policy_registration_reuses_schema ________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb45540>

    def test_7_3_1_12_policy_registration_reuses_schema(mocker):
        """Verifies 7.3.1.12 — Policy registration proceeds without schema migrations."""
        # Patch boundary: PolicyRegistry.register should be invoked once (local module object)
        import tests.functional.test_epic_a_data_model_functional as mod
        policy_register = mocker.patch.object(mod.PolicyRegistry, "register", return_value=None)
        # Patch boundary: MigrationRunner.start must NOT be invoked in this flow
>       start = mocker.patch(
            "app.db.migrations_runner.MigrationRunner.start",
            create=True,
            return_value=None,
        )

tests/functional/test_epic_a_data_model_functional.py:1543: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_______________ test_7_3_2_9_halt_when_tls_materials_unavailable _______________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cd59330>

    def test_7_3_2_9_halt_when_tls_materials_unavailable(mocker):
        """Verifies 7.3.2.9 — Halt when TLS materials unavailable (E4)."""
        import tests.functional.test_epic_a_data_model_functional as mod
        load_tls = mocker.patch.object(mod.tls, "load_materials", side_effect=RuntimeError("no tls materials"))
>       connect_tls = mocker.patch("app.db.base.DB.connect_tls", create=True)

tests/functional/test_epic_a_data_model_functional.py:1692: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_________________ test_7_3_2_10_halt_on_unsupported_data_type __________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb05ab0>

    def test_7_3_2_10_halt_on_unsupported_data_type(mocker):
        """Verifies 7.3.2.10 — Halt on unsupported data type at validation (E5)."""
        import tests.functional.test_epic_a_data_model_functional as mod
        validate = mocker.patch.object(mod.Validator, "validate", side_effect=RuntimeError("unsupported type"))
>       insert_row = mocker.patch("app.db.base.DBSession.insert_row", create=True)

tests/functional/test_epic_a_data_model_functional.py:1706: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DBSession', import_path = 'app.db.base.DBSession'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_________________ test_7_3_2_11_halt_on_out_of_order_migration _________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bbd4550>

    def test_7_3_2_11_halt_on_out_of_order_migration(mocker):
        """Verifies 7.3.2.11 — Halt on out-of-order migration execution (E1/E2/E8)."""
>       enforce = mocker.patch("app.db.migrations_runner.MigrationRunner.enforce_order", create=True, side_effect=RuntimeError("out of order"))

tests/functional/test_epic_a_data_model_functional.py:1718: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_______________ test_7_3_2_12_halt_on_unidentified_runtime_error _______________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'telemetry', import_path = 'app.telemetry'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'telemetry'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb17e50>

    def test_7_3_2_12_halt_on_unidentified_runtime_error(mocker):
        """Verifies 7.3.2.12 — Halt on unidentified runtime error (catch-all)."""
        # Simulate telemetry emission on catch-all
>       emit = mocker.patch("app.telemetry.emit_error", create=True)

tests/functional/test_epic_a_data_model_functional.py:1732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'telemetry', import_path = 'app.telemetry'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.telemetry'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
______________ test_7_3_2_13_db_connectivity_failure_halting_step ______________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb04460>

    def test_7_3_2_13_db_connectivity_failure_halting_step(mocker):
        """Verifies 7.3.2.13 — Database connectivity failure halts STEP-3 and prevents downstream operations."""
>       connect = mocker.patch("app.db.base.DB.connect", create=True, side_effect=RuntimeError("network unreachable"))

tests/functional/test_epic_a_data_model_functional.py:1748: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_________ test_7_3_2_14_db_permission_failure_prevents_schema_creation _________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cac41c0>

    def test_7_3_2_14_db_permission_failure_prevents_schema_creation(mocker):
        """Verifies 7.3.2.14 — Database permission failure halts STEP-3 and prevents schema creation."""
>       ddl = mocker.patch("app.db.base.DB.execute_ddl", create=True, side_effect=RuntimeError("permission denied"))

tests/functional/test_epic_a_data_model_functional.py:1760: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_____________ test_7_3_2_15_tls_handshake_failure_prevents_inserts _____________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bae6a40>

    def test_7_3_2_15_tls_handshake_failure_prevents_inserts(mocker):
        """Verifies 7.3.2.15 — TLS certificate/handshake failure prevents inserts."""
>       handshake = mocker.patch("app.db.base.DB.connect_tls", create=True, side_effect=RuntimeError("handshake failed"))

tests/functional/test_epic_a_data_model_functional.py:1772: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_________ test_7_3_2_16_db_storage_exhaustion_prevents_journal_updates _________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cd60760>

    def test_7_3_2_16_db_storage_exhaustion_prevents_journal_updates(mocker):
        """Verifies 7.3.2.16 — Database storage exhaustion halts STEP-3 and prevents journal updates."""
>       create_table = mocker.patch("app.db.base.DB.execute_ddl", create=True, side_effect=RuntimeError("no space left on device"))

tests/functional/test_epic_a_data_model_functional.py:1784: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
_________ test_7_3_2_17_temp_fs_unavailable_prevents_step_continuation _________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>, comp = 'fs'
import_path = 'app.fs'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'fs'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb1ad40>

    def test_7_3_2_17_temp_fs_unavailable_prevents_step_continuation(mocker):
        """Verifies 7.3.2.17 — Filesystem/temp unavailability prevents STEP-3 continuation (degraded stop)."""
>       temp = mocker.patch("app.fs.tmp.allocate", create=True, side_effect=RuntimeError("temp unavailable"))

tests/functional/test_epic_a_data_model_functional.py:1796: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>, comp = 'fs'
import_path = 'app.fs'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.fs'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
______________ test_7_3_2_18_kms_unavailability_halts_encryption _______________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'encryption'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cd632b0>

    def test_7_3_2_18_kms_unavailability_halts_encryption(mocker):
        """Verifies 7.3.2.18 — KMS unavailability halts STEP-3 encryption operations and prevents access."""
>       get_key = mocker.patch("app.encryption.kms.get_key", create=True, side_effect=RuntimeError("kms down"))

tests/functional/test_epic_a_data_model_functional.py:1808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.encryption'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
__________________ test_7_3_2_19_time_sync_failure_halts_step __________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'time', import_path = 'app.time'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'time'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57ba26650>

    def test_7_3_2_19_time_sync_failure_halts_step(mocker):
        """Verifies 7.3.2.19 — Time synchronisation failure halts STEP-3 where timestamps are required."""
>       time_sync = mocker.patch("app.time.sync.ensure_synchronised", create=True, side_effect=RuntimeError("time skew"))

tests/functional/test_epic_a_data_model_functional.py:1820: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'time', import_path = 'app.time'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.time'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
__________ test_7_3_2_20_config_dependency_unavailable_prevents_start __________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb07760>

    def test_7_3_2_20_config_dependency_unavailable_prevents_start(mocker):
        """Verifies 7.3.2.20 — Configuration dependency unavailability prevents STEP-3 initiation."""
>       cfg = mocker.patch("app.config.loader.load", create=True, side_effect=RuntimeError("config unavailable"))

tests/functional/test_epic_a_data_model_functional.py:1832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.config' from '/home/codex/schofield/app/config.py'>
comp = 'loader', import_path = 'app.config.loader'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.config.loader'; 'app.config' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_22_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57ccf9330>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_23_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bfead40>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_24_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'net', import_path = 'app.net'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'net'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb995d0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'net', import_path = 'app.net'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.net'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_25_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bafa830>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_26_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bf57bb0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_27_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57c46c100>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_28_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb04190>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_29_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'encryption'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb97490>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.encryption'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_30_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'encryption'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bf54d00>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.encryption'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_31_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'encryption'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb1f100>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.encryption'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_32_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'encryption'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bf55ed0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.encryption'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_33_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'encryption'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb3d8d0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.encryption'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_34_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'cache', import_path = 'app.cache'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'cache'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bf55630>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'cache', import_path = 'app.cache'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.cache'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_35_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'secrets', import_path = 'app.secrets'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'secrets'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb3e980>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'secrets', import_path = 'app.secrets'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.secrets'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_36_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57ba276a0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_37_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'logging', import_path = 'app.logging'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'logging'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb3c9d0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'logging', import_path = 'app.logging'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.logging'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_38_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cac52d0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_39_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb46860>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_40_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cd5aa10>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_41_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb53820>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_42_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb98970>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_43_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb14670>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_44_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bd0a9b0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_45_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb06320>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_46_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bae6770>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_47_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb52770>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_48_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb46b90>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DBSession', import_path = 'app.db.base.DBSession'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_49_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb02e60>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_50_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb3d750>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_51_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bafb610>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DBSession', import_path = 'app.db.base.DBSession'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_52_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'resolution', import_path = 'app.resolution'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'resolution'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bbad5a0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'resolution', import_path = 'app.resolution'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.resolution'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_53_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'encryption'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cd5a6e0>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'encryption', import_path = 'app.encryption'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.encryption'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_54_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cd75750>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DB', import_path = 'app.db.base.DB'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_55_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb44f70>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.base' from '/home/codex/schofield/app/db/base.py'>
comp = 'DBSession', import_path = 'app.db.base.DBSession'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_56_enhanced_error_semantics ____________________

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57bb17070>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app.db.migrations_runner' from '/home/codex/schofield/app/db/migrations_runner.py'>
comp = 'MigrationRunner'
import_path = 'app.db.migrations_runner.MigrationRunner'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
____________________ test_7_2_2_57_enhanced_error_semantics ____________________

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'telemetry', import_path = 'app.telemetry'

    def _dot_lookup(thing, comp, import_path):
        try:
>           return getattr(thing, comp)
E           AttributeError: module 'app' has no attribute 'telemetry'

/usr/lib/python3.10/unittest/mock.py:1248: AttributeError

During handling of the above exception, another exception occurred:

mocker = <pytest_mock.plugin.MockerFixture object at 0x7ff57cb04c10>

    def _t(mocker) -> None:
        # Apply boundary patch
>       mocked = mocker.patch(_cfg["patch"], create=True)

tests/functional/test_epic_a_data_model_functional.py:1898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:439: in __call__
    return self._start_patch(
../.local/lib/python3.10/site-packages/pytest_mock/plugin.py:257: in _start_patch
    mocked: MockType = p.start()
/usr/lib/python3.10/unittest/mock.py:1595: in start
    result = self.__enter__()
/usr/lib/python3.10/unittest/mock.py:1431: in __enter__
    self.target = self.getter()
/usr/lib/python3.10/unittest/mock.py:1618: in <lambda>
    getter = lambda: _importer(target)
/usr/lib/python3.10/unittest/mock.py:1261: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'app' from '/home/codex/schofield/app/__init__.py'>
comp = 'telemetry', import_path = 'app.telemetry'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'app.telemetry'

/usr/lib/python3.10/unittest/mock.py:1250: ModuleNotFoundError
__________________ test_7_2_2_58_outputs_entities_incomplete ___________________

    def test_7_2_2_58_outputs_entities_incomplete():
        """Verifies 7.2.2.58 — Outputs: entities incomplete."""
        outputs = _get_outputs_for_contract()
        entities = outputs.get("entities")
>       assert entities is not None  # ensure presence
E       assert None is not None

tests/functional/test_epic_a_data_model_functional.py:1945: AssertionError
______________ test_7_2_2_60_outputs_entities_mutable_within_step ______________

    def test_7_2_2_60_outputs_entities_mutable_within_step():
        """Verifies 7.2.2.60 — Outputs: entities mutable within step."""
        outputs1 = _get_outputs_for_contract()
        outputs2 = _get_outputs_for_contract()
        # Both snapshots must be present and equal within the same step
>       assert outputs1 and outputs2 and outputs1 == outputs2
E       assert ({})

tests/functional/test_epic_a_data_model_functional.py:1962: AssertionError
_____________ test_7_2_2_62_outputs_entity_name_mismatch_with_erd ______________

    def test_7_2_2_62_outputs_entity_name_mismatch_with_erd():
        """Verifies 7.2.2.62 — Outputs: entity name mismatch with ERD."""
        outputs = _get_outputs_for_contract()
        names = {e.get("name") for e in (outputs.get("entities") or [])}
>       assert names == _EXPECTED_ENTITY_NAMES
E       AssertionError: assert set() == {'AnswerOptio...ldGroup', ...}
E         
E         Extra items in the right set:
E         'Company'
E         'Response'
E         'QuestionToFieldGroup'
E         'GeneratedDocument'
E         'FieldGroup'
E         'AnswerOption'
E         'QuestionnaireQuestion'
E         'GroupValue'
E         'ResponseSet'
E         
E         Full diff:
E         + set()
E         - {
E         -     'AnswerOption',
E         -     'Company',
E         -     'FieldGroup',
E         -     'GeneratedDocument',
E         -     'GroupValue',
E         -     'QuestionToFieldGroup',
E         -     'QuestionnaireQuestion',
E         -     'Response',
E         -     'ResponseSet',
E         - }

tests/functional/test_epic_a_data_model_functional.py:1976: AssertionError
___________________ test_7_2_2_64_outputs_fields_set_invalid ___________________

    def test_7_2_2_64_outputs_fields_set_invalid():
        """Verifies 7.2.2.64 — Outputs: fields set invalid."""
        outputs = _get_outputs_for_contract()
        resp = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        fields = {f.get("name"): f.get("type") for f in (resp.get("fields") or [])}
>       assert fields == {"response_id": "uuid", "response_set_id": "uuid", "question_id": "uuid", "value_json": "jsonb"}
E       AssertionError: assert {} == {'question_id...son': 'jsonb'}
E         
E         Right contains 4 more items:
E         {'question_id': 'uuid',
E          'response_id': 'uuid',
E          'response_set_id': 'uuid',
E          'value_json': 'jsonb'}
E         
E         Full diff:
E         + {}
E         - {
E         -     'question_id': 'uuid',
E         -     'response_id': 'uuid',
E         -     'response_set_id': 'uuid',
E         -     'value_json': 'jsonb',
E         - }

tests/functional/test_epic_a_data_model_functional.py:1991: AssertionError
______________ test_7_2_2_67_outputs_field_name_mismatch_with_erd ______________

    def test_7_2_2_67_outputs_field_name_mismatch_with_erd():
        """Verifies 7.2.2.67 — Outputs: field name mismatch with ERD."""
        outputs = _get_outputs_for_contract()
        resp = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        names = {f.get("name") for f in (resp.get("fields") or [])}
>       assert names == {"response_id", "response_set_id", "question_id", "value_json"}
E       AssertionError: assert set() == {'question_id... 'value_json'}
E         
E         Extra items in the right set:
E         'response_id'
E         'response_set_id'
E         'value_json'
E         'question_id'
E         
E         Full diff:
E         + set()
E         - {
E         -     'question_id',
E         -     'response_id',
E         -     'response_set_id',
E         -     'value_json',
E         - }

tests/functional/test_epic_a_data_model_functional.py:2014: AssertionError
______________ test_7_2_2_70_outputs_field_type_mismatch_with_erd ______________

    def test_7_2_2_70_outputs_field_type_mismatch_with_erd():
        """Verifies 7.2.2.70 — Outputs: field type mismatch with ERD."""
        outputs = _get_outputs_for_contract()
        resp = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        types = {f.get("name"): f.get("type") for f in (resp.get("fields") or [])}
>       assert types == {"response_id": "uuid", "response_set_id": "uuid", "question_id": "uuid", "value_json": "jsonb"}
E       AssertionError: assert {} == {'question_id...son': 'jsonb'}
E         
E         Right contains 4 more items:
E         {'question_id': 'uuid',
E          'response_id': 'uuid',
E          'response_set_id': 'uuid',
E          'value_json': 'jsonb'}
E         
E         Full diff:
E         + {}
E         - {
E         -     'question_id': 'uuid',
E         -     'response_id': 'uuid',
E         -     'response_set_id': 'uuid',
E         -     'value_json': 'jsonb',
E         - }

tests/functional/test_epic_a_data_model_functional.py:2038: AssertionError
___________ test_7_2_2_72_outputs_encrypted_flag_false_when_required ___________

    def test_7_2_2_72_outputs_encrypted_flag_false_when_required():
        """Verifies 7.2.2.72 — Outputs: encrypted flag false when required."""
        outputs = _get_outputs_for_contract()
        resp = next((e for e in (outputs.get("entities") or []) if e.get("name") == "Response"), {})
        fld = next((f for f in (resp.get("fields") or []) if f.get("name") == "value_json"), {})
>       assert fld.get("encrypted") is True
E       AssertionError: assert None is True
E        +  where None = <built-in method get of dict object at 0x7ff57c426040>('encrypted')
E        +    where <built-in method get of dict object at 0x7ff57c426040> = {}.get

tests/functional/test_epic_a_data_model_functional.py:2054: AssertionError
__________ test_7_2_2_78_primary_key_columns_missing_when_pk_defined ___________

    def test_7_2_2_78_primary_key_columns_missing_when_pk_defined():
        """Verifies 7.2.2.78 — Primary Key Columns Missing When PK Defined."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure at least one entity declares a primary_key
>       assert any(ent.get("primary_key") is not None for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_78_primary_key_columns_missing_when_pk_defined.<locals>.<genexpr> at 0x7ff57bb5e1f0>)

tests/functional/test_epic_a_data_model_functional.py:2104: AssertionError
____________________ test_7_2_2_79_foreign_keys_set_invalid ____________________

    def test_7_2_2_79_foreign_keys_set_invalid():
        """Verifies 7.2.2.79 — Foreign Keys Set Invalid."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: assert presence of at least one foreign key overall
>       assert any((ent.get("foreign_keys") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_79_foreign_keys_set_invalid.<locals>.<genexpr> at 0x7ff57bd2c510>)

tests/functional/test_epic_a_data_model_functional.py:2116: AssertionError
______________ test_7_2_2_80_foreign_keys_order_not_deterministic ______________

    def test_7_2_2_80_foreign_keys_order_not_deterministic():
        """Verifies 7.2.2.80 — Foreign Keys Order Not Deterministic."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure foreign keys exist before order/uniqueness checks
>       assert any((ent.get("foreign_keys") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_80_foreign_keys_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bd2cb30>)

tests/functional/test_epic_a_data_model_functional.py:2131: AssertionError
_____________________ test_7_2_2_81_foreign_key_name_empty _____________________

    def test_7_2_2_81_foreign_key_name_empty():
        """Verifies 7.2.2.81 — Foreign Key Name Empty."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure at least one FK exists
>       assert any((ent.get("foreign_keys") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_81_foreign_key_name_empty.<locals>.<genexpr> at 0x7ff57bd2d0e0>)

tests/functional/test_epic_a_data_model_functional.py:2143: AssertionError
__________________ test_7_2_2_82_foreign_key_name_not_unique ___________________

    def test_7_2_2_82_foreign_key_name_not_unique():
        """Verifies 7.2.2.82 — Foreign Key Name Not Unique."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure foreign keys exist before uniqueness check
>       assert any((ent.get("foreign_keys") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_82_foreign_key_name_not_unique.<locals>.<genexpr> at 0x7ff57bd2d620>)

tests/functional/test_epic_a_data_model_functional.py:2154: AssertionError
____________ test_7_2_2_83_foreign_key_name_missing_when_fks_exist _____________

    def test_7_2_2_83_foreign_key_name_missing_when_fks_exist():
        """Verifies 7.2.2.83 — Foreign Key Name Missing When FKs Exist."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure at least one non-empty FK list exists
>       assert any(ent.get("foreign_keys") for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_83_foreign_key_name_missing_when_fks_exist.<locals>.<genexpr> at 0x7ff57bbcc4a0>)

tests/functional/test_epic_a_data_model_functional.py:2165: AssertionError
__________________ test_7_2_2_84_foreign_key_columns_unknown ___________________

    def test_7_2_2_84_foreign_key_columns_unknown():
        """Verifies 7.2.2.84 — Foreign Key Columns Unknown."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: assert fields and fks are present prior to subset checks
>       assert any((ent.get("fields") and ent.get("foreign_keys")) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_84_foreign_key_columns_unknown.<locals>.<genexpr> at 0x7ff57bbcd0e0>)

tests/functional/test_epic_a_data_model_functional.py:2178: AssertionError
__________ test_7_2_2_85_foreign_key_columns_order_not_deterministic ___________

    def test_7_2_2_85_foreign_key_columns_order_not_deterministic():
        """Verifies 7.2.2.85 — Foreign Key Columns Order Not Deterministic."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure at least one FK has columns before ordering assertion
>       assert any((fk.get("columns") or []) for ent in entities for fk in (ent.get("foreign_keys") or []))
E       assert False
E        +  where False = any(<generator object test_7_2_2_85_foreign_key_columns_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bbcf7d0>)

tests/functional/test_epic_a_data_model_functional.py:2190: AssertionError
___________ test_7_2_2_86_foreign_key_columns_missing_when_fks_exist ___________

    def test_7_2_2_86_foreign_key_columns_missing_when_fks_exist():
        """Verifies 7.2.2.86 — Foreign Key Columns Missing When FKs Exist."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure FKs exist before asserting columns presence
>       assert any((ent.get("foreign_keys") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_86_foreign_key_columns_missing_when_fks_exist.<locals>.<genexpr> at 0x7ff57bfc68f0>)

tests/functional/test_epic_a_data_model_functional.py:2202: AssertionError
_____________ test_7_2_2_87_foreign_key_references_entity_missing ______________

    def test_7_2_2_87_foreign_key_references_entity_missing():
        """Verifies 7.2.2.87 — Foreign Key References Entity Missing."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: assert entities and fks exist prior to reference checks
>       assert entities
E       assert []

tests/functional/test_epic_a_data_model_functional.py:2213: AssertionError
_____________ test_7_2_2_88_foreign_key_references_columns_missing _____________

    def test_7_2_2_88_foreign_key_references_columns_missing():
        """Verifies 7.2.2.88 — Foreign Key References Columns Missing."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure at least one FK exists and references populated
>       assert any((ent.get("foreign_keys") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_88_foreign_key_references_columns_missing.<locals>.<genexpr> at 0x7ff57bb5f5a0>)

tests/functional/test_epic_a_data_model_functional.py:2226: AssertionError
_____________ test_7_2_2_89_foreign_key_references_entity_unknown ______________

    def test_7_2_2_89_foreign_key_references_entity_unknown():
        """Verifies 7.2.2.89 — Foreign Key References Entity Unknown."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: assert entities and fks exist prior to membership checks
>       assert entities
E       assert []

tests/functional/test_epic_a_data_model_functional.py:2238: AssertionError
_____________ test_7_2_2_90_foreign_key_references_columns_unknown _____________

    def test_7_2_2_90_foreign_key_references_columns_unknown():
        """Verifies 7.2.2.90 — Foreign Key References Columns Unknown."""
        outputs = _get_outputs_for_contract()
        # This requires cross-entity column validation; ensure presence first
        entities = (outputs.get("entities") or [])
>       assert any((ent.get("foreign_keys") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_90_foreign_key_references_columns_unknown.<locals>.<genexpr> at 0x7ff57bb5ee30>)

tests/functional/test_epic_a_data_model_functional.py:2251: AssertionError
_________ test_7_2_2_91_foreign_key_references_columns_count_mismatch __________

    def test_7_2_2_91_foreign_key_references_columns_count_mismatch():
        """Verifies 7.2.2.91 — Foreign Key References Columns Count Mismatch."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: assert both fk and referenced columns exist before length compare
>       assert any((fk.get("columns") and (fk.get("references") or {}).get("columns"))
                   for ent in entities for fk in (ent.get("foreign_keys") or []))
E       assert False
E        +  where False = any(<generator object test_7_2_2_91_foreign_key_references_columns_count_mismatch.<locals>.<genexpr> at 0x7ff57bb5cc10>)

tests/functional/test_epic_a_data_model_functional.py:2263: AssertionError
_________________ test_7_2_2_92_unique_constraints_set_invalid _________________

    def test_7_2_2_92_unique_constraints_set_invalid():
        """Verifies 7.2.2.92 — Unique Constraints Set Invalid."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: assert unique_constraints exist before inner structure checks
>       assert any((ent.get("unique_constraints") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_92_unique_constraints_set_invalid.<locals>.<genexpr> at 0x7ff57bdb8580>)

tests/functional/test_epic_a_data_model_functional.py:2277: AssertionError
___________ test_7_2_2_93_unique_constraints_order_not_deterministic ___________

    def test_7_2_2_93_unique_constraints_order_not_deterministic():
        """Verifies 7.2.2.93 — Unique Constraints Order Not Deterministic."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure unique constraints exist before order check
>       assert any((ent.get("unique_constraints") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_93_unique_constraints_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bdb8ba0>)

tests/functional/test_epic_a_data_model_functional.py:2289: AssertionError
__________________ test_7_2_2_94_unique_constraint_name_empty __________________

    def test_7_2_2_94_unique_constraint_name_empty():
        """Verifies 7.2.2.94 — Unique Constraint Name Empty."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure unique constraints exist before name checks
>       assert any((ent.get("unique_constraints") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_94_unique_constraint_name_empty.<locals>.<genexpr> at 0x7ff57bdb90e0>)

tests/functional/test_epic_a_data_model_functional.py:2300: AssertionError
_______________ test_7_2_2_95_unique_constraint_name_not_unique ________________

    def test_7_2_2_95_unique_constraint_name_not_unique():
        """Verifies 7.2.2.95 — Unique Constraint Name Not Unique."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure unique constraints exist before uniqueness check
>       assert any((ent.get("unique_constraints") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_95_unique_constraint_name_not_unique.<locals>.<genexpr> at 0x7ff57bd2d7e0>)

tests/functional/test_epic_a_data_model_functional.py:2311: AssertionError
_______ test_7_2_2_96_unique_constraint_name_missing_when_uniques_exist ________

    def test_7_2_2_96_unique_constraint_name_missing_when_uniques_exist():
        """Verifies 7.2.2.96 — Unique Constraint Name Missing When Uniques Exist."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure at least one entity exposes unique_constraints
>       assert any((ent.get("unique_constraints") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_96_unique_constraint_name_missing_when_uniques_exist.<locals>.<genexpr> at 0x7ff57bd2de70>)

tests/functional/test_epic_a_data_model_functional.py:2322: AssertionError
_______________ test_7_2_2_97_unique_constraint_columns_unknown ________________

    def test_7_2_2_97_unique_constraint_columns_unknown():
        """Verifies 7.2.2.97 — Unique Constraint Columns Unknown."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: assert fields and unique_constraints exist before subset checks
>       assert any((ent.get("fields") and ent.get("unique_constraints")) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_97_unique_constraint_columns_unknown.<locals>.<genexpr> at 0x7ff57bd2e3b0>)

tests/functional/test_epic_a_data_model_functional.py:2335: AssertionError
_______ test_7_2_2_98_unique_constraint_columns_order_not_deterministic ________

    def test_7_2_2_98_unique_constraint_columns_order_not_deterministic():
        """Verifies 7.2.2.98 — Unique Constraint Columns Order Not Deterministic."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure columns exist before ordering assert
>       assert any((uq.get("columns") or []) for ent in entities for uq in (ent.get("unique_constraints") or []))
E       assert False
E        +  where False = any(<generator object test_7_2_2_98_unique_constraint_columns_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bbcde00>)

tests/functional/test_epic_a_data_model_functional.py:2347: AssertionError
______ test_7_2_2_99_unique_constraint_columns_missing_when_uniques_exist ______

    def test_7_2_2_99_unique_constraint_columns_missing_when_uniques_exist():
        """Verifies 7.2.2.99 — Unique Constraint Columns Missing When Uniques Exist."""
        outputs = _get_outputs_for_contract()
        entities = (outputs.get("entities") or [])
        # Clarke: ensure unique constraints exist before asserting columns presence
>       assert any((ent.get("unique_constraints") or []) for ent in entities)
E       assert False
E        +  where False = any(<generator object test_7_2_2_99_unique_constraint_columns_missing_when_uniques_exist.<locals>.<genexpr> at 0x7ff57bbcc4a0>)

tests/functional/test_epic_a_data_model_functional.py:2359: AssertionError
_______________________ test_7_2_2_108_enums_incomplete ________________________

    def test_7_2_2_108_enums_incomplete():
        """Verifies 7.2.2.108 — Enums Incomplete."""
        outputs = _get_outputs_for_contract()
        enums = outputs.get("enums") or []
        ak = next((e for e in enums if e.get("name") == "answer_kind"), None)
>       assert ak is not None and ak.get("values") == ["boolean", "enum_single", "long_text", "number", "short_string"]
E       assert (None is not None)

tests/functional/test_epic_a_data_model_functional.py:2439: AssertionError
__________________ test_7_2_2_111_enum_name_mismatch_with_erd __________________

    def test_7_2_2_111_enum_name_mismatch_with_erd():
        """Verifies 7.2.2.111 — Enum Name Mismatch With ERD."""
        outputs = _get_outputs_for_contract()
        names = {e.get("name") for e in (outputs.get("enums") or [])}
>       assert {"answer_kind"}.issubset(names)
E       AssertionError: assert False
E        +  where False = <built-in method issubset of set object at 0x7ff57cd66340>(set())
E        +    where <built-in method issubset of set object at 0x7ff57cd66340> = {'answer_kind'}.issubset

tests/functional/test_epic_a_data_model_functional.py:2461: AssertionError
_________________ test_7_2_2_114_enum_values_mismatch_with_erd _________________

    def test_7_2_2_114_enum_values_mismatch_with_erd():
        """Verifies 7.2.2.114 — Enum Values Mismatch With ERD."""
        outputs = _get_outputs_for_contract()
        ak = next((e for e in (outputs.get("enums") or []) if e.get("name") == "answer_kind"), {})
>       assert set(ak.get("values") or []) == {"boolean", "enum_single", "long_text", "number", "short_string"}
E       AssertionError: assert set() == {'boolean', '...short_string'}
E         
E         Extra items in the right set:
E         'number'
E         'enum_single'
E         'long_text'
E         'boolean'
E         'short_string'
E         
E         Full diff:
E         + set()
E         - {
E         -     'boolean',
E         -     'enum_single',
E         -     'long_text',
E         -     'number',
E         -     'short_string',
E         - }

tests/functional/test_epic_a_data_model_functional.py:2484: AssertionError
__________________ test_7_2_2_117_encrypted_fields_incomplete __________________

    def test_7_2_2_117_encrypted_fields_incomplete():
        """Verifies 7.2.2.117 — Encrypted Fields Incomplete."""
        outputs = _get_outputs_for_contract()
        manifest = set(outputs.get("encrypted_fields") or [])
        expected = {"Company.legal_name", "Company.registered_office_address", "Response.value_json", "GeneratedDocument.output_uri"}
>       assert manifest == expected
E       AssertionError: assert set() == {'Company.leg...e.value_json'}
E         
E         Extra items in the right set:
E         'Response.value_json'
E         'GeneratedDocument.output_uri'
E         'Company.legal_name'
E         'Company.registered_office_address'
E         
E         Full diff:
E         + set()
E         - {
E         -     'Company.legal_name',
E         -     'Company.registered_office_address',
E         -     'GeneratedDocument.output_uri',
E         -     'Response.value_json',
E         - }

tests/functional/test_epic_a_data_model_functional.py:2507: AssertionError
________________ test_7_2_2_120_constraints_applied_incomplete _________________

    def test_7_2_2_120_constraints_applied_incomplete():
        """Verifies 7.2.2.120 — Constraints Applied Incomplete."""
        outputs = _get_outputs_for_contract()
        constraints = set(outputs.get("constraints_applied") or [])
        required = {"pk_response", "fk_response_set", "uq_response_set_question"}
>       assert required.issubset(constraints)
E       AssertionError: assert False
E        +  where False = <built-in method issubset of set object at 0x7ff57bac3680>(set())
E        +    where <built-in method issubset of set object at 0x7ff57bac3680> = {'fk_response_set', 'pk_response', 'uq_response_set_question'}.issubset

tests/functional/test_epic_a_data_model_functional.py:2529: AssertionError
____________________ test_7_2_2_124_migration_journal_empty ____________________

    def test_7_2_2_124_migration_journal_empty():
        """Verifies 7.2.2.124 — Migration Journal Empty."""
        outputs = _get_outputs_for_contract()
>       assert (outputs.get("migration_journal") or [])
E       AssertionError: assert (None or [])
E        +  where None = <built-in method get of dict object at 0x7ff57c0d3ac0>('migration_journal')
E        +    where <built-in method get of dict object at 0x7ff57c0d3ac0> = {}.get

tests/functional/test_epic_a_data_model_functional.py:2556: AssertionError
=========================== short test summary info ============================
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_1_11_migration_journal_includes_filenames - AssertionError: assert 'migrations/005_add_enum_single.sql' in ['migrations/001_init.sql', 'migrations/002_constraints.sql', 'migrations/003_indexes.sql', 'migrations/004_rollbacks.sql']
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_3_erd_spec_schema_mismatch - AssertionError: assert 0 == 1
 +  where 0 = <MagicMock name='_validate_schema' id='140692335654656'>.call_count
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_11_template_registration_reuses_schema - ModuleNotFoundError: No module named 'app.registry'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_1_12_policy_registration_reuses_schema - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_9_halt_when_tls_materials_unavailable - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_10_halt_on_unsupported_data_type - ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_11_halt_on_out_of_order_migration - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_12_halt_on_unidentified_runtime_error - ModuleNotFoundError: No module named 'app.telemetry'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_13_db_connectivity_failure_halting_step - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_14_db_permission_failure_prevents_schema_creation - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_15_tls_handshake_failure_prevents_inserts - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_16_db_storage_exhaustion_prevents_journal_updates - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_17_temp_fs_unavailable_prevents_step_continuation - ModuleNotFoundError: No module named 'app.fs'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_18_kms_unavailability_halts_encryption - ModuleNotFoundError: No module named 'app.encryption'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_19_time_sync_failure_halts_step - ModuleNotFoundError: No module named 'app.time'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_3_2_20_config_dependency_unavailable_prevents_start - ModuleNotFoundError: No module named 'app.config.loader'; 'app.config' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_22_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_23_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_24_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.net'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_25_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_26_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_27_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_28_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_29_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.encryption'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_30_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.encryption'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_31_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.encryption'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_32_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.encryption'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_33_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.encryption'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_34_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.cache'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_35_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.secrets'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_36_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_37_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.logging'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_38_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_39_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_40_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_41_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_42_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_43_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_44_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_45_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_46_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_47_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_48_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_49_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_50_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_51_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_52_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.resolution'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_53_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.encryption'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_54_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DB'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_55_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.base.DBSession'; 'app.db.base' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_56_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.db.migrations_runner.MigrationRunner'; 'app.db.migrations_runner' is not a package
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_57_enhanced_error_semantics - ModuleNotFoundError: No module named 'app.telemetry'
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_58_outputs_entities_incomplete - assert None is not None
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_60_outputs_entities_mutable_within_step - assert ({})
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_62_outputs_entity_name_mismatch_with_erd - AssertionError: assert set() == {'AnswerOptio...ldGroup', ...}
  
  Extra items in the right set:
  'Company'
  'Response'
  'QuestionToFieldGroup'
  'GeneratedDocument'
  'FieldGroup'
  'AnswerOption'
  'QuestionnaireQuestion'
  'GroupValue'
  'ResponseSet'
  
  Full diff:
  + set()
  - {
  -     'AnswerOption',
  -     'Company',
  -     'FieldGroup',
  -     'GeneratedDocument',
  -     'GroupValue',
  -     'QuestionToFieldGroup',
  -     'QuestionnaireQuestion',
  -     'Response',
  -     'ResponseSet',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_64_outputs_fields_set_invalid - AssertionError: assert {} == {'question_id...son': 'jsonb'}
  
  Right contains 4 more items:
  {'question_id': 'uuid',
   'response_id': 'uuid',
   'response_set_id': 'uuid',
   'value_json': 'jsonb'}
  
  Full diff:
  + {}
  - {
  -     'question_id': 'uuid',
  -     'response_id': 'uuid',
  -     'response_set_id': 'uuid',
  -     'value_json': 'jsonb',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_67_outputs_field_name_mismatch_with_erd - AssertionError: assert set() == {'question_id... 'value_json'}
  
  Extra items in the right set:
  'response_id'
  'response_set_id'
  'value_json'
  'question_id'
  
  Full diff:
  + set()
  - {
  -     'question_id',
  -     'response_id',
  -     'response_set_id',
  -     'value_json',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_70_outputs_field_type_mismatch_with_erd - AssertionError: assert {} == {'question_id...son': 'jsonb'}
  
  Right contains 4 more items:
  {'question_id': 'uuid',
   'response_id': 'uuid',
   'response_set_id': 'uuid',
   'value_json': 'jsonb'}
  
  Full diff:
  + {}
  - {
  -     'question_id': 'uuid',
  -     'response_id': 'uuid',
  -     'response_set_id': 'uuid',
  -     'value_json': 'jsonb',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_72_outputs_encrypted_flag_false_when_required - AssertionError: assert None is True
 +  where None = <built-in method get of dict object at 0x7ff57c426040>('encrypted')
 +    where <built-in method get of dict object at 0x7ff57c426040> = {}.get
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_78_primary_key_columns_missing_when_pk_defined - assert False
 +  where False = any(<generator object test_7_2_2_78_primary_key_columns_missing_when_pk_defined.<locals>.<genexpr> at 0x7ff57bb5e1f0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_79_foreign_keys_set_invalid - assert False
 +  where False = any(<generator object test_7_2_2_79_foreign_keys_set_invalid.<locals>.<genexpr> at 0x7ff57bd2c510>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_80_foreign_keys_order_not_deterministic - assert False
 +  where False = any(<generator object test_7_2_2_80_foreign_keys_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bd2cb30>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_81_foreign_key_name_empty - assert False
 +  where False = any(<generator object test_7_2_2_81_foreign_key_name_empty.<locals>.<genexpr> at 0x7ff57bd2d0e0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_82_foreign_key_name_not_unique - assert False
 +  where False = any(<generator object test_7_2_2_82_foreign_key_name_not_unique.<locals>.<genexpr> at 0x7ff57bd2d620>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_83_foreign_key_name_missing_when_fks_exist - assert False
 +  where False = any(<generator object test_7_2_2_83_foreign_key_name_missing_when_fks_exist.<locals>.<genexpr> at 0x7ff57bbcc4a0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_84_foreign_key_columns_unknown - assert False
 +  where False = any(<generator object test_7_2_2_84_foreign_key_columns_unknown.<locals>.<genexpr> at 0x7ff57bbcd0e0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_85_foreign_key_columns_order_not_deterministic - assert False
 +  where False = any(<generator object test_7_2_2_85_foreign_key_columns_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bbcf7d0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_86_foreign_key_columns_missing_when_fks_exist - assert False
 +  where False = any(<generator object test_7_2_2_86_foreign_key_columns_missing_when_fks_exist.<locals>.<genexpr> at 0x7ff57bfc68f0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_87_foreign_key_references_entity_missing - assert []
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_88_foreign_key_references_columns_missing - assert False
 +  where False = any(<generator object test_7_2_2_88_foreign_key_references_columns_missing.<locals>.<genexpr> at 0x7ff57bb5f5a0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_89_foreign_key_references_entity_unknown - assert []
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_90_foreign_key_references_columns_unknown - assert False
 +  where False = any(<generator object test_7_2_2_90_foreign_key_references_columns_unknown.<locals>.<genexpr> at 0x7ff57bb5ee30>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_91_foreign_key_references_columns_count_mismatch - assert False
 +  where False = any(<generator object test_7_2_2_91_foreign_key_references_columns_count_mismatch.<locals>.<genexpr> at 0x7ff57bb5cc10>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_92_unique_constraints_set_invalid - assert False
 +  where False = any(<generator object test_7_2_2_92_unique_constraints_set_invalid.<locals>.<genexpr> at 0x7ff57bdb8580>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_93_unique_constraints_order_not_deterministic - assert False
 +  where False = any(<generator object test_7_2_2_93_unique_constraints_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bdb8ba0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_94_unique_constraint_name_empty - assert False
 +  where False = any(<generator object test_7_2_2_94_unique_constraint_name_empty.<locals>.<genexpr> at 0x7ff57bdb90e0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_95_unique_constraint_name_not_unique - assert False
 +  where False = any(<generator object test_7_2_2_95_unique_constraint_name_not_unique.<locals>.<genexpr> at 0x7ff57bd2d7e0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_96_unique_constraint_name_missing_when_uniques_exist - assert False
 +  where False = any(<generator object test_7_2_2_96_unique_constraint_name_missing_when_uniques_exist.<locals>.<genexpr> at 0x7ff57bd2de70>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_97_unique_constraint_columns_unknown - assert False
 +  where False = any(<generator object test_7_2_2_97_unique_constraint_columns_unknown.<locals>.<genexpr> at 0x7ff57bd2e3b0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_98_unique_constraint_columns_order_not_deterministic - assert False
 +  where False = any(<generator object test_7_2_2_98_unique_constraint_columns_order_not_deterministic.<locals>.<genexpr> at 0x7ff57bbcde00>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_99_unique_constraint_columns_missing_when_uniques_exist - assert False
 +  where False = any(<generator object test_7_2_2_99_unique_constraint_columns_missing_when_uniques_exist.<locals>.<genexpr> at 0x7ff57bbcc4a0>)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_108_enums_incomplete - assert (None is not None)
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_111_enum_name_mismatch_with_erd - AssertionError: assert False
 +  where False = <built-in method issubset of set object at 0x7ff57cd66340>(set())
 +    where <built-in method issubset of set object at 0x7ff57cd66340> = {'answer_kind'}.issubset
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_114_enum_values_mismatch_with_erd - AssertionError: assert set() == {'boolean', '...short_string'}
  
  Extra items in the right set:
  'number'
  'enum_single'
  'long_text'
  'boolean'
  'short_string'
  
  Full diff:
  + set()
  - {
  -     'boolean',
  -     'enum_single',
  -     'long_text',
  -     'number',
  -     'short_string',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_117_encrypted_fields_incomplete - AssertionError: assert set() == {'Company.leg...e.value_json'}
  
  Extra items in the right set:
  'Response.value_json'
  'GeneratedDocument.output_uri'
  'Company.legal_name'
  'Company.registered_office_address'
  
  Full diff:
  + set()
  - {
  -     'Company.legal_name',
  -     'Company.registered_office_address',
  -     'GeneratedDocument.output_uri',
  -     'Response.value_json',
  - }
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_120_constraints_applied_incomplete - AssertionError: assert False
 +  where False = <built-in method issubset of set object at 0x7ff57bac3680>(set())
 +    where <built-in method issubset of set object at 0x7ff57bac3680> = {'fk_response_set', 'pk_response', 'uq_response_set_question'}.issubset
FAILED tests/functional/test_epic_a_data_model_functional.py::test_7_2_2_124_migration_journal_empty - AssertionError: assert (None or [])
 +  where None = <built-in method get of dict object at 0x7ff57c0d3ac0>('migration_journal')
 +    where <built-in method get of dict object at 0x7ff57c0d3ac0> = {}.get
================== 87 failed, 102 passed, 1 xfailed in 20.02s ==================
