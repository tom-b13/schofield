{
  "tests": [
    {
      "test_id": "tests/architectural/test_epic_a_data_model_architecture.py::test_rollback_scripts_present_and_reverse_prior_migrations",
      "predicate": "assert all(earlier < later for earlier, later in zip(positions, positions[1:])), \"Rollback drops must be ordered strictly as reverse of creation order for 001–003\"",
      "evidence": {
        "matches": [
          {
            "structure": "SQL DDL (creation order)",
            "name": "migrations/002_constraints.sql — last-created constraints appear late in rollback",
            "lines": "38–57",
            "excerpt": "ALTER TABLE questionnaire_question\n    ADD CONSTRAINT uq_question_external_qid UNIQUE (external_qid);\n\nCREATE UNIQUE INDEX IF NOT EXISTS uq_question_placeholder_code\n    ON questionnaire_question(placeholder_code)\n    WHERE placeholder_code IS NOT NULL;"
          },
          {
            "structure": "SQL DDL (rollback order)",
            "name": "migrations/004_rollbacks.sql — uq_question_external_qid dropped too late; group_value/response internal order not reverse",
            "lines": "1–40",
            "excerpt": "DROP INDEX IF EXISTS uq_question_placeholder_code;\n...\nALTER TABLE group_value\n    DROP CONSTRAINT IF EXISTS fk_group_value_source_q,\n    DROP CONSTRAINT IF EXISTS fk_group_value_option,\n    DROP CONSTRAINT IF EXISTS fk_group_value_group,\n    DROP CONSTRAINT IF EXISTS fk_group_value_set,\n    DROP CONSTRAINT IF EXISTS uq_group_value_per_set;\n\nALTER TABLE response\n    DROP CONSTRAINT IF EXISTS fk_response_option,\n    DROP CONSTRAINT IF EXISTS fk_response_question,\n    DROP CONSTRAINT IF EXISTS fk_response_set,\n    DROP CONSTRAINT IF EXISTS uq_response_set_question;\n...\nALTER TABLE questionnaire_question\n    DROP CONSTRAINT IF EXISTS uq_question_external_qid;"
          }
        ],
        "passable_by_app_code": true
      },
      "next_step": "update application code",
      "instructions_to_ada": "Reorder constraint drops in migrations/004_rollbacks.sql to strictly reverse the creation order from migrations/002_constraints.sql and 003_indexes.sql. Keep all DROP INDEX statements for 003 first, then the partial-unique index uq_question_placeholder_code, then constraints in exact reverse order: 1) ALTER TABLE questionnaire_question DROP CONSTRAINT IF EXISTS uq_question_external_qid; 2) ALTER TABLE group_value with constraints in this order: DROP CONSTRAINT IF EXISTS uq_group_value_per_set, fk_group_value_source_q, fk_group_value_option, fk_group_value_group, fk_group_value_set; 3) ALTER TABLE response with constraints in this order: DROP CONSTRAINT IF EXISTS uq_response_set_question, fk_response_option, fk_response_question, fk_response_set; 4) ALTER TABLE generated_document DROP CONSTRAINT IF EXISTS fk_generated_document_set; 5) ALTER TABLE response_set DROP CONSTRAINT IF EXISTS fk_response_set_company; 6) ALTER TABLE question_to_field_group (current order uq_q2fg_question_group, fk_q2fg_field_group, fk_q2fg_question is correct; keep as-is); 7) ALTER TABLE answer_option (current order uq_answer_option_question_value, fk_answer_option_question is correct; keep as-is). Finally, DROP TABLE statements remain in reverse creation order as currently implemented.",
      "request_for_clarification": ""
    },
    {
      "test_id": "tests/architectural/test_epic_a_data_model_architecture.py::test_constraints_and_indexes_live_in_migrations_not_code",
      "predicate": "assert not offenders, f\"DDL tokens must not appear outside migrations: {offenders}\"",
      "evidence": {
        "matches": [
          {
            "structure": "helper",
            "name": "_ddl_tokens_present_outside_migrations (tests exclusion check too strict)",
            "lines": "150–168",
            "excerpt": "for path in Path(\".\").rglob(\"*.py\"):\n    if str(path).startswith(\"./migrations/\"):\n        continue\n    # Exclude tests from scan; only application code should be checked\n    if str(path).startswith(\"./tests/\"):\n        continue\n    ...\n    if re.search(t, text, re.IGNORECASE):\n        offenders.append((path, t))"
          },
          {
            "structure": "failure_output",
            "name": "offenders include files under tests/ due to './tests/' prefix mismatch",
            "lines": "N/A",
            "excerpt": "DDL tokens must not appear outside migrations: [(PosixPath('tests/architectural/test_epic_a_data_model_architecture.py'), '\\\\bCREATE\\\\s+TABLE\\\\b'), (PosixPath('tests/integration/features/steps/epic_a_behaviour_steps.py'), '\\\\bCONSTRAINT\\\\b'), (PosixPath('tests/functional/test_epic_a_data_model_functional.py'), '\\\\bCONSTRAINT\\\\b')]"
          }
        ],
        "passable_by_app_code": false
      },
      "next_step": "update test code",
      "instructions_to_ada": "Fix test helper _ddl_tokens_present_outside_migrations to robustly skip the tests/ tree. Replace the prefix checks to handle paths without './':\n- Compute rel = path.as_posix().lstrip('./') and then:\n  if rel.startswith('migrations/'): continue\n  if rel.startswith('tests/'): continue\nAlternatively, use path.parts and skip when path.parts[0] in {'migrations','tests'}. Keep the rest of the logic unchanged.",
      "request_for_clarification": ""
    },
    {
      "test_id": "tests/architectural/test_epic_a_data_model_architecture.py::test_erd_parity_exports_correspond_to_erd_spec",
      "predicate": "assert erd_relationships.issubset(csv_relationships), \"All ERD FKs must appear as CSV rows\"",
      "evidence": {
        "matches": [
          {
            "structure": "ERD",
            "name": "docs/erd_spec.json — GeneratedDocument → ResponseSet FK",
            "lines": "41–58",
            "excerpt": "\"name\": \"GeneratedDocument\",\n...\n\"foreign_keys\": [\n  {\"name\": \"fk_generated_document_set\", \"columns\": [\"response_set_id\"], \"references\": {\"entity\": \"ResponseSet\", \"columns\": [\"response_set_id\"]}}\n]"
          },
          {
            "structure": "CSV",
            "name": "docs/erd_relationships.csv — reversed edge present",
            "lines": "1–14",
            "excerpt": "source,target\n...\nResponseSet,GeneratedDocument"
          },
          {
            "structure": "Mermaid",
            "name": "docs/erd_mermaid.md — reversed edge present",
            "lines": "12–18",
            "excerpt": "Response --> ResponseSet\nResponseSet --> Company\nResponseSet --> GeneratedDocument"
          }
        ],
        "passable_by_app_code": true
      },
      "next_step": "update application code",
      "instructions_to_ada": "Correct relationship direction for GeneratedDocument → ResponseSet in both parity exports: 1) In docs/erd_relationships.csv, replace the row 'ResponseSet,GeneratedDocument' with 'GeneratedDocument,ResponseSet'. 2) In docs/erd_mermaid.md, replace the edge 'ResponseSet --> GeneratedDocument' with 'GeneratedDocument --> ResponseSet'. Leave all other nodes and edges unchanged and keep edges in sorted (source,target) order.",
      "request_for_clarification": ""
    }
  ],
  "iteration_checkpoint": {
    "continue": false
  }
}