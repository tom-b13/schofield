openapi: 3.1.0
info:
  title: Questionnaire Service API (Epic B, without conditionals)
  version: 1.0.0
  description: 'Backend API for questionnaires, screens, per-answer autosave, CSV
    import/export, and generation gating. Conditional-question logic is out of scope
    for this epic.

    '
servers:
- url: /api/v1
paths:
  /questionnaires/{id}:
    get:
      summary: Get questionnaire metadata and screens index (no questions)
      operationId: getQuestionnaire
      tags: [Questionnaires]
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Questionnaire metadata and screens
          content:
            application/json:
              schema:
                type: object
                required:
                - questionnaire_id
                - name
                - screens
                properties:
                  questionnaire_id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  description:
                    type: string
                  screens:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScreenIndexItem'
        '404':
          $ref: '#/components/responses/NotFound'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /response-sets/{response_set_id}/screens/{screen_id}:
    get:
      summary: Get a screen with its questions and any existing answers
      description: Pre-population may be applied to answers prior to serialization.
      operationId: getScreenWithAnswers
      tags: [ScreenView]
      security:
      - bearerAuth: []
      parameters:
      - name: response_set_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: screen_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Screen view (no conditional filtering)
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenView'
        '422':
          description: Unprocessable Entity
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          $ref: '#/components/responses/NotFound'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /response-sets/{response_set_id}/answers/{question_id}:
    patch:
      summary: Autosave a single answer for a question
      operationId: autosaveAnswer
      tags: [Autosave]
      security:
      - bearerAuth: []
      parameters:
      - name: response_set_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: question_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - $ref: '#/components/parameters/IdempotencyKey'
      - $ref: '#/components/parameters/IfMatch'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerUpsert'
      responses:
        '200':
          description: Saved successfully
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
          content:
            application/json:
              schema:
                type: object
                required:
                - saved
                - etag
                properties:
                  saved:
                    type: boolean
                  etag:
                    type: string
        '409':
          $ref: '#/components/responses/Conflict'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '422':
          $ref: '#/components/responses/ValidationError'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          $ref: '#/components/responses/NotFound'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /response-sets/{id}/answers:
    post:
      summary: Batch upsert answers (optional; used by importer/integrations)
      operationId: batchUpsertAnswers
      tags: [Ingestion]
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerDeltaBatch'
      responses:
        '202':
          description: Accepted; results per delta
          content:
            application/json:
              schema:
                type: object
                required:
                - results
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      required:
                      - question_id
                      - saved
                      properties:
                        question_id:
                          type: string
                          format: uuid
                        saved:
                          type: boolean
                        error:
                          $ref: '#/components/schemas/ValidationItem'
        '422':
          $ref: '#/components/responses/ValidationError'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
        '404':
          $ref: '#/components/responses/NotFound'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /response-sets/{id}/regenerate-check:
    post:
      summary: Check whether generation may proceed (gating)
      operationId: regenerateCheck
      tags: [Gating]
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Gating status
          content:
            application/json:
              schema:
                type: object
                required:
                - ok
                - mandatory_total
                - mandatory_answered
                properties:
                  ok:
                    type: boolean
                  mandatory_total:
                    type: integer
                    minimum: 0
                  mandatory_answered:
                    type: integer
                    minimum: 0
                  optional_answered:
                    type: integer
                    minimum: 0
                  total_questions:
                    type: integer
                    minimum: 0
                  blocking_outstanding:
                    type: array
                    items:
                      type: string
                      format: uuid
        '404':
          $ref: '#/components/responses/NotFound'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /questionnaires/import:
    post:
      summary: Import questionnaire CSV (v1.0)
      operationId: importQuestionnaireCsv
      tags: [Import]
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          text/csv; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CSVImportFile'
      responses:
        '200':
          description: Import result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResult'
  /questionnaires/{id}/export:
    get:
      summary: Export questionnaire CSV (v1.0)
      description: |
        Stream the CSV export using a read-only, repeatable-read (or equivalent snapshot) to ensure deterministic results. The endpoint will stream data to the client.
        Order by screen_key NULLS LAST, question_order NULLS LAST, then question_id for stable output.
      operationId: exportQuestionnaireCsv
      tags: [Export]
      security:
      - bearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: CSV snapshot streamed; read-only, repeatable-read transaction (or equivalent snapshot). Order by screen_key NULLS LAST, question_order NULLS LAST, then question_id.
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
              description: Strong validator computed from payload (e.g., SHA-256 over rowset).
          content:
            text/csv; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CSVExportSnapshot'
        '404':
          $ref: '#/components/responses/NotFound'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    ETag:
      description: Strong validator computed from payload (e.g., SHA-256 over rowset).
      schema:
        type: string
  responses:
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Conflict:
      description: Conflict (e.g., If-Match precondition failed)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    ValidationError:
      description: One or more validation errors occurred
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ValidationProblem'
  schemas:
    Problem:
      type: object
      properties:
        type: { type: string }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
      required: [title, status]
    ValidationProblem:
      type: object
      allOf:
        - $ref: '#/components/schemas/Problem'
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code: { type: string }
              path: { type: string }
              message: { type: string }
            required: [code, path]
      required: [errors]
    ScreenIndexItem:
      type: object
      required:
      - screen_id
      - screen_key
      - title
      - question_count
      properties:
        screen_id:
          type: string
          format: uuid
        screen_key:
          type: string
        title:
          type: string
        question_count:
          type: integer
          minimum: 0
    QuestionWithAnswer:
      type: object
      required:
      - question_id
      - question_text
      - answer_kind
      - mandatory
      properties:
        question_id:
          type: string
          format: uuid
        external_qid:
          type: string
        question_text:
          type: string
        mandatory:
          type: boolean
        placeholder_code:
          type: string
          nullable: true
        options:
          description: Present only for enum_single
          type: array
          items:
            type: object
            required:
            - option_id
            - value
            properties:
              option_id:
                type: string
                format: uuid
              value:
                type: string
              label:
                type: string
        answer:
          description: Existing answer if present
          type: object
          properties:
            value: {}
            option_id:
              type: string
              format: uuid
            answered_at:
              type: string
              format: date-time
        answer_kind:
          type: string
          enum:
          - short_string
          - long_text
          - boolean
          - number
          - enum_single
          - date
    ScreenView:
      type: object
      required:
      - screen_id
      - response_set_id
      - screen_key
      - title
      - questions
      properties:
        screen_id:
          type: string
          format: uuid
        response_set_id:
          type: string
          format: uuid
        screen_key:
          type: string
        title:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionWithAnswer'
    AnswerUpsert:
      type: object
      additionalProperties: false
      properties:
        value:
          description: Type-appropriate answer value
          oneOf:
          - type: string
          - type: number
          - type: boolean
        option_id:
          description: Required when answer_kind is enum_single
          type: string
          format: uuid
      anyOf:
      - required:
        - value
      - required:
        - option_id
      required: []
    AnswerDelta:
      type: object
      required:
      - question_id
      additionalProperties: false
      properties:
        question_id:
          type: string
          format: uuid
        value:
          oneOf:
          - type: string
          - type: number
          - type: boolean
        option_id:
          type: string
          format: uuid
    AnswerDeltaBatch:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AnswerDelta'
    Problem:
      type: object
      required:
      - type
      - title
      - status
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
    ValidationItem:
      type: object
      required:
      - path
      - message
      properties:
        path:
          type: string
        message:
          type: string
        code:
          type: string
    ValidationProblem:
      allOf:
      - $ref: '#/components/schemas/Problem'
      - type: object
        required:
        - errors
        properties:
          errors:
            type: array
            items:
              $ref: '#/components/schemas/ValidationItem'
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationItem'
    QuestionnaireId:
      title: QuestionnaireId
      type: string
      format: uuid
      description: Unique identifier for questionnaire objects.
    ResponseSetId:
      title: ResponseSetId
      type: string
      format: uuid
      description: Unique identifier for responseset objects.
    ScreenId:
      title: ScreenId
      type: string
      format: uuid
      description: Unique identifier for screen objects.
    QuestionId:
      title: QuestionId
      type: string
      format: uuid
      description: Unique identifier for question objects.
    CSVImportFile:
      title: CSVImportFile
      type: string
      contentMediaType: text/csv
      description: UTF-8, RFC4180 CSV file for questionnaire import.
    ImportResult:
      title: ImportResult
      type: object
      required:
      - created
      - updated
      - deleted
      - errors
      properties:
        created:
          type: integer
        updated:
          type: integer
        deleted:
          type: integer
        errors:
          type: array
          items:
            type: object
            required:
            - line
            - message
            properties:
              line:
                type: integer
              message:
                type: string
    CSVExportSnapshot:
      title: CSVExportSnapshot
      type: string
      contentMediaType: text/csv
      description: CSV snapshot produced by export.
    Questionnaire:
      type: object
      properties:
        questionnaire_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
    Screen:
      type: object
      properties:
        screen_id:
          type: string
          format: uuid
        questionnaire_id:
          type: string
          format: uuid
        screen_key:
          type: string
        title:
          type: string
    Question:
      type: object
      properties:
        question_id:
          type: string
          format: uuid
        screen_id:
          type: string
          format: uuid
        question_text:
          type: string
        answer_kind:
          type: string
        mandatory:
          type: boolean
    Answer:
      type: object
      properties:
        response_set_id:
          type: string
          format: uuid
        question_id:
          type: string
          format: uuid
        value: {}
        option_id:
          type: string
          format: uuid
  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: true
      schema:
        type: string
      description: Unique key for idempotent requests.
    IfMatch:
      name: If-Match
      in: header
      required: true
      schema:
        type: string
      description: ETag precondition for optimistic concurrency.
    
    
    
    
    
    
